
Lab_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080028e8  080028e8  000128e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002908  08002908  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08002908  08002908  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002908  08002908  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002908  08002908  00012908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800290c  0800290c  0001290c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08002910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000098  080029a8  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  080029a8  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aea7  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021f3  00000000  00000000  0002af68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  0002d160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a20  00000000  00000000  0002dcd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001824c  00000000  00000000  0002e6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ddfa  00000000  00000000  00046944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000868e1  00000000  00000000  0005473e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000db01f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002be0  00000000  00000000  000db074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	080028d0 	.word	0x080028d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	080028d0 	.word	0x080028d0

0800014c <isButton1Pressed>:
int button1_pressed[NUM_BUTTONS] = {0};
int button1_long_pressed[NUM_BUTTONS] = {0};
int button1_flag[NUM_BUTTONS] = {0};


int isButton1Pressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if( index >= NUM_BUTTONS ) return 0;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b02      	cmp	r3, #2
 8000158:	dd01      	ble.n	800015e <isButton1Pressed+0x12>
 800015a:	2300      	movs	r3, #0
 800015c:	e00d      	b.n	800017a <isButton1Pressed+0x2e>
		if(button1_flag[index] == 1){
 800015e:	4a09      	ldr	r2, [pc, #36]	; (8000184 <isButton1Pressed+0x38>)
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000166:	2b01      	cmp	r3, #1
 8000168:	d106      	bne.n	8000178 <isButton1Pressed+0x2c>
			button1_flag[index] = 0;
 800016a:	4a06      	ldr	r2, [pc, #24]	; (8000184 <isButton1Pressed+0x38>)
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	2100      	movs	r1, #0
 8000170:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 8000174:	2301      	movs	r3, #1
 8000176:	e000      	b.n	800017a <isButton1Pressed+0x2e>
		}
		return 0;
 8000178:	2300      	movs	r3, #0
}
 800017a:	4618      	mov	r0, r3
 800017c:	370c      	adds	r7, #12
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr
 8000184:	200000b4 	.word	0x200000b4

08000188 <subKeyProcess>:
		return 1;
	}
	return 0;
}

void subKeyProcess(int index){
 8000188:	b480      	push	{r7}
 800018a:	b083      	sub	sp, #12
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
	button1_flag[index] = 1;
 8000190:	4a04      	ldr	r2, [pc, #16]	; (80001a4 <subKeyProcess+0x1c>)
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	2101      	movs	r1, #1
 8000196:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	200000b4 	.word	0x200000b4

080001a8 <getKeyInput>:

void getKeyInput(){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < NUM_BUTTONS ; i++){
 80001ae:	2300      	movs	r3, #0
 80001b0:	607b      	str	r3, [r7, #4]
 80001b2:	e072      	b.n	800029a <getKeyInput+0xf2>
		KeyReg0[i] = KeyReg1[i];
 80001b4:	4a3d      	ldr	r2, [pc, #244]	; (80002ac <getKeyInput+0x104>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001bc:	493c      	ldr	r1, [pc, #240]	; (80002b0 <getKeyInput+0x108>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80001c4:	4a3b      	ldr	r2, [pc, #236]	; (80002b4 <getKeyInput+0x10c>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001cc:	4937      	ldr	r1, [pc, #220]	; (80002ac <getKeyInput+0x104>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		// Add your key
		KeyReg2[i] = HAL_GPIO_ReadPin(GPIOB, BUTTON[i]);
 80001d4:	4a38      	ldr	r2, [pc, #224]	; (80002b8 <getKeyInput+0x110>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001dc:	4619      	mov	r1, r3
 80001de:	4837      	ldr	r0, [pc, #220]	; (80002bc <getKeyInput+0x114>)
 80001e0:	f001 fb1a 	bl	8001818 <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	4619      	mov	r1, r3
 80001e8:	4a32      	ldr	r2, [pc, #200]	; (80002b4 <getKeyInput+0x10c>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 80001f0:	4a2e      	ldr	r2, [pc, #184]	; (80002ac <getKeyInput+0x104>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f8:	492d      	ldr	r1, [pc, #180]	; (80002b0 <getKeyInput+0x108>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000200:	429a      	cmp	r2, r3
 8000202:	d147      	bne.n	8000294 <getKeyInput+0xec>
 8000204:	4a29      	ldr	r2, [pc, #164]	; (80002ac <getKeyInput+0x104>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020c:	4929      	ldr	r1, [pc, #164]	; (80002b4 <getKeyInput+0x10c>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000214:	429a      	cmp	r2, r3
 8000216:	d13d      	bne.n	8000294 <getKeyInput+0xec>
		    if (KeyReg2[i] != KeyReg3[i]){
 8000218:	4a26      	ldr	r2, [pc, #152]	; (80002b4 <getKeyInput+0x10c>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	4927      	ldr	r1, [pc, #156]	; (80002c0 <getKeyInput+0x118>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000228:	429a      	cmp	r2, r3
 800022a:	d016      	beq.n	800025a <getKeyInput+0xb2>
		      KeyReg3[i] = KeyReg2[i];
 800022c:	4a21      	ldr	r2, [pc, #132]	; (80002b4 <getKeyInput+0x10c>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000234:	4922      	ldr	r1, [pc, #136]	; (80002c0 <getKeyInput+0x118>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		      if (KeyReg2[i] == PRESSED_STATE){
 800023c:	4a1d      	ldr	r2, [pc, #116]	; (80002b4 <getKeyInput+0x10c>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d125      	bne.n	8000294 <getKeyInput+0xec>
		    	  TimeOutForKeyPress[i] = 200;
 8000248:	4a1e      	ldr	r2, [pc, #120]	; (80002c4 <getKeyInput+0x11c>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	21c8      	movs	r1, #200	; 0xc8
 800024e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		    	  subKeyProcess(i);
 8000252:	6878      	ldr	r0, [r7, #4]
 8000254:	f7ff ff98 	bl	8000188 <subKeyProcess>
 8000258:	e01c      	b.n	8000294 <getKeyInput+0xec>
		      }

		    }else{
		        TimeOutForKeyPress[i] --;
 800025a:	4a1a      	ldr	r2, [pc, #104]	; (80002c4 <getKeyInput+0x11c>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000262:	1e5a      	subs	r2, r3, #1
 8000264:	4917      	ldr	r1, [pc, #92]	; (80002c4 <getKeyInput+0x11c>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		        if (TimeOutForKeyPress[i] == 0){
 800026c:	4a15      	ldr	r2, [pc, #84]	; (80002c4 <getKeyInput+0x11c>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d10d      	bne.n	8000294 <getKeyInput+0xec>
		        	TimeOutForKeyPress[i] = 200;
 8000278:	4a12      	ldr	r2, [pc, #72]	; (80002c4 <getKeyInput+0x11c>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	21c8      	movs	r1, #200	; 0xc8
 800027e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		        	if (KeyReg2[i] == PRESSED_STATE){
 8000282:	4a0c      	ldr	r2, [pc, #48]	; (80002b4 <getKeyInput+0x10c>)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d102      	bne.n	8000294 <getKeyInput+0xec>
		        		subKeyProcess(i);
 800028e:	6878      	ldr	r0, [r7, #4]
 8000290:	f7ff ff7a 	bl	8000188 <subKeyProcess>
	for(int i = 0 ; i < NUM_BUTTONS ; i++){
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	3301      	adds	r3, #1
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2b02      	cmp	r3, #2
 800029e:	dd89      	ble.n	80001b4 <getKeyInput+0xc>
		        	}
		        }
		    }
		}
	}
}
 80002a0:	bf00      	nop
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	2000000c 	.word	0x2000000c
 80002b0:	20000000 	.word	0x20000000
 80002b4:	20000018 	.word	0x20000018
 80002b8:	20000078 	.word	0x20000078
 80002bc:	40010c00 	.word	0x40010c00
 80002c0:	20000024 	.word	0x20000024
 80002c4:	20000030 	.word	0x20000030

080002c8 <displayClock>:
#include"display7Segment.h"


int led_buffer[4] = {1, 2, 3, 4};

void displayClock(){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	switch(counter_led){
 80002cc:	4b32      	ldr	r3, [pc, #200]	; (8000398 <displayClock+0xd0>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	3b01      	subs	r3, #1
 80002d2:	2b03      	cmp	r3, #3
 80002d4:	d852      	bhi.n	800037c <displayClock+0xb4>
 80002d6:	a201      	add	r2, pc, #4	; (adr r2, 80002dc <displayClock+0x14>)
 80002d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002dc:	08000359 	.word	0x08000359
 80002e0:	08000335 	.word	0x08000335
 80002e4:	08000311 	.word	0x08000311
 80002e8:	080002ed 	.word	0x080002ed
		case 4:
			GPIOB->ODR = arr[led_buffer[0]];
 80002ec:	4b2b      	ldr	r3, [pc, #172]	; (800039c <displayClock+0xd4>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a2b      	ldr	r2, [pc, #172]	; (80003a0 <displayClock+0xd8>)
 80002f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002f6:	4b2b      	ldr	r3, [pc, #172]	; (80003a4 <displayClock+0xdc>)
 80002f8:	60da      	str	r2, [r3, #12]
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, GPIO_PIN_SET);
 80002fa:	2201      	movs	r2, #1
 80002fc:	2110      	movs	r1, #16
 80002fe:	482a      	ldr	r0, [pc, #168]	; (80003a8 <displayClock+0xe0>)
 8000300:	f001 faa1 	bl	8001846 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, GPIO_PIN_RESET);
 8000304:	2200      	movs	r2, #0
 8000306:	2102      	movs	r1, #2
 8000308:	4827      	ldr	r0, [pc, #156]	; (80003a8 <displayClock+0xe0>)
 800030a:	f001 fa9c 	bl	8001846 <HAL_GPIO_WritePin>
			break;
 800030e:	e035      	b.n	800037c <displayClock+0xb4>
		case 3:
			GPIOB->ODR = arr[led_buffer[1]];
 8000310:	4b22      	ldr	r3, [pc, #136]	; (800039c <displayClock+0xd4>)
 8000312:	685b      	ldr	r3, [r3, #4]
 8000314:	4a22      	ldr	r2, [pc, #136]	; (80003a0 <displayClock+0xd8>)
 8000316:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800031a:	4b22      	ldr	r3, [pc, #136]	; (80003a4 <displayClock+0xdc>)
 800031c:	60da      	str	r2, [r3, #12]
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, GPIO_PIN_SET);
 800031e:	2201      	movs	r2, #1
 8000320:	2102      	movs	r1, #2
 8000322:	4821      	ldr	r0, [pc, #132]	; (80003a8 <displayClock+0xe0>)
 8000324:	f001 fa8f 	bl	8001846 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, GPIO_PIN_RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	2104      	movs	r1, #4
 800032c:	481e      	ldr	r0, [pc, #120]	; (80003a8 <displayClock+0xe0>)
 800032e:	f001 fa8a 	bl	8001846 <HAL_GPIO_WritePin>
			break;
 8000332:	e023      	b.n	800037c <displayClock+0xb4>
		case 2:
			GPIOB->ODR = arr[led_buffer[2]];
 8000334:	4b19      	ldr	r3, [pc, #100]	; (800039c <displayClock+0xd4>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	4a19      	ldr	r2, [pc, #100]	; (80003a0 <displayClock+0xd8>)
 800033a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800033e:	4b19      	ldr	r3, [pc, #100]	; (80003a4 <displayClock+0xdc>)
 8000340:	60da      	str	r2, [r3, #12]
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, GPIO_PIN_SET);
 8000342:	2201      	movs	r2, #1
 8000344:	2104      	movs	r1, #4
 8000346:	4818      	ldr	r0, [pc, #96]	; (80003a8 <displayClock+0xe0>)
 8000348:	f001 fa7d 	bl	8001846 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, GPIO_PIN_RESET);
 800034c:	2200      	movs	r2, #0
 800034e:	2108      	movs	r1, #8
 8000350:	4815      	ldr	r0, [pc, #84]	; (80003a8 <displayClock+0xe0>)
 8000352:	f001 fa78 	bl	8001846 <HAL_GPIO_WritePin>
			break;
 8000356:	e011      	b.n	800037c <displayClock+0xb4>
		case 1:
			GPIOB->ODR = arr[led_buffer[3]];
 8000358:	4b10      	ldr	r3, [pc, #64]	; (800039c <displayClock+0xd4>)
 800035a:	68db      	ldr	r3, [r3, #12]
 800035c:	4a10      	ldr	r2, [pc, #64]	; (80003a0 <displayClock+0xd8>)
 800035e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000362:	4b10      	ldr	r3, [pc, #64]	; (80003a4 <displayClock+0xdc>)
 8000364:	60da      	str	r2, [r3, #12]
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, GPIO_PIN_SET);
 8000366:	2201      	movs	r2, #1
 8000368:	2108      	movs	r1, #8
 800036a:	480f      	ldr	r0, [pc, #60]	; (80003a8 <displayClock+0xe0>)
 800036c:	f001 fa6b 	bl	8001846 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, GPIO_PIN_RESET);
 8000370:	2200      	movs	r2, #0
 8000372:	2110      	movs	r1, #16
 8000374:	480c      	ldr	r0, [pc, #48]	; (80003a8 <displayClock+0xe0>)
 8000376:	f001 fa66 	bl	8001846 <HAL_GPIO_WritePin>
			break;
 800037a:	bf00      	nop
	}
	counter_led--;
 800037c:	4b06      	ldr	r3, [pc, #24]	; (8000398 <displayClock+0xd0>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	3b01      	subs	r3, #1
 8000382:	4a05      	ldr	r2, [pc, #20]	; (8000398 <displayClock+0xd0>)
 8000384:	6013      	str	r3, [r2, #0]
	if(counter_led <= 0){
 8000386:	4b04      	ldr	r3, [pc, #16]	; (8000398 <displayClock+0xd0>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	dc02      	bgt.n	8000394 <displayClock+0xcc>
		counter_led = 4;
 800038e:	4b02      	ldr	r3, [pc, #8]	; (8000398 <displayClock+0xd0>)
 8000390:	2204      	movs	r2, #4
 8000392:	601a      	str	r2, [r3, #0]
	}
}
 8000394:	bf00      	nop
 8000396:	bd80      	pop	{r7, pc}
 8000398:	2000003c 	.word	0x2000003c
 800039c:	20000068 	.word	0x20000068
 80003a0:	20000040 	.word	0x20000040
 80003a4:	40010c00 	.word	0x40010c00
 80003a8:	40010800 	.word	0x40010800

080003ac <updateClockBuffer>:


void updateClockBuffer(int lane_1, int lane_2){
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
 80003b4:	6039      	str	r1, [r7, #0]
	led_buffer[0] = lane_1 / 10;
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4a19      	ldr	r2, [pc, #100]	; (8000420 <updateClockBuffer+0x74>)
 80003ba:	fb82 1203 	smull	r1, r2, r2, r3
 80003be:	1092      	asrs	r2, r2, #2
 80003c0:	17db      	asrs	r3, r3, #31
 80003c2:	1ad3      	subs	r3, r2, r3
 80003c4:	4a17      	ldr	r2, [pc, #92]	; (8000424 <updateClockBuffer+0x78>)
 80003c6:	6013      	str	r3, [r2, #0]
	led_buffer[1] = lane_1 % 10;
 80003c8:	6879      	ldr	r1, [r7, #4]
 80003ca:	4b15      	ldr	r3, [pc, #84]	; (8000420 <updateClockBuffer+0x74>)
 80003cc:	fb83 2301 	smull	r2, r3, r3, r1
 80003d0:	109a      	asrs	r2, r3, #2
 80003d2:	17cb      	asrs	r3, r1, #31
 80003d4:	1ad2      	subs	r2, r2, r3
 80003d6:	4613      	mov	r3, r2
 80003d8:	009b      	lsls	r3, r3, #2
 80003da:	4413      	add	r3, r2
 80003dc:	005b      	lsls	r3, r3, #1
 80003de:	1aca      	subs	r2, r1, r3
 80003e0:	4b10      	ldr	r3, [pc, #64]	; (8000424 <updateClockBuffer+0x78>)
 80003e2:	605a      	str	r2, [r3, #4]
	led_buffer[2] = lane_2 / 10;
 80003e4:	683b      	ldr	r3, [r7, #0]
 80003e6:	4a0e      	ldr	r2, [pc, #56]	; (8000420 <updateClockBuffer+0x74>)
 80003e8:	fb82 1203 	smull	r1, r2, r2, r3
 80003ec:	1092      	asrs	r2, r2, #2
 80003ee:	17db      	asrs	r3, r3, #31
 80003f0:	1ad3      	subs	r3, r2, r3
 80003f2:	4a0c      	ldr	r2, [pc, #48]	; (8000424 <updateClockBuffer+0x78>)
 80003f4:	6093      	str	r3, [r2, #8]
	led_buffer[3] = lane_2 % 10;
 80003f6:	6839      	ldr	r1, [r7, #0]
 80003f8:	4b09      	ldr	r3, [pc, #36]	; (8000420 <updateClockBuffer+0x74>)
 80003fa:	fb83 2301 	smull	r2, r3, r3, r1
 80003fe:	109a      	asrs	r2, r3, #2
 8000400:	17cb      	asrs	r3, r1, #31
 8000402:	1ad2      	subs	r2, r2, r3
 8000404:	4613      	mov	r3, r2
 8000406:	009b      	lsls	r3, r3, #2
 8000408:	4413      	add	r3, r2
 800040a:	005b      	lsls	r3, r3, #1
 800040c:	1aca      	subs	r2, r1, r3
 800040e:	4b05      	ldr	r3, [pc, #20]	; (8000424 <updateClockBuffer+0x78>)
 8000410:	60da      	str	r2, [r3, #12]
	displayClock();
 8000412:	f7ff ff59 	bl	80002c8 <displayClock>
}
 8000416:	bf00      	nop
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	66666667 	.word	0x66666667
 8000424:	20000068 	.word	0x20000068

08000428 <clearAll>:


void clearAll(){
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
//	GPIOB->ODR = 0xFFFF;
	HAL_GPIO_WritePin(GPIOA, EN0_Pin, GPIO_PIN_SET);
 800042c:	2201      	movs	r2, #1
 800042e:	2102      	movs	r1, #2
 8000430:	481b      	ldr	r0, [pc, #108]	; (80004a0 <clearAll+0x78>)
 8000432:	f001 fa08 	bl	8001846 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, EN1_Pin, GPIO_PIN_SET);
 8000436:	2201      	movs	r2, #1
 8000438:	2104      	movs	r1, #4
 800043a:	4819      	ldr	r0, [pc, #100]	; (80004a0 <clearAll+0x78>)
 800043c:	f001 fa03 	bl	8001846 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, EN2_Pin, GPIO_PIN_SET);
 8000440:	2201      	movs	r2, #1
 8000442:	2108      	movs	r1, #8
 8000444:	4816      	ldr	r0, [pc, #88]	; (80004a0 <clearAll+0x78>)
 8000446:	f001 f9fe 	bl	8001846 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, EN3_Pin, GPIO_PIN_SET);
 800044a:	2201      	movs	r2, #1
 800044c:	2110      	movs	r1, #16
 800044e:	4814      	ldr	r0, [pc, #80]	; (80004a0 <clearAll+0x78>)
 8000450:	f001 f9f9 	bl	8001846 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin, GPIO_PIN_SET);
 8000454:	2201      	movs	r2, #1
 8000456:	2120      	movs	r1, #32
 8000458:	4811      	ldr	r0, [pc, #68]	; (80004a0 <clearAll+0x78>)
 800045a:	f001 f9f4 	bl	8001846 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_AMBER1_Pin, GPIO_PIN_SET);
 800045e:	2201      	movs	r2, #1
 8000460:	2140      	movs	r1, #64	; 0x40
 8000462:	480f      	ldr	r0, [pc, #60]	; (80004a0 <clearAll+0x78>)
 8000464:	f001 f9ef 	bl	8001846 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin, GPIO_PIN_SET);
 8000468:	2201      	movs	r2, #1
 800046a:	2180      	movs	r1, #128	; 0x80
 800046c:	480c      	ldr	r0, [pc, #48]	; (80004a0 <clearAll+0x78>)
 800046e:	f001 f9ea 	bl	8001846 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_RED2_Pin, GPIO_PIN_SET);
 8000472:	2201      	movs	r2, #1
 8000474:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000478:	4809      	ldr	r0, [pc, #36]	; (80004a0 <clearAll+0x78>)
 800047a:	f001 f9e4 	bl	8001846 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_AMBER2_Pin, GPIO_PIN_SET);
 800047e:	2201      	movs	r2, #1
 8000480:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000484:	4806      	ldr	r0, [pc, #24]	; (80004a0 <clearAll+0x78>)
 8000486:	f001 f9de 	bl	8001846 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_GREEN2_Pin, GPIO_PIN_SET);
 800048a:	2201      	movs	r2, #1
 800048c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000490:	4803      	ldr	r0, [pc, #12]	; (80004a0 <clearAll+0x78>)
 8000492:	f001 f9d8 	bl	8001846 <HAL_GPIO_WritePin>
	counter_led = 4;
 8000496:	4b03      	ldr	r3, [pc, #12]	; (80004a4 <clearAll+0x7c>)
 8000498:	2204      	movs	r2, #4
 800049a:	601a      	str	r2, [r3, #0]
}
 800049c:	bf00      	nop
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40010800 	.word	0x40010800
 80004a4:	2000003c 	.word	0x2000003c

080004a8 <fsm_automatic_run_traffic>:


#include"fsm_automatic.h"


void fsm_automatic_run_traffic(){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	fsm_automatic_traffic_light();
 80004ac:	f000 fd58 	bl	8000f60 <fsm_automatic_traffic_light>
}
 80004b0:	bf00      	nop
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <fsm_automatic_run_time>:


void fsm_automatic_run_time(){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
	updateLed();
 80004b8:	f000 fe72 	bl	80011a0 <updateLed>
}
 80004bc:	bf00      	nop
 80004be:	bd80      	pop	{r7, pc}

080004c0 <fsm_manual_run>:
 *      Author: vinhn
 */

#include"fsm_manual.h"

void fsm_manual_run(){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	switch(status0){
 80004c4:	4ba1      	ldr	r3, [pc, #644]	; (800074c <fsm_manual_run+0x28c>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2b0e      	cmp	r3, #14
 80004ca:	f200 8131 	bhi.w	8000730 <fsm_manual_run+0x270>
 80004ce:	a201      	add	r2, pc, #4	; (adr r2, 80004d4 <fsm_manual_run+0x14>)
 80004d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004d4:	08000511 	.word	0x08000511
 80004d8:	08000731 	.word	0x08000731
 80004dc:	08000731 	.word	0x08000731
 80004e0:	08000731 	.word	0x08000731
 80004e4:	08000731 	.word	0x08000731
 80004e8:	08000731 	.word	0x08000731
 80004ec:	08000731 	.word	0x08000731
 80004f0:	08000731 	.word	0x08000731
 80004f4:	08000731 	.word	0x08000731
 80004f8:	08000731 	.word	0x08000731
 80004fc:	08000731 	.word	0x08000731
 8000500:	08000553 	.word	0x08000553
 8000504:	0800058f 	.word	0x0800058f
 8000508:	08000629 	.word	0x08000629
 800050c:	080006bd 	.word	0x080006bd
		case INIT_BUTTON:
			clearAll();
 8000510:	f7ff ff8a 	bl	8000428 <clearAll>
			if(isButton1Pressed(0) == 1){
 8000514:	2000      	movs	r0, #0
 8000516:	f7ff fe19 	bl	800014c <isButton1Pressed>
 800051a:	4603      	mov	r3, r0
 800051c:	2b01      	cmp	r3, #1
 800051e:	f040 8109 	bne.w	8000734 <fsm_manual_run+0x274>
				status0 = MODE1;
 8000522:	4b8a      	ldr	r3, [pc, #552]	; (800074c <fsm_manual_run+0x28c>)
 8000524:	220b      	movs	r2, #11
 8000526:	601a      	str	r2, [r3, #0]
				status1 = INIT_LED;
 8000528:	4b89      	ldr	r3, [pc, #548]	; (8000750 <fsm_manual_run+0x290>)
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
				status2 = INIT_LED;
 800052e:	4b89      	ldr	r3, [pc, #548]	; (8000754 <fsm_manual_run+0x294>)
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
				clearAll();
 8000534:	f7ff ff78 	bl	8000428 <clearAll>
				SCH_Init();
 8000538:	f000 fa41 	bl	80009be <SCH_Init>
				SCH_Add_Task(fsm_automatic_run_traffic, 0, 100);
 800053c:	2264      	movs	r2, #100	; 0x64
 800053e:	2100      	movs	r1, #0
 8000540:	4885      	ldr	r0, [pc, #532]	; (8000758 <fsm_manual_run+0x298>)
 8000542:	f000 fac1 	bl	8000ac8 <SCH_Add_Task>
				SCH_Add_Task(fsm_automatic_run_time, 0, 25);
 8000546:	2219      	movs	r2, #25
 8000548:	2100      	movs	r1, #0
 800054a:	4884      	ldr	r0, [pc, #528]	; (800075c <fsm_manual_run+0x29c>)
 800054c:	f000 fabc 	bl	8000ac8 <SCH_Add_Task>
			}

			break;
 8000550:	e0f0      	b.n	8000734 <fsm_manual_run+0x274>
		case MODE1:
			if(isButton1Pressed(0) == 1){
 8000552:	2000      	movs	r0, #0
 8000554:	f7ff fdfa 	bl	800014c <isButton1Pressed>
 8000558:	4603      	mov	r3, r0
 800055a:	2b01      	cmp	r3, #1
 800055c:	f040 80ec 	bne.w	8000738 <fsm_manual_run+0x278>
				time_mid = 1;
 8000560:	4b7f      	ldr	r3, [pc, #508]	; (8000760 <fsm_manual_run+0x2a0>)
 8000562:	2201      	movs	r2, #1
 8000564:	601a      	str	r2, [r3, #0]
				status0 = MODE2;
 8000566:	4b79      	ldr	r3, [pc, #484]	; (800074c <fsm_manual_run+0x28c>)
 8000568:	220c      	movs	r2, #12
 800056a:	601a      	str	r2, [r3, #0]
				clearAll();
 800056c:	f7ff ff5c 	bl	8000428 <clearAll>
				SCH_Init();
 8000570:	f000 fa25 	bl	80009be <SCH_Init>
				SCH_Add_Task(fsm_automatic_run_time, 0, 25);
 8000574:	2219      	movs	r2, #25
 8000576:	2100      	movs	r1, #0
 8000578:	4878      	ldr	r0, [pc, #480]	; (800075c <fsm_manual_run+0x29c>)
 800057a:	f000 faa5 	bl	8000ac8 <SCH_Add_Task>
				counter_1 = MODE2 % 10;
 800057e:	4b79      	ldr	r3, [pc, #484]	; (8000764 <fsm_manual_run+0x2a4>)
 8000580:	2202      	movs	r2, #2
 8000582:	601a      	str	r2, [r3, #0]
				counter_2 = time_mid;
 8000584:	4b76      	ldr	r3, [pc, #472]	; (8000760 <fsm_manual_run+0x2a0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a77      	ldr	r2, [pc, #476]	; (8000768 <fsm_manual_run+0x2a8>)
 800058a:	6013      	str	r3, [r2, #0]
			}

			break;
 800058c:	e0d4      	b.n	8000738 <fsm_manual_run+0x278>
		case MODE2:
			traffic_light1(AUTO_RED1);
 800058e:	2001      	movs	r0, #1
 8000590:	f000 fc1e 	bl	8000dd0 <traffic_light1>
			traffic_light2(AUTO_RED2);
 8000594:	2005      	movs	r0, #5
 8000596:	f000 fc75 	bl	8000e84 <traffic_light2>
			counter_2 = time_mid;
 800059a:	4b71      	ldr	r3, [pc, #452]	; (8000760 <fsm_manual_run+0x2a0>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a72      	ldr	r2, [pc, #456]	; (8000768 <fsm_manual_run+0x2a8>)
 80005a0:	6013      	str	r3, [r2, #0]
			if(isButton1Pressed(0) == 1){
 80005a2:	2000      	movs	r0, #0
 80005a4:	f7ff fdd2 	bl	800014c <isButton1Pressed>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d115      	bne.n	80005da <fsm_manual_run+0x11a>
				time_mid = 1;
 80005ae:	4b6c      	ldr	r3, [pc, #432]	; (8000760 <fsm_manual_run+0x2a0>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	601a      	str	r2, [r3, #0]
				status0 = MODE3;
 80005b4:	4b65      	ldr	r3, [pc, #404]	; (800074c <fsm_manual_run+0x28c>)
 80005b6:	220d      	movs	r2, #13
 80005b8:	601a      	str	r2, [r3, #0]
				clearAll();
 80005ba:	f7ff ff35 	bl	8000428 <clearAll>
				SCH_Init();
 80005be:	f000 f9fe 	bl	80009be <SCH_Init>
				SCH_Add_Task(fsm_automatic_run_time, 0, 25);
 80005c2:	2219      	movs	r2, #25
 80005c4:	2100      	movs	r1, #0
 80005c6:	4865      	ldr	r0, [pc, #404]	; (800075c <fsm_manual_run+0x29c>)
 80005c8:	f000 fa7e 	bl	8000ac8 <SCH_Add_Task>
				counter_1 = MODE3 % 10;
 80005cc:	4b65      	ldr	r3, [pc, #404]	; (8000764 <fsm_manual_run+0x2a4>)
 80005ce:	2203      	movs	r2, #3
 80005d0:	601a      	str	r2, [r3, #0]
				counter_2 = time_mid;
 80005d2:	4b63      	ldr	r3, [pc, #396]	; (8000760 <fsm_manual_run+0x2a0>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a64      	ldr	r2, [pc, #400]	; (8000768 <fsm_manual_run+0x2a8>)
 80005d8:	6013      	str	r3, [r2, #0]
			}

			//increase time value of red led
			if(isButton1Pressed(1) == 1){
 80005da:	2001      	movs	r0, #1
 80005dc:	f7ff fdb6 	bl	800014c <isButton1Pressed>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d10b      	bne.n	80005fe <fsm_manual_run+0x13e>
				time_mid = time_mid + 1;
 80005e6:	4b5e      	ldr	r3, [pc, #376]	; (8000760 <fsm_manual_run+0x2a0>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	3301      	adds	r3, #1
 80005ec:	4a5c      	ldr	r2, [pc, #368]	; (8000760 <fsm_manual_run+0x2a0>)
 80005ee:	6013      	str	r3, [r2, #0]
				if( time_mid >= 100 ){
 80005f0:	4b5b      	ldr	r3, [pc, #364]	; (8000760 <fsm_manual_run+0x2a0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b63      	cmp	r3, #99	; 0x63
 80005f6:	dd02      	ble.n	80005fe <fsm_manual_run+0x13e>
					time_mid = 1;
 80005f8:	4b59      	ldr	r3, [pc, #356]	; (8000760 <fsm_manual_run+0x2a0>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	601a      	str	r2, [r3, #0]
				}
			}

			//confirm time value of red led
			if(isButton1Pressed(2) == 1){
 80005fe:	2002      	movs	r0, #2
 8000600:	f7ff fda4 	bl	800014c <isButton1Pressed>
 8000604:	4603      	mov	r3, r0
 8000606:	2b01      	cmp	r3, #1
 8000608:	f040 8098 	bne.w	800073c <fsm_manual_run+0x27c>
				TIME_RED = time_mid * 1000;
 800060c:	4b54      	ldr	r3, [pc, #336]	; (8000760 <fsm_manual_run+0x2a0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000614:	fb02 f303 	mul.w	r3, r2, r3
 8000618:	4a54      	ldr	r2, [pc, #336]	; (800076c <fsm_manual_run+0x2ac>)
 800061a:	6013      	str	r3, [r2, #0]
				time_mid = 1;
 800061c:	4b50      	ldr	r3, [pc, #320]	; (8000760 <fsm_manual_run+0x2a0>)
 800061e:	2201      	movs	r2, #1
 8000620:	601a      	str	r2, [r3, #0]
				clearAll();
 8000622:	f7ff ff01 	bl	8000428 <clearAll>
			}
			break;
 8000626:	e089      	b.n	800073c <fsm_manual_run+0x27c>
		case MODE3:
			traffic_light1(AUTO_AMBER1);
 8000628:	2003      	movs	r0, #3
 800062a:	f000 fbd1 	bl	8000dd0 <traffic_light1>
			traffic_light2(AUTO_AMBER2);
 800062e:	2007      	movs	r0, #7
 8000630:	f000 fc28 	bl	8000e84 <traffic_light2>
			counter_2 = time_mid;
 8000634:	4b4a      	ldr	r3, [pc, #296]	; (8000760 <fsm_manual_run+0x2a0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a4b      	ldr	r2, [pc, #300]	; (8000768 <fsm_manual_run+0x2a8>)
 800063a:	6013      	str	r3, [r2, #0]
			if(isButton1Pressed(0) == 1){
 800063c:	2000      	movs	r0, #0
 800063e:	f7ff fd85 	bl	800014c <isButton1Pressed>
 8000642:	4603      	mov	r3, r0
 8000644:	2b01      	cmp	r3, #1
 8000646:	d115      	bne.n	8000674 <fsm_manual_run+0x1b4>
				time_mid = 1;
 8000648:	4b45      	ldr	r3, [pc, #276]	; (8000760 <fsm_manual_run+0x2a0>)
 800064a:	2201      	movs	r2, #1
 800064c:	601a      	str	r2, [r3, #0]
				status0 = MODE4;
 800064e:	4b3f      	ldr	r3, [pc, #252]	; (800074c <fsm_manual_run+0x28c>)
 8000650:	220e      	movs	r2, #14
 8000652:	601a      	str	r2, [r3, #0]
				clearAll();
 8000654:	f7ff fee8 	bl	8000428 <clearAll>
				SCH_Init();
 8000658:	f000 f9b1 	bl	80009be <SCH_Init>
				SCH_Add_Task(fsm_automatic_run_time, 0, 25);
 800065c:	2219      	movs	r2, #25
 800065e:	2100      	movs	r1, #0
 8000660:	483e      	ldr	r0, [pc, #248]	; (800075c <fsm_manual_run+0x29c>)
 8000662:	f000 fa31 	bl	8000ac8 <SCH_Add_Task>
				counter_1 = MODE4 % 10;
 8000666:	4b3f      	ldr	r3, [pc, #252]	; (8000764 <fsm_manual_run+0x2a4>)
 8000668:	2204      	movs	r2, #4
 800066a:	601a      	str	r2, [r3, #0]
				counter_2 = time_mid;
 800066c:	4b3c      	ldr	r3, [pc, #240]	; (8000760 <fsm_manual_run+0x2a0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a3d      	ldr	r2, [pc, #244]	; (8000768 <fsm_manual_run+0x2a8>)
 8000672:	6013      	str	r3, [r2, #0]
			}

			//increase time value of amber led
			if(isButton1Pressed(1) == 1){
 8000674:	2001      	movs	r0, #1
 8000676:	f7ff fd69 	bl	800014c <isButton1Pressed>
 800067a:	4603      	mov	r3, r0
 800067c:	2b01      	cmp	r3, #1
 800067e:	d10b      	bne.n	8000698 <fsm_manual_run+0x1d8>
				time_mid = time_mid + 1;
 8000680:	4b37      	ldr	r3, [pc, #220]	; (8000760 <fsm_manual_run+0x2a0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	3301      	adds	r3, #1
 8000686:	4a36      	ldr	r2, [pc, #216]	; (8000760 <fsm_manual_run+0x2a0>)
 8000688:	6013      	str	r3, [r2, #0]
				if( time_mid >= 100 ){
 800068a:	4b35      	ldr	r3, [pc, #212]	; (8000760 <fsm_manual_run+0x2a0>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b63      	cmp	r3, #99	; 0x63
 8000690:	dd02      	ble.n	8000698 <fsm_manual_run+0x1d8>
					time_mid = 1;
 8000692:	4b33      	ldr	r3, [pc, #204]	; (8000760 <fsm_manual_run+0x2a0>)
 8000694:	2201      	movs	r2, #1
 8000696:	601a      	str	r2, [r3, #0]
				}
			}

			//confirm time value of amber led
			if(isButton1Pressed(2) == 1){
 8000698:	2002      	movs	r0, #2
 800069a:	f7ff fd57 	bl	800014c <isButton1Pressed>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d14d      	bne.n	8000740 <fsm_manual_run+0x280>
				TIME_YELLOW = time_mid * 1000;
 80006a4:	4b2e      	ldr	r3, [pc, #184]	; (8000760 <fsm_manual_run+0x2a0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006ac:	fb02 f303 	mul.w	r3, r2, r3
 80006b0:	4a2f      	ldr	r2, [pc, #188]	; (8000770 <fsm_manual_run+0x2b0>)
 80006b2:	6013      	str	r3, [r2, #0]
				time_mid = 1;
 80006b4:	4b2a      	ldr	r3, [pc, #168]	; (8000760 <fsm_manual_run+0x2a0>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
			}
			break;
 80006ba:	e041      	b.n	8000740 <fsm_manual_run+0x280>
		case MODE4:
			traffic_light1(AUTO_GREEN1);
 80006bc:	2002      	movs	r0, #2
 80006be:	f000 fb87 	bl	8000dd0 <traffic_light1>
			traffic_light2(AUTO_GREEN2);
 80006c2:	2006      	movs	r0, #6
 80006c4:	f000 fbde 	bl	8000e84 <traffic_light2>
			counter_2 = time_mid;
 80006c8:	4b25      	ldr	r3, [pc, #148]	; (8000760 <fsm_manual_run+0x2a0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a26      	ldr	r2, [pc, #152]	; (8000768 <fsm_manual_run+0x2a8>)
 80006ce:	6013      	str	r3, [r2, #0]
			if(isButton1Pressed(0) == 1){
 80006d0:	2000      	movs	r0, #0
 80006d2:	f7ff fd3b 	bl	800014c <isButton1Pressed>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d105      	bne.n	80006e8 <fsm_manual_run+0x228>
				time_mid = 1;
 80006dc:	4b20      	ldr	r3, [pc, #128]	; (8000760 <fsm_manual_run+0x2a0>)
 80006de:	2201      	movs	r2, #1
 80006e0:	601a      	str	r2, [r3, #0]
				status0 = INIT_BUTTON;
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <fsm_manual_run+0x28c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
			}

			//increase time value of green led
			if(isButton1Pressed(1) == 1){
 80006e8:	2001      	movs	r0, #1
 80006ea:	f7ff fd2f 	bl	800014c <isButton1Pressed>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d10b      	bne.n	800070c <fsm_manual_run+0x24c>
				time_mid = time_mid + 1;
 80006f4:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <fsm_manual_run+0x2a0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	3301      	adds	r3, #1
 80006fa:	4a19      	ldr	r2, [pc, #100]	; (8000760 <fsm_manual_run+0x2a0>)
 80006fc:	6013      	str	r3, [r2, #0]
				if( time_mid >= 100 ){
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <fsm_manual_run+0x2a0>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	2b63      	cmp	r3, #99	; 0x63
 8000704:	dd02      	ble.n	800070c <fsm_manual_run+0x24c>
					time_mid = 1;
 8000706:	4b16      	ldr	r3, [pc, #88]	; (8000760 <fsm_manual_run+0x2a0>)
 8000708:	2201      	movs	r2, #1
 800070a:	601a      	str	r2, [r3, #0]
				}
			}

			//confirm time value of green led
			if(isButton1Pressed(2) == 1){
 800070c:	2002      	movs	r0, #2
 800070e:	f7ff fd1d 	bl	800014c <isButton1Pressed>
 8000712:	4603      	mov	r3, r0
 8000714:	2b01      	cmp	r3, #1
 8000716:	d115      	bne.n	8000744 <fsm_manual_run+0x284>
				TIME_GREEN = time_mid * 1000;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <fsm_manual_run+0x2a0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000720:	fb02 f303 	mul.w	r3, r2, r3
 8000724:	4a13      	ldr	r2, [pc, #76]	; (8000774 <fsm_manual_run+0x2b4>)
 8000726:	6013      	str	r3, [r2, #0]
				time_mid = 1;
 8000728:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <fsm_manual_run+0x2a0>)
 800072a:	2201      	movs	r2, #1
 800072c:	601a      	str	r2, [r3, #0]
			}
			break;
 800072e:	e009      	b.n	8000744 <fsm_manual_run+0x284>
		default:
			break;
 8000730:	bf00      	nop
 8000732:	e008      	b.n	8000746 <fsm_manual_run+0x286>
			break;
 8000734:	bf00      	nop
 8000736:	e006      	b.n	8000746 <fsm_manual_run+0x286>
			break;
 8000738:	bf00      	nop
 800073a:	e004      	b.n	8000746 <fsm_manual_run+0x286>
			break;
 800073c:	bf00      	nop
 800073e:	e002      	b.n	8000746 <fsm_manual_run+0x286>
			break;
 8000740:	bf00      	nop
 8000742:	e000      	b.n	8000746 <fsm_manual_run+0x286>
			break;
 8000744:	bf00      	nop
	}
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200000c8 	.word	0x200000c8
 8000750:	200000cc 	.word	0x200000cc
 8000754:	200000d0 	.word	0x200000d0
 8000758:	080004a9 	.word	0x080004a9
 800075c:	080004b5 	.word	0x080004b5
 8000760:	200000d4 	.word	0x200000d4
 8000764:	200000c0 	.word	0x200000c0
 8000768:	200000c4 	.word	0x200000c4
 800076c:	20000080 	.word	0x20000080
 8000770:	20000084 	.word	0x20000084
 8000774:	20000088 	.word	0x20000088

08000778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077c:	f000 fd46 	bl	800120c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000780:	f000 f820 	bl	80007c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000784:	f000 f8a6 	bl	80008d4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000788:	f000 f858 	bl	800083c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800078c:	480a      	ldr	r0, [pc, #40]	; (80007b8 <main+0x40>)
 800078e:	f001 fcdf 	bl	8002150 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status0 = INIT_BUTTON;
 8000792:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <main+0x44>)
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]

  SCH_Init();
 8000798:	f000 f911 	bl	80009be <SCH_Init>

  SCH_Add_Task(task4, 300, 0);
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80007a2:	4807      	ldr	r0, [pc, #28]	; (80007c0 <main+0x48>)
 80007a4:	f000 f990 	bl	8000ac8 <SCH_Add_Task>
  SCH_Delete_Task(1);
 80007a8:	2001      	movs	r0, #1
 80007aa:	f000 fa31 	bl	8000c10 <SCH_Delete_Task>

  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Tasks();
 80007ae:	f000 f9e3 	bl	8000b78 <SCH_Dispatch_Tasks>
	  fsm_manual_run();
 80007b2:	f7ff fe85 	bl	80004c0 <fsm_manual_run>
	  SCH_Dispatch_Tasks();
 80007b6:	e7fa      	b.n	80007ae <main+0x36>
 80007b8:	200000d8 	.word	0x200000d8
 80007bc:	200000c8 	.word	0x200000c8
 80007c0:	08000db9 	.word	0x08000db9

080007c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b090      	sub	sp, #64	; 0x40
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 0318 	add.w	r3, r7, #24
 80007ce:	2228      	movs	r2, #40	; 0x28
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f002 f874 	bl	80028c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e6:	2302      	movs	r3, #2
 80007e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ea:	2301      	movs	r3, #1
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ee:	2310      	movs	r3, #16
 80007f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f6:	f107 0318 	add.w	r3, r7, #24
 80007fa:	4618      	mov	r0, r3
 80007fc:	f001 f870 	bl	80018e0 <HAL_RCC_OscConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000806:	f000 f8d5 	bl	80009b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080a:	230f      	movs	r3, #15
 800080c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f001 fadc 	bl	8001de0 <HAL_RCC_ClockConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800082e:	f000 f8c1 	bl	80009b4 <Error_Handler>
  }
}
 8000832:	bf00      	nop
 8000834:	3740      	adds	r7, #64	; 0x40
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000842:	f107 0308 	add.w	r3, r7, #8
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000850:	463b      	mov	r3, r7
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000858:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <MX_TIM2_Init+0x94>)
 800085a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800085e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <MX_TIM2_Init+0x94>)
 8000862:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000866:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000868:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <MX_TIM2_Init+0x94>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800086e:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <MX_TIM2_Init+0x94>)
 8000870:	2209      	movs	r2, #9
 8000872:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000874:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <MX_TIM2_Init+0x94>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087a:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <MX_TIM2_Init+0x94>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000880:	4813      	ldr	r0, [pc, #76]	; (80008d0 <MX_TIM2_Init+0x94>)
 8000882:	f001 fc15 	bl	80020b0 <HAL_TIM_Base_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800088c:	f000 f892 	bl	80009b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000894:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000896:	f107 0308 	add.w	r3, r7, #8
 800089a:	4619      	mov	r1, r3
 800089c:	480c      	ldr	r0, [pc, #48]	; (80008d0 <MX_TIM2_Init+0x94>)
 800089e:	f001 fdab 	bl	80023f8 <HAL_TIM_ConfigClockSource>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008a8:	f000 f884 	bl	80009b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ac:	2300      	movs	r3, #0
 80008ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008b4:	463b      	mov	r3, r7
 80008b6:	4619      	mov	r1, r3
 80008b8:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_TIM2_Init+0x94>)
 80008ba:	f001 ff73 	bl	80027a4 <HAL_TIMEx_MasterConfigSynchronization>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008c4:	f000 f876 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	3718      	adds	r7, #24
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	200000d8 	.word	0x200000d8

080008d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	f107 0308 	add.w	r3, r7, #8
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e8:	4b29      	ldr	r3, [pc, #164]	; (8000990 <MX_GPIO_Init+0xbc>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a28      	ldr	r2, [pc, #160]	; (8000990 <MX_GPIO_Init+0xbc>)
 80008ee:	f043 0304 	orr.w	r3, r3, #4
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b26      	ldr	r3, [pc, #152]	; (8000990 <MX_GPIO_Init+0xbc>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f003 0304 	and.w	r3, r3, #4
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000900:	4b23      	ldr	r3, [pc, #140]	; (8000990 <MX_GPIO_Init+0xbc>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	4a22      	ldr	r2, [pc, #136]	; (8000990 <MX_GPIO_Init+0xbc>)
 8000906:	f043 0308 	orr.w	r3, r3, #8
 800090a:	6193      	str	r3, [r2, #24]
 800090c:	4b20      	ldr	r3, [pc, #128]	; (8000990 <MX_GPIO_Init+0xbc>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	f003 0308 	and.w	r3, r3, #8
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000918:	2200      	movs	r2, #0
 800091a:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800091e:	481d      	ldr	r0, [pc, #116]	; (8000994 <MX_GPIO_Init+0xc0>)
 8000920:	f000 ff91 	bl	8001846 <HAL_GPIO_WritePin>
                          |LED_RED1_Pin|LED_AMBER1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
                          |LED_AMBER2_Pin|LED_GREEN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8000924:	2200      	movs	r2, #0
 8000926:	f240 217f 	movw	r1, #639	; 0x27f
 800092a:	481b      	ldr	r0, [pc, #108]	; (8000998 <MX_GPIO_Init+0xc4>)
 800092c:	f000 ff8b 	bl	8001846 <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|LED_TEST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           LED_RED1_Pin LED_AMBER1_Pin LED_GREEN1_Pin LED_RED2_Pin
                           LED_AMBER2_Pin LED_GREEN2_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000930:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8000934:	60bb      	str	r3, [r7, #8]
                          |LED_RED1_Pin|LED_AMBER1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
                          |LED_AMBER2_Pin|LED_GREEN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2302      	movs	r3, #2
 8000940:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	f107 0308 	add.w	r3, r7, #8
 8000946:	4619      	mov	r1, r3
 8000948:	4812      	ldr	r0, [pc, #72]	; (8000994 <MX_GPIO_Init+0xc0>)
 800094a:	f000 fdeb 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin LED_TEST_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 800094e:	f240 237f 	movw	r3, #639	; 0x27f
 8000952:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|LED_TEST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	2301      	movs	r3, #1
 8000956:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2302      	movs	r3, #2
 800095e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000960:	f107 0308 	add.w	r3, r7, #8
 8000964:	4619      	mov	r1, r3
 8000966:	480c      	ldr	r0, [pc, #48]	; (8000998 <MX_GPIO_Init+0xc4>)
 8000968:	f000 fddc 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 800096c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000970:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000976:	2301      	movs	r3, #1
 8000978:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097a:	f107 0308 	add.w	r3, r7, #8
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_GPIO_Init+0xc4>)
 8000982:	f000 fdcf 	bl	8001524 <HAL_GPIO_Init>

}
 8000986:	bf00      	nop
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000
 8000994:	40010800 	.word	0x40010800
 8000998:	40010c00 	.word	0x40010c00

0800099c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	SCH_Update();
 80009a4:	f000 f820 	bl	80009e8 <SCH_Update>
	getKeyInput();
 80009a8:	f7ff fbfe 	bl	80001a8 <getKeyInput>
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
}
 80009ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009bc:	e7fe      	b.n	80009bc <Error_Handler+0x8>

080009be <SCH_Init>:
#include <stdio.h>

sTask SCH_tasks_G[SCH_MAX_TASKS];


void SCH_Init(void){
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
	unsigned char task_index;
	for (task_index = 0; task_index < SCH_MAX_TASKS; task_index++){
 80009c4:	2300      	movs	r3, #0
 80009c6:	71fb      	strb	r3, [r7, #7]
 80009c8:	e006      	b.n	80009d8 <SCH_Init+0x1a>
		SCH_Delete_Task(task_index);
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 f91f 	bl	8000c10 <SCH_Delete_Task>
	for (task_index = 0; task_index < SCH_MAX_TASKS; task_index++){
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	3301      	adds	r3, #1
 80009d6:	71fb      	strb	r3, [r7, #7]
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	2b04      	cmp	r3, #4
 80009dc:	d9f5      	bls.n	80009ca <SCH_Init+0xc>
	}
}
 80009de:	bf00      	nop
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <SCH_Update>:

void SCH_Update(void){
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
	unsigned char task_index;
	for (task_index = 0; task_index < SCH_MAX_TASKS; task_index++){
 80009ee:	2300      	movs	r3, #0
 80009f0:	71fb      	strb	r3, [r7, #7]
 80009f2:	e05d      	b.n	8000ab0 <SCH_Update+0xc8>
		if (SCH_tasks_G[task_index].pTask){
 80009f4:	79fa      	ldrb	r2, [r7, #7]
 80009f6:	4933      	ldr	r1, [pc, #204]	; (8000ac4 <SCH_Update+0xdc>)
 80009f8:	4613      	mov	r3, r2
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	4413      	add	r3, r2
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	440b      	add	r3, r1
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d050      	beq.n	8000aaa <SCH_Update+0xc2>
			if (SCH_tasks_G[task_index].Delay <= 0){
 8000a08:	79fa      	ldrb	r2, [r7, #7]
 8000a0a:	492e      	ldr	r1, [pc, #184]	; (8000ac4 <SCH_Update+0xdc>)
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	4413      	add	r3, r2
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	440b      	add	r3, r1
 8000a16:	3304      	adds	r3, #4
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d132      	bne.n	8000a84 <SCH_Update+0x9c>
				SCH_tasks_G[task_index].RunMe += 1; 		//flag for execute task
 8000a1e:	79fa      	ldrb	r2, [r7, #7]
 8000a20:	4928      	ldr	r1, [pc, #160]	; (8000ac4 <SCH_Update+0xdc>)
 8000a22:	4613      	mov	r3, r2
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	4413      	add	r3, r2
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	440b      	add	r3, r1
 8000a2c:	330c      	adds	r3, #12
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	79fa      	ldrb	r2, [r7, #7]
 8000a32:	3301      	adds	r3, #1
 8000a34:	b2d8      	uxtb	r0, r3
 8000a36:	4923      	ldr	r1, [pc, #140]	; (8000ac4 <SCH_Update+0xdc>)
 8000a38:	4613      	mov	r3, r2
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	4413      	add	r3, r2
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	440b      	add	r3, r1
 8000a42:	330c      	adds	r3, #12
 8000a44:	4602      	mov	r2, r0
 8000a46:	701a      	strb	r2, [r3, #0]
				if (SCH_tasks_G[task_index].Period){
 8000a48:	79fa      	ldrb	r2, [r7, #7]
 8000a4a:	491e      	ldr	r1, [pc, #120]	; (8000ac4 <SCH_Update+0xdc>)
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	4413      	add	r3, r2
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	440b      	add	r3, r1
 8000a56:	3308      	adds	r3, #8
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d025      	beq.n	8000aaa <SCH_Update+0xc2>
					SCH_tasks_G[task_index].Delay = SCH_tasks_G[task_index].Period;
 8000a5e:	79f9      	ldrb	r1, [r7, #7]
 8000a60:	79fa      	ldrb	r2, [r7, #7]
 8000a62:	4818      	ldr	r0, [pc, #96]	; (8000ac4 <SCH_Update+0xdc>)
 8000a64:	460b      	mov	r3, r1
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	440b      	add	r3, r1
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	4403      	add	r3, r0
 8000a6e:	3308      	adds	r3, #8
 8000a70:	6819      	ldr	r1, [r3, #0]
 8000a72:	4814      	ldr	r0, [pc, #80]	; (8000ac4 <SCH_Update+0xdc>)
 8000a74:	4613      	mov	r3, r2
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	4413      	add	r3, r2
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	4403      	add	r3, r0
 8000a7e:	3304      	adds	r3, #4
 8000a80:	6019      	str	r1, [r3, #0]
 8000a82:	e012      	b.n	8000aaa <SCH_Update+0xc2>
				}
			}
			else {
				SCH_tasks_G[task_index].Delay -= 1;
 8000a84:	79fa      	ldrb	r2, [r7, #7]
 8000a86:	490f      	ldr	r1, [pc, #60]	; (8000ac4 <SCH_Update+0xdc>)
 8000a88:	4613      	mov	r3, r2
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	4413      	add	r3, r2
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	440b      	add	r3, r1
 8000a92:	3304      	adds	r3, #4
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	79fa      	ldrb	r2, [r7, #7]
 8000a98:	1e59      	subs	r1, r3, #1
 8000a9a:	480a      	ldr	r0, [pc, #40]	; (8000ac4 <SCH_Update+0xdc>)
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	4413      	add	r3, r2
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	4403      	add	r3, r0
 8000aa6:	3304      	adds	r3, #4
 8000aa8:	6019      	str	r1, [r3, #0]
	for (task_index = 0; task_index < SCH_MAX_TASKS; task_index++){
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	3301      	adds	r3, #1
 8000aae:	71fb      	strb	r3, [r7, #7]
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	d99e      	bls.n	80009f4 <SCH_Update+0xc>
			}
		}
	}
}
 8000ab6:	bf00      	nop
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bc80      	pop	{r7}
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	20000120 	.word	0x20000120

08000ac8 <SCH_Add_Task>:

unsigned char SCH_Add_Task(void (*pFunction)(), unsigned int delay, unsigned int period){
 8000ac8:	b480      	push	{r7}
 8000aca:	b087      	sub	sp, #28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
	unsigned char task_index = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	75fb      	strb	r3, [r7, #23]

	while ((SCH_tasks_G[task_index].pTask != 0) && (task_index < SCH_MAX_TASKS)){
 8000ad8:	e002      	b.n	8000ae0 <SCH_Add_Task+0x18>
		task_index++;
 8000ada:	7dfb      	ldrb	r3, [r7, #23]
 8000adc:	3301      	adds	r3, #1
 8000ade:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[task_index].pTask != 0) && (task_index < SCH_MAX_TASKS)){
 8000ae0:	7dfa      	ldrb	r2, [r7, #23]
 8000ae2:	4924      	ldr	r1, [pc, #144]	; (8000b74 <SCH_Add_Task+0xac>)
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	4413      	add	r3, r2
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	440b      	add	r3, r1
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d002      	beq.n	8000afa <SCH_Add_Task+0x32>
 8000af4:	7dfb      	ldrb	r3, [r7, #23]
 8000af6:	2b04      	cmp	r3, #4
 8000af8:	d9ef      	bls.n	8000ada <SCH_Add_Task+0x12>
	}

	if (task_index == SCH_MAX_TASKS){
 8000afa:	7dfb      	ldrb	r3, [r7, #23]
 8000afc:	2b05      	cmp	r3, #5
 8000afe:	d101      	bne.n	8000b04 <SCH_Add_Task+0x3c>
		return SCH_MAX_TASKS;
 8000b00:	2305      	movs	r3, #5
 8000b02:	e031      	b.n	8000b68 <SCH_Add_Task+0xa0>
	}
	SCH_tasks_G[task_index].pTask = pFunction;
 8000b04:	7dfa      	ldrb	r2, [r7, #23]
 8000b06:	491b      	ldr	r1, [pc, #108]	; (8000b74 <SCH_Add_Task+0xac>)
 8000b08:	4613      	mov	r3, r2
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	4413      	add	r3, r2
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	440b      	add	r3, r1
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[task_index].Delay = delay;
 8000b16:	7dfa      	ldrb	r2, [r7, #23]
 8000b18:	4916      	ldr	r1, [pc, #88]	; (8000b74 <SCH_Add_Task+0xac>)
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	4413      	add	r3, r2
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	440b      	add	r3, r1
 8000b24:	3304      	adds	r3, #4
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[task_index].Period = period;
 8000b2a:	7dfa      	ldrb	r2, [r7, #23]
 8000b2c:	4911      	ldr	r1, [pc, #68]	; (8000b74 <SCH_Add_Task+0xac>)
 8000b2e:	4613      	mov	r3, r2
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	4413      	add	r3, r2
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	440b      	add	r3, r1
 8000b38:	3308      	adds	r3, #8
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[task_index].RunMe = 0;
 8000b3e:	7dfa      	ldrb	r2, [r7, #23]
 8000b40:	490c      	ldr	r1, [pc, #48]	; (8000b74 <SCH_Add_Task+0xac>)
 8000b42:	4613      	mov	r3, r2
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	4413      	add	r3, r2
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	440b      	add	r3, r1
 8000b4c:	330c      	adds	r3, #12
 8000b4e:	2200      	movs	r2, #0
 8000b50:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G[task_index].TaskID = task_index;
 8000b52:	7dfa      	ldrb	r2, [r7, #23]
 8000b54:	7df9      	ldrb	r1, [r7, #23]
 8000b56:	4807      	ldr	r0, [pc, #28]	; (8000b74 <SCH_Add_Task+0xac>)
 8000b58:	4613      	mov	r3, r2
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	4413      	add	r3, r2
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	4403      	add	r3, r0
 8000b62:	3310      	adds	r3, #16
 8000b64:	6019      	str	r1, [r3, #0]

	return task_index;
 8000b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	371c      	adds	r7, #28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000120 	.word	0x20000120

08000b78 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
	// Dispatches (runs) the next task (if there is one ready).
	for (unsigned task_index = 0; task_index < SCH_MAX_TASKS; task_index++){
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	e039      	b.n	8000bf8 <SCH_Dispatch_Tasks+0x80>
		if (SCH_tasks_G[task_index].RunMe > 0){
 8000b84:	4921      	ldr	r1, [pc, #132]	; (8000c0c <SCH_Dispatch_Tasks+0x94>)
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	4413      	add	r3, r2
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	440b      	add	r3, r1
 8000b92:	330c      	adds	r3, #12
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d02b      	beq.n	8000bf2 <SCH_Dispatch_Tasks+0x7a>
			//printf("\r\n> Execute task ID %lu with period = %lu\r\n", SCH_tasks_G[task_index].TaskID, SCH_tasks_G[task_index].Period);
			(*SCH_tasks_G[task_index].pTask)();
 8000b9a:	491c      	ldr	r1, [pc, #112]	; (8000c0c <SCH_Dispatch_Tasks+0x94>)
 8000b9c:	687a      	ldr	r2, [r7, #4]
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	4413      	add	r3, r2
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	440b      	add	r3, r1
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4798      	blx	r3
			SCH_tasks_G[task_index].RunMe -= 1; 				// Set flag for execute  = 0
 8000bac:	4917      	ldr	r1, [pc, #92]	; (8000c0c <SCH_Dispatch_Tasks+0x94>)
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	4413      	add	r3, r2
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	440b      	add	r3, r1
 8000bba:	330c      	adds	r3, #12
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	b2d8      	uxtb	r0, r3
 8000bc2:	4912      	ldr	r1, [pc, #72]	; (8000c0c <SCH_Dispatch_Tasks+0x94>)
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	4413      	add	r3, r2
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	440b      	add	r3, r1
 8000bd0:	330c      	adds	r3, #12
 8000bd2:	4602      	mov	r2, r0
 8000bd4:	701a      	strb	r2, [r3, #0]

			// ONE SHOT_TASK GET REMOVED
			if (SCH_tasks_G[task_index].Period == 0){
 8000bd6:	490d      	ldr	r1, [pc, #52]	; (8000c0c <SCH_Dispatch_Tasks+0x94>)
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	4413      	add	r3, r2
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	440b      	add	r3, r1
 8000be4:	3308      	adds	r3, #8
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d102      	bne.n	8000bf2 <SCH_Dispatch_Tasks+0x7a>
				SCH_Delete_Task(task_index);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f000 f80f 	bl	8000c10 <SCH_Delete_Task>
	for (unsigned task_index = 0; task_index < SCH_MAX_TASKS; task_index++){
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	d9c2      	bls.n	8000b84 <SCH_Dispatch_Tasks+0xc>
			}
		}
	}
	SCH_Go_To_Sleep();
 8000bfe:	f000 f841 	bl	8000c84 <SCH_Go_To_Sleep>
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000120 	.word	0x20000120

08000c10 <SCH_Delete_Task>:

unsigned char SCH_Delete_Task(uint32_t task_index){
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	unsigned char Return_code = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	73fb      	strb	r3, [r7, #15]
	if (SCH_tasks_G[task_index].pTask == 0)
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	4413      	add	r3, r2
 8000c24:	009b      	lsls	r3, r3, #2
	}
	else
	{
		// Return_code = RETURN_NORMAL;
	}
	SCH_tasks_G[task_index].pTask = 0x000;
 8000c26:	4916      	ldr	r1, [pc, #88]	; (8000c80 <SCH_Delete_Task+0x70>)
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	4413      	add	r3, r2
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	440b      	add	r3, r1
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[task_index].Delay = 0;
 8000c38:	4911      	ldr	r1, [pc, #68]	; (8000c80 <SCH_Delete_Task+0x70>)
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	4413      	add	r3, r2
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	440b      	add	r3, r1
 8000c46:	3304      	adds	r3, #4
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[task_index].Period = 0;
 8000c4c:	490c      	ldr	r1, [pc, #48]	; (8000c80 <SCH_Delete_Task+0x70>)
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	4613      	mov	r3, r2
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	4413      	add	r3, r2
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	440b      	add	r3, r1
 8000c5a:	3308      	adds	r3, #8
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[task_index].RunMe = 0;
 8000c60:	4907      	ldr	r1, [pc, #28]	; (8000c80 <SCH_Delete_Task+0x70>)
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	4613      	mov	r3, r2
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	4413      	add	r3, r2
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	440b      	add	r3, r1
 8000c6e:	330c      	adds	r3, #12
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
	return Return_code;
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	20000120 	.word	0x20000120

08000c84 <SCH_Go_To_Sleep>:

void SCH_Go_To_Sleep(void){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	HAL_SuspendTick();
 8000c88:	f000 fb22 	bl	80012d0 <HAL_SuspendTick>
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f000 fe0a 	bl	80018a8 <HAL_PWR_EnterSLEEPMode>
	HAL_ResumeTick();
 8000c94:	f000 fb2a 	bl	80012ec <HAL_ResumeTick>
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <HAL_MspInit+0x5c>)
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	4a14      	ldr	r2, [pc, #80]	; (8000cf8 <HAL_MspInit+0x5c>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6193      	str	r3, [r2, #24]
 8000cae:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_MspInit+0x5c>)
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <HAL_MspInit+0x5c>)
 8000cbc:	69db      	ldr	r3, [r3, #28]
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <HAL_MspInit+0x5c>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc4:	61d3      	str	r3, [r2, #28]
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <HAL_MspInit+0x5c>)
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <HAL_MspInit+0x60>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <HAL_MspInit+0x60>)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40010000 	.word	0x40010000

08000d00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d10:	d113      	bne.n	8000d3a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <HAL_TIM_Base_MspInit+0x44>)
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	4a0b      	ldr	r2, [pc, #44]	; (8000d44 <HAL_TIM_Base_MspInit+0x44>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	61d3      	str	r3, [r2, #28]
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <HAL_TIM_Base_MspInit+0x44>)
 8000d20:	69db      	ldr	r3, [r3, #28]
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	201c      	movs	r0, #28
 8000d30:	f000 fbc1 	bl	80014b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d34:	201c      	movs	r0, #28
 8000d36:	f000 fbda 	bl	80014ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40021000 	.word	0x40021000

08000d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <NMI_Handler+0x4>

08000d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <HardFault_Handler+0x4>

08000d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <MemManage_Handler+0x4>

08000d5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <BusFault_Handler+0x4>

08000d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <UsageFault_Handler+0x4>

08000d66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr

08000d72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr

08000d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr

08000d8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8e:	f000 fa83 	bl	8001298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <TIM2_IRQHandler+0x10>)
 8000d9e:	f001 fa23 	bl	80021e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	200000d8 	.word	0x200000d8

08000dac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr

08000db8 <task4>:
	HAL_GPIO_TogglePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin);
}
void task3(){
	HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
}
void task4(){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_TEST_GPIO_Port, LED_TEST_Pin);
 8000dbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dc0:	4802      	ldr	r0, [pc, #8]	; (8000dcc <task4+0x14>)
 8000dc2:	f000 fd58 	bl	8001876 <HAL_GPIO_TogglePin>
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40010c00 	.word	0x40010c00

08000dd0 <traffic_light1>:


#include"traffic_light.h"


void traffic_light1(int status1){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	d84a      	bhi.n	8000e74 <traffic_light1+0xa4>
 8000dde:	a201      	add	r2, pc, #4	; (adr r2, 8000de4 <traffic_light1+0x14>)
 8000de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de4:	08000df5 	.word	0x08000df5
 8000de8:	08000e15 	.word	0x08000e15
 8000dec:	08000e55 	.word	0x08000e55
 8000df0:	08000e35 	.word	0x08000e35
	switch(status1){
			case INIT_LED:
				HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2120      	movs	r1, #32
 8000df8:	4821      	ldr	r0, [pc, #132]	; (8000e80 <traffic_light1+0xb0>)
 8000dfa:	f000 fd24 	bl	8001846 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin, GPIO_PIN_SET);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2140      	movs	r1, #64	; 0x40
 8000e02:	481f      	ldr	r0, [pc, #124]	; (8000e80 <traffic_light1+0xb0>)
 8000e04:	f000 fd1f 	bl	8001846 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2180      	movs	r1, #128	; 0x80
 8000e0c:	481c      	ldr	r0, [pc, #112]	; (8000e80 <traffic_light1+0xb0>)
 8000e0e:	f000 fd1a 	bl	8001846 <HAL_GPIO_WritePin>
				break;
 8000e12:	e030      	b.n	8000e76 <traffic_light1+0xa6>

			case AUTO_RED1:
				HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2120      	movs	r1, #32
 8000e18:	4819      	ldr	r0, [pc, #100]	; (8000e80 <traffic_light1+0xb0>)
 8000e1a:	f000 fd14 	bl	8001846 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin, GPIO_PIN_SET);
 8000e1e:	2201      	movs	r2, #1
 8000e20:	2140      	movs	r1, #64	; 0x40
 8000e22:	4817      	ldr	r0, [pc, #92]	; (8000e80 <traffic_light1+0xb0>)
 8000e24:	f000 fd0f 	bl	8001846 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	2180      	movs	r1, #128	; 0x80
 8000e2c:	4814      	ldr	r0, [pc, #80]	; (8000e80 <traffic_light1+0xb0>)
 8000e2e:	f000 fd0a 	bl	8001846 <HAL_GPIO_WritePin>
				break;
 8000e32:	e020      	b.n	8000e76 <traffic_light1+0xa6>

			case AUTO_AMBER1:
				HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	2120      	movs	r1, #32
 8000e38:	4811      	ldr	r0, [pc, #68]	; (8000e80 <traffic_light1+0xb0>)
 8000e3a:	f000 fd04 	bl	8001846 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin, GPIO_PIN_RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2140      	movs	r1, #64	; 0x40
 8000e42:	480f      	ldr	r0, [pc, #60]	; (8000e80 <traffic_light1+0xb0>)
 8000e44:	f000 fcff 	bl	8001846 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2180      	movs	r1, #128	; 0x80
 8000e4c:	480c      	ldr	r0, [pc, #48]	; (8000e80 <traffic_light1+0xb0>)
 8000e4e:	f000 fcfa 	bl	8001846 <HAL_GPIO_WritePin>
				break;
 8000e52:	e010      	b.n	8000e76 <traffic_light1+0xa6>

			case AUTO_GREEN1:
				HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 8000e54:	2201      	movs	r2, #1
 8000e56:	2120      	movs	r1, #32
 8000e58:	4809      	ldr	r0, [pc, #36]	; (8000e80 <traffic_light1+0xb0>)
 8000e5a:	f000 fcf4 	bl	8001846 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin, GPIO_PIN_SET);
 8000e5e:	2201      	movs	r2, #1
 8000e60:	2140      	movs	r1, #64	; 0x40
 8000e62:	4807      	ldr	r0, [pc, #28]	; (8000e80 <traffic_light1+0xb0>)
 8000e64:	f000 fcef 	bl	8001846 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2180      	movs	r1, #128	; 0x80
 8000e6c:	4804      	ldr	r0, [pc, #16]	; (8000e80 <traffic_light1+0xb0>)
 8000e6e:	f000 fcea 	bl	8001846 <HAL_GPIO_WritePin>
				break;
 8000e72:	e000      	b.n	8000e76 <traffic_light1+0xa6>

			default:
				break;
 8000e74:	bf00      	nop
		}
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40010800 	.word	0x40010800

08000e84 <traffic_light2>:


void traffic_light2(int status2){
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b07      	cmp	r3, #7
 8000e90:	d85e      	bhi.n	8000f50 <traffic_light2+0xcc>
 8000e92:	a201      	add	r2, pc, #4	; (adr r2, 8000e98 <traffic_light2+0x14>)
 8000e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e98:	08000eb9 	.word	0x08000eb9
 8000e9c:	08000f51 	.word	0x08000f51
 8000ea0:	08000f51 	.word	0x08000f51
 8000ea4:	08000f51 	.word	0x08000f51
 8000ea8:	08000f51 	.word	0x08000f51
 8000eac:	08000edf 	.word	0x08000edf
 8000eb0:	08000f2b 	.word	0x08000f2b
 8000eb4:	08000f05 	.word	0x08000f05
	switch(status2){
			case INIT_LED:
				HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ebe:	4827      	ldr	r0, [pc, #156]	; (8000f5c <traffic_light2+0xd8>)
 8000ec0:	f000 fcc1 	bl	8001846 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_AMBER2_GPIO_Port, LED_AMBER2_Pin, GPIO_PIN_SET);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eca:	4824      	ldr	r0, [pc, #144]	; (8000f5c <traffic_light2+0xd8>)
 8000ecc:	f000 fcbb 	bl	8001846 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_SET);
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ed6:	4821      	ldr	r0, [pc, #132]	; (8000f5c <traffic_light2+0xd8>)
 8000ed8:	f000 fcb5 	bl	8001846 <HAL_GPIO_WritePin>
				break;
 8000edc:	e039      	b.n	8000f52 <traffic_light2+0xce>

			case AUTO_RED2:
				HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ee4:	481d      	ldr	r0, [pc, #116]	; (8000f5c <traffic_light2+0xd8>)
 8000ee6:	f000 fcae 	bl	8001846 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_AMBER2_GPIO_Port, LED_AMBER2_Pin, GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ef0:	481a      	ldr	r0, [pc, #104]	; (8000f5c <traffic_light2+0xd8>)
 8000ef2:	f000 fca8 	bl	8001846 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_SET);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000efc:	4817      	ldr	r0, [pc, #92]	; (8000f5c <traffic_light2+0xd8>)
 8000efe:	f000 fca2 	bl	8001846 <HAL_GPIO_WritePin>
				break;
 8000f02:	e026      	b.n	8000f52 <traffic_light2+0xce>

			case AUTO_AMBER2:
				HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_SET);
 8000f04:	2201      	movs	r2, #1
 8000f06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f0a:	4814      	ldr	r0, [pc, #80]	; (8000f5c <traffic_light2+0xd8>)
 8000f0c:	f000 fc9b 	bl	8001846 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_AMBER2_GPIO_Port, LED_AMBER2_Pin, GPIO_PIN_RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f16:	4811      	ldr	r0, [pc, #68]	; (8000f5c <traffic_light2+0xd8>)
 8000f18:	f000 fc95 	bl	8001846 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_SET);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f22:	480e      	ldr	r0, [pc, #56]	; (8000f5c <traffic_light2+0xd8>)
 8000f24:	f000 fc8f 	bl	8001846 <HAL_GPIO_WritePin>
				break;
 8000f28:	e013      	b.n	8000f52 <traffic_light2+0xce>

			case AUTO_GREEN2:
				HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_SET);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f30:	480a      	ldr	r0, [pc, #40]	; (8000f5c <traffic_light2+0xd8>)
 8000f32:	f000 fc88 	bl	8001846 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_AMBER2_GPIO_Port, LED_AMBER2_Pin, GPIO_PIN_SET);
 8000f36:	2201      	movs	r2, #1
 8000f38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f3c:	4807      	ldr	r0, [pc, #28]	; (8000f5c <traffic_light2+0xd8>)
 8000f3e:	f000 fc82 	bl	8001846 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f48:	4804      	ldr	r0, [pc, #16]	; (8000f5c <traffic_light2+0xd8>)
 8000f4a:	f000 fc7c 	bl	8001846 <HAL_GPIO_WritePin>
				break;
 8000f4e:	e000      	b.n	8000f52 <traffic_light2+0xce>

			default:
				break;
 8000f50:	bf00      	nop
		}
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40010800 	.word	0x40010800

08000f60 <fsm_automatic_traffic_light>:



void fsm_automatic_traffic_light(){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	if(status0 == MODE1){
 8000f64:	4b85      	ldr	r3, [pc, #532]	; (800117c <fsm_automatic_traffic_light+0x21c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b0b      	cmp	r3, #11
 8000f6a:	f040 80fc 	bne.w	8001166 <fsm_automatic_traffic_light+0x206>
		switch(status1){
 8000f6e:	4b84      	ldr	r3, [pc, #528]	; (8001180 <fsm_automatic_traffic_light+0x220>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2b03      	cmp	r3, #3
 8000f74:	d871      	bhi.n	800105a <fsm_automatic_traffic_light+0xfa>
 8000f76:	a201      	add	r2, pc, #4	; (adr r2, 8000f7c <fsm_automatic_traffic_light+0x1c>)
 8000f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f7c:	08000f8d 	.word	0x08000f8d
 8000f80:	08000fb3 	.word	0x08000fb3
 8000f84:	08001023 	.word	0x08001023
 8000f88:	08000feb 	.word	0x08000feb
				case INIT_LED:
					status1 = AUTO_RED1;
 8000f8c:	4b7c      	ldr	r3, [pc, #496]	; (8001180 <fsm_automatic_traffic_light+0x220>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	601a      	str	r2, [r3, #0]
					counter_1 = TIME_RED / 1000;
 8000f92:	4b7c      	ldr	r3, [pc, #496]	; (8001184 <fsm_automatic_traffic_light+0x224>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a7c      	ldr	r2, [pc, #496]	; (8001188 <fsm_automatic_traffic_light+0x228>)
 8000f98:	fb82 1203 	smull	r1, r2, r2, r3
 8000f9c:	1192      	asrs	r2, r2, #6
 8000f9e:	17db      	asrs	r3, r3, #31
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	4a7a      	ldr	r2, [pc, #488]	; (800118c <fsm_automatic_traffic_light+0x22c>)
 8000fa4:	6013      	str	r3, [r2, #0]
					traffic_light1(status1);
 8000fa6:	4b76      	ldr	r3, [pc, #472]	; (8001180 <fsm_automatic_traffic_light+0x220>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ff10 	bl	8000dd0 <traffic_light1>
					break;
 8000fb0:	e05a      	b.n	8001068 <fsm_automatic_traffic_light+0x108>

				case AUTO_RED1:
					counter_1 --;
 8000fb2:	4b76      	ldr	r3, [pc, #472]	; (800118c <fsm_automatic_traffic_light+0x22c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	4a74      	ldr	r2, [pc, #464]	; (800118c <fsm_automatic_traffic_light+0x22c>)
 8000fba:	6013      	str	r3, [r2, #0]
					if(counter_1 <= 0){
 8000fbc:	4b73      	ldr	r3, [pc, #460]	; (800118c <fsm_automatic_traffic_light+0x22c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	dc4c      	bgt.n	800105e <fsm_automatic_traffic_light+0xfe>
						status1 = AUTO_GREEN1;
 8000fc4:	4b6e      	ldr	r3, [pc, #440]	; (8001180 <fsm_automatic_traffic_light+0x220>)
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	601a      	str	r2, [r3, #0]
						counter_1 = TIME_GREEN / 1000;
 8000fca:	4b71      	ldr	r3, [pc, #452]	; (8001190 <fsm_automatic_traffic_light+0x230>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a6e      	ldr	r2, [pc, #440]	; (8001188 <fsm_automatic_traffic_light+0x228>)
 8000fd0:	fb82 1203 	smull	r1, r2, r2, r3
 8000fd4:	1192      	asrs	r2, r2, #6
 8000fd6:	17db      	asrs	r3, r3, #31
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	4a6c      	ldr	r2, [pc, #432]	; (800118c <fsm_automatic_traffic_light+0x22c>)
 8000fdc:	6013      	str	r3, [r2, #0]
						traffic_light1(status1);
 8000fde:	4b68      	ldr	r3, [pc, #416]	; (8001180 <fsm_automatic_traffic_light+0x220>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fef4 	bl	8000dd0 <traffic_light1>
					}
					break;
 8000fe8:	e039      	b.n	800105e <fsm_automatic_traffic_light+0xfe>

				case AUTO_AMBER1:
					counter_1 --;
 8000fea:	4b68      	ldr	r3, [pc, #416]	; (800118c <fsm_automatic_traffic_light+0x22c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	4a66      	ldr	r2, [pc, #408]	; (800118c <fsm_automatic_traffic_light+0x22c>)
 8000ff2:	6013      	str	r3, [r2, #0]
					if(counter_1 <= 0){
 8000ff4:	4b65      	ldr	r3, [pc, #404]	; (800118c <fsm_automatic_traffic_light+0x22c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	dc32      	bgt.n	8001062 <fsm_automatic_traffic_light+0x102>
						status1 = AUTO_RED1;
 8000ffc:	4b60      	ldr	r3, [pc, #384]	; (8001180 <fsm_automatic_traffic_light+0x220>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	601a      	str	r2, [r3, #0]
						counter_1 = TIME_RED / 1000;
 8001002:	4b60      	ldr	r3, [pc, #384]	; (8001184 <fsm_automatic_traffic_light+0x224>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a60      	ldr	r2, [pc, #384]	; (8001188 <fsm_automatic_traffic_light+0x228>)
 8001008:	fb82 1203 	smull	r1, r2, r2, r3
 800100c:	1192      	asrs	r2, r2, #6
 800100e:	17db      	asrs	r3, r3, #31
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	4a5e      	ldr	r2, [pc, #376]	; (800118c <fsm_automatic_traffic_light+0x22c>)
 8001014:	6013      	str	r3, [r2, #0]
						traffic_light1(status1);
 8001016:	4b5a      	ldr	r3, [pc, #360]	; (8001180 <fsm_automatic_traffic_light+0x220>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fed8 	bl	8000dd0 <traffic_light1>
					}
					break;
 8001020:	e01f      	b.n	8001062 <fsm_automatic_traffic_light+0x102>

				case AUTO_GREEN1:
					counter_1 --;
 8001022:	4b5a      	ldr	r3, [pc, #360]	; (800118c <fsm_automatic_traffic_light+0x22c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	3b01      	subs	r3, #1
 8001028:	4a58      	ldr	r2, [pc, #352]	; (800118c <fsm_automatic_traffic_light+0x22c>)
 800102a:	6013      	str	r3, [r2, #0]
					if(counter_1 <= 0){
 800102c:	4b57      	ldr	r3, [pc, #348]	; (800118c <fsm_automatic_traffic_light+0x22c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	dc18      	bgt.n	8001066 <fsm_automatic_traffic_light+0x106>
						status1 = AUTO_AMBER1;
 8001034:	4b52      	ldr	r3, [pc, #328]	; (8001180 <fsm_automatic_traffic_light+0x220>)
 8001036:	2203      	movs	r2, #3
 8001038:	601a      	str	r2, [r3, #0]
						counter_1 = TIME_YELLOW / 1000;
 800103a:	4b56      	ldr	r3, [pc, #344]	; (8001194 <fsm_automatic_traffic_light+0x234>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a52      	ldr	r2, [pc, #328]	; (8001188 <fsm_automatic_traffic_light+0x228>)
 8001040:	fb82 1203 	smull	r1, r2, r2, r3
 8001044:	1192      	asrs	r2, r2, #6
 8001046:	17db      	asrs	r3, r3, #31
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	4a50      	ldr	r2, [pc, #320]	; (800118c <fsm_automatic_traffic_light+0x22c>)
 800104c:	6013      	str	r3, [r2, #0]
						traffic_light1(status1);
 800104e:	4b4c      	ldr	r3, [pc, #304]	; (8001180 <fsm_automatic_traffic_light+0x220>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff febc 	bl	8000dd0 <traffic_light1>
					}
					break;
 8001058:	e005      	b.n	8001066 <fsm_automatic_traffic_light+0x106>

				default:
					break;
 800105a:	bf00      	nop
 800105c:	e004      	b.n	8001068 <fsm_automatic_traffic_light+0x108>
					break;
 800105e:	bf00      	nop
 8001060:	e002      	b.n	8001068 <fsm_automatic_traffic_light+0x108>
					break;
 8001062:	bf00      	nop
 8001064:	e000      	b.n	8001068 <fsm_automatic_traffic_light+0x108>
					break;
 8001066:	bf00      	nop
		}

		switch(status2){
 8001068:	4b4b      	ldr	r3, [pc, #300]	; (8001198 <fsm_automatic_traffic_light+0x238>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b07      	cmp	r3, #7
 800106e:	d87c      	bhi.n	800116a <fsm_automatic_traffic_light+0x20a>
 8001070:	a201      	add	r2, pc, #4	; (adr r2, 8001078 <fsm_automatic_traffic_light+0x118>)
 8001072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001076:	bf00      	nop
 8001078:	08001099 	.word	0x08001099
 800107c:	0800116b 	.word	0x0800116b
 8001080:	0800116b 	.word	0x0800116b
 8001084:	0800116b 	.word	0x0800116b
 8001088:	0800116b 	.word	0x0800116b
 800108c:	080010bf 	.word	0x080010bf
 8001090:	0800112f 	.word	0x0800112f
 8001094:	080010f7 	.word	0x080010f7
				case INIT_LED:
						status2 = AUTO_GREEN2;
 8001098:	4b3f      	ldr	r3, [pc, #252]	; (8001198 <fsm_automatic_traffic_light+0x238>)
 800109a:	2206      	movs	r2, #6
 800109c:	601a      	str	r2, [r3, #0]
						counter_2 = TIME_GREEN / 1000;
 800109e:	4b3c      	ldr	r3, [pc, #240]	; (8001190 <fsm_automatic_traffic_light+0x230>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a39      	ldr	r2, [pc, #228]	; (8001188 <fsm_automatic_traffic_light+0x228>)
 80010a4:	fb82 1203 	smull	r1, r2, r2, r3
 80010a8:	1192      	asrs	r2, r2, #6
 80010aa:	17db      	asrs	r3, r3, #31
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	4a3b      	ldr	r2, [pc, #236]	; (800119c <fsm_automatic_traffic_light+0x23c>)
 80010b0:	6013      	str	r3, [r2, #0]
						traffic_light2(status2);
 80010b2:	4b39      	ldr	r3, [pc, #228]	; (8001198 <fsm_automatic_traffic_light+0x238>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fee4 	bl	8000e84 <traffic_light2>
					break;
 80010bc:	e05c      	b.n	8001178 <fsm_automatic_traffic_light+0x218>

				case AUTO_RED2:
					counter_2 --;
 80010be:	4b37      	ldr	r3, [pc, #220]	; (800119c <fsm_automatic_traffic_light+0x23c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	4a35      	ldr	r2, [pc, #212]	; (800119c <fsm_automatic_traffic_light+0x23c>)
 80010c6:	6013      	str	r3, [r2, #0]
					if(counter_2 <= 0){
 80010c8:	4b34      	ldr	r3, [pc, #208]	; (800119c <fsm_automatic_traffic_light+0x23c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	dc4e      	bgt.n	800116e <fsm_automatic_traffic_light+0x20e>
						status2 = AUTO_GREEN2;
 80010d0:	4b31      	ldr	r3, [pc, #196]	; (8001198 <fsm_automatic_traffic_light+0x238>)
 80010d2:	2206      	movs	r2, #6
 80010d4:	601a      	str	r2, [r3, #0]
						counter_2 = TIME_GREEN / 1000;
 80010d6:	4b2e      	ldr	r3, [pc, #184]	; (8001190 <fsm_automatic_traffic_light+0x230>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a2b      	ldr	r2, [pc, #172]	; (8001188 <fsm_automatic_traffic_light+0x228>)
 80010dc:	fb82 1203 	smull	r1, r2, r2, r3
 80010e0:	1192      	asrs	r2, r2, #6
 80010e2:	17db      	asrs	r3, r3, #31
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	4a2d      	ldr	r2, [pc, #180]	; (800119c <fsm_automatic_traffic_light+0x23c>)
 80010e8:	6013      	str	r3, [r2, #0]
						traffic_light2(status2);
 80010ea:	4b2b      	ldr	r3, [pc, #172]	; (8001198 <fsm_automatic_traffic_light+0x238>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fec8 	bl	8000e84 <traffic_light2>
					}

					break;
 80010f4:	e03b      	b.n	800116e <fsm_automatic_traffic_light+0x20e>

				case AUTO_AMBER2:
					counter_2 --;
 80010f6:	4b29      	ldr	r3, [pc, #164]	; (800119c <fsm_automatic_traffic_light+0x23c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	4a27      	ldr	r2, [pc, #156]	; (800119c <fsm_automatic_traffic_light+0x23c>)
 80010fe:	6013      	str	r3, [r2, #0]
					if(counter_2 <= 0){
 8001100:	4b26      	ldr	r3, [pc, #152]	; (800119c <fsm_automatic_traffic_light+0x23c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	dc34      	bgt.n	8001172 <fsm_automatic_traffic_light+0x212>
						status2 = AUTO_RED2;
 8001108:	4b23      	ldr	r3, [pc, #140]	; (8001198 <fsm_automatic_traffic_light+0x238>)
 800110a:	2205      	movs	r2, #5
 800110c:	601a      	str	r2, [r3, #0]
						counter_2 = TIME_RED / 1000;
 800110e:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <fsm_automatic_traffic_light+0x224>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a1d      	ldr	r2, [pc, #116]	; (8001188 <fsm_automatic_traffic_light+0x228>)
 8001114:	fb82 1203 	smull	r1, r2, r2, r3
 8001118:	1192      	asrs	r2, r2, #6
 800111a:	17db      	asrs	r3, r3, #31
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	4a1f      	ldr	r2, [pc, #124]	; (800119c <fsm_automatic_traffic_light+0x23c>)
 8001120:	6013      	str	r3, [r2, #0]
						traffic_light2(status2);
 8001122:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <fsm_automatic_traffic_light+0x238>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff feac 	bl	8000e84 <traffic_light2>
					}
					break;
 800112c:	e021      	b.n	8001172 <fsm_automatic_traffic_light+0x212>

				case AUTO_GREEN2:
					counter_2 --;
 800112e:	4b1b      	ldr	r3, [pc, #108]	; (800119c <fsm_automatic_traffic_light+0x23c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	3b01      	subs	r3, #1
 8001134:	4a19      	ldr	r2, [pc, #100]	; (800119c <fsm_automatic_traffic_light+0x23c>)
 8001136:	6013      	str	r3, [r2, #0]
					if(counter_2 <= 0){
 8001138:	4b18      	ldr	r3, [pc, #96]	; (800119c <fsm_automatic_traffic_light+0x23c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	dc1a      	bgt.n	8001176 <fsm_automatic_traffic_light+0x216>
						status2 = AUTO_AMBER2;
 8001140:	4b15      	ldr	r3, [pc, #84]	; (8001198 <fsm_automatic_traffic_light+0x238>)
 8001142:	2207      	movs	r2, #7
 8001144:	601a      	str	r2, [r3, #0]
						counter_2 = TIME_YELLOW / 1000;
 8001146:	4b13      	ldr	r3, [pc, #76]	; (8001194 <fsm_automatic_traffic_light+0x234>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a0f      	ldr	r2, [pc, #60]	; (8001188 <fsm_automatic_traffic_light+0x228>)
 800114c:	fb82 1203 	smull	r1, r2, r2, r3
 8001150:	1192      	asrs	r2, r2, #6
 8001152:	17db      	asrs	r3, r3, #31
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	4a11      	ldr	r2, [pc, #68]	; (800119c <fsm_automatic_traffic_light+0x23c>)
 8001158:	6013      	str	r3, [r2, #0]
						traffic_light2(status2);
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <fsm_automatic_traffic_light+0x238>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fe90 	bl	8000e84 <traffic_light2>
					}

					break;
 8001164:	e007      	b.n	8001176 <fsm_automatic_traffic_light+0x216>

				default:
					break;
			}
	}
 8001166:	bf00      	nop
 8001168:	e006      	b.n	8001178 <fsm_automatic_traffic_light+0x218>
					break;
 800116a:	bf00      	nop
 800116c:	e004      	b.n	8001178 <fsm_automatic_traffic_light+0x218>
					break;
 800116e:	bf00      	nop
 8001170:	e002      	b.n	8001178 <fsm_automatic_traffic_light+0x218>
					break;
 8001172:	bf00      	nop
 8001174:	e000      	b.n	8001178 <fsm_automatic_traffic_light+0x218>
					break;
 8001176:	bf00      	nop
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	200000c8 	.word	0x200000c8
 8001180:	200000cc 	.word	0x200000cc
 8001184:	20000080 	.word	0x20000080
 8001188:	10624dd3 	.word	0x10624dd3
 800118c:	200000c0 	.word	0x200000c0
 8001190:	20000088 	.word	0x20000088
 8001194:	20000084 	.word	0x20000084
 8001198:	200000d0 	.word	0x200000d0
 800119c:	200000c4 	.word	0x200000c4

080011a0 <updateLed>:

void updateLed(){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	updateClockBuffer(counter_1, counter_2);
 80011a4:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <updateLed+0x18>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a04      	ldr	r2, [pc, #16]	; (80011bc <updateLed+0x1c>)
 80011aa:	6812      	ldr	r2, [r2, #0]
 80011ac:	4611      	mov	r1, r2
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff f8fc 	bl	80003ac <updateClockBuffer>
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	200000c0 	.word	0x200000c0
 80011bc:	200000c4 	.word	0x200000c4

080011c0 <Reset_Handler>:
 80011c0:	480c      	ldr	r0, [pc, #48]	; (80011f4 <LoopFillZerobss+0x12>)
 80011c2:	490d      	ldr	r1, [pc, #52]	; (80011f8 <LoopFillZerobss+0x16>)
 80011c4:	4a0d      	ldr	r2, [pc, #52]	; (80011fc <LoopFillZerobss+0x1a>)
 80011c6:	2300      	movs	r3, #0
 80011c8:	e002      	b.n	80011d0 <LoopCopyDataInit>

080011ca <CopyDataInit>:
 80011ca:	58d4      	ldr	r4, [r2, r3]
 80011cc:	50c4      	str	r4, [r0, r3]
 80011ce:	3304      	adds	r3, #4

080011d0 <LoopCopyDataInit>:
 80011d0:	18c4      	adds	r4, r0, r3
 80011d2:	428c      	cmp	r4, r1
 80011d4:	d3f9      	bcc.n	80011ca <CopyDataInit>
 80011d6:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <LoopFillZerobss+0x1e>)
 80011d8:	4c0a      	ldr	r4, [pc, #40]	; (8001204 <LoopFillZerobss+0x22>)
 80011da:	2300      	movs	r3, #0
 80011dc:	e001      	b.n	80011e2 <LoopFillZerobss>

080011de <FillZerobss>:
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	3204      	adds	r2, #4

080011e2 <LoopFillZerobss>:
 80011e2:	42a2      	cmp	r2, r4
 80011e4:	d3fb      	bcc.n	80011de <FillZerobss>
 80011e6:	f7ff fde1 	bl	8000dac <SystemInit>
 80011ea:	f001 fb45 	bl	8002878 <__libc_init_array>
 80011ee:	f7ff fac3 	bl	8000778 <main>
 80011f2:	4770      	bx	lr
 80011f4:	20000000 	.word	0x20000000
 80011f8:	20000098 	.word	0x20000098
 80011fc:	08002910 	.word	0x08002910
 8001200:	20000098 	.word	0x20000098
 8001204:	20000188 	.word	0x20000188

08001208 <ADC1_2_IRQHandler>:
 8001208:	e7fe      	b.n	8001208 <ADC1_2_IRQHandler>
	...

0800120c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <HAL_Init+0x28>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a07      	ldr	r2, [pc, #28]	; (8001234 <HAL_Init+0x28>)
 8001216:	f043 0310 	orr.w	r3, r3, #16
 800121a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121c:	2003      	movs	r0, #3
 800121e:	f000 f93f 	bl	80014a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001222:	200f      	movs	r0, #15
 8001224:	f000 f808 	bl	8001238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001228:	f7ff fd38 	bl	8000c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40022000 	.word	0x40022000

08001238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_InitTick+0x54>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_InitTick+0x58>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4619      	mov	r1, r3
 800124a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001252:	fbb2 f3f3 	udiv	r3, r2, r3
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f957 	bl	800150a <HAL_SYSTICK_Config>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e00e      	b.n	8001284 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b0f      	cmp	r3, #15
 800126a:	d80a      	bhi.n	8001282 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800126c:	2200      	movs	r2, #0
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	f04f 30ff 	mov.w	r0, #4294967295
 8001274:	f000 f91f 	bl	80014b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001278:	4a06      	ldr	r2, [pc, #24]	; (8001294 <HAL_InitTick+0x5c>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	e000      	b.n	8001284 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	2000008c 	.word	0x2000008c
 8001290:	20000094 	.word	0x20000094
 8001294:	20000090 	.word	0x20000090

08001298 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800129c:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <HAL_IncTick+0x1c>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <HAL_IncTick+0x20>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	4a03      	ldr	r2, [pc, #12]	; (80012b8 <HAL_IncTick+0x20>)
 80012aa:	6013      	str	r3, [r2, #0]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr
 80012b4:	20000094 	.word	0x20000094
 80012b8:	20000184 	.word	0x20000184

080012bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return uwTick;
 80012c0:	4b02      	ldr	r3, [pc, #8]	; (80012cc <HAL_GetTick+0x10>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr
 80012cc:	20000184 	.word	0x20000184

080012d0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <HAL_SuspendTick+0x18>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a03      	ldr	r2, [pc, #12]	; (80012e8 <HAL_SuspendTick+0x18>)
 80012da:	f023 0302 	bic.w	r3, r3, #2
 80012de:	6013      	str	r3, [r2, #0]
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr
 80012e8:	e000e010 	.word	0xe000e010

080012ec <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <HAL_ResumeTick+0x18>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a03      	ldr	r2, [pc, #12]	; (8001304 <HAL_ResumeTick+0x18>)
 80012f6:	f043 0302 	orr.w	r3, r3, #2
 80012fa:	6013      	str	r3, [r2, #0]
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr
 8001304:	e000e010 	.word	0xe000e010

08001308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <__NVIC_SetPriorityGrouping+0x44>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131e:	68ba      	ldr	r2, [r7, #8]
 8001320:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001324:	4013      	ands	r3, r2
 8001326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001330:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133a:	4a04      	ldr	r2, [pc, #16]	; (800134c <__NVIC_SetPriorityGrouping+0x44>)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	60d3      	str	r3, [r2, #12]
}
 8001340:	bf00      	nop
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <__NVIC_GetPriorityGrouping+0x18>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	0a1b      	lsrs	r3, r3, #8
 800135a:	f003 0307 	and.w	r3, r3, #7
}
 800135e:	4618      	mov	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	2b00      	cmp	r3, #0
 800137c:	db0b      	blt.n	8001396 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	f003 021f 	and.w	r2, r3, #31
 8001384:	4906      	ldr	r1, [pc, #24]	; (80013a0 <__NVIC_EnableIRQ+0x34>)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	095b      	lsrs	r3, r3, #5
 800138c:	2001      	movs	r0, #1
 800138e:	fa00 f202 	lsl.w	r2, r0, r2
 8001392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	e000e100 	.word	0xe000e100

080013a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	db0a      	blt.n	80013ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	490c      	ldr	r1, [pc, #48]	; (80013f0 <__NVIC_SetPriority+0x4c>)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	0112      	lsls	r2, r2, #4
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	440b      	add	r3, r1
 80013c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013cc:	e00a      	b.n	80013e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4908      	ldr	r1, [pc, #32]	; (80013f4 <__NVIC_SetPriority+0x50>)
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	3b04      	subs	r3, #4
 80013dc:	0112      	lsls	r2, r2, #4
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	440b      	add	r3, r1
 80013e2:	761a      	strb	r2, [r3, #24]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000e100 	.word	0xe000e100
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b089      	sub	sp, #36	; 0x24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f1c3 0307 	rsb	r3, r3, #7
 8001412:	2b04      	cmp	r3, #4
 8001414:	bf28      	it	cs
 8001416:	2304      	movcs	r3, #4
 8001418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3304      	adds	r3, #4
 800141e:	2b06      	cmp	r3, #6
 8001420:	d902      	bls.n	8001428 <NVIC_EncodePriority+0x30>
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3b03      	subs	r3, #3
 8001426:	e000      	b.n	800142a <NVIC_EncodePriority+0x32>
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800142c:	f04f 32ff 	mov.w	r2, #4294967295
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43da      	mvns	r2, r3
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	401a      	ands	r2, r3
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001440:	f04f 31ff 	mov.w	r1, #4294967295
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fa01 f303 	lsl.w	r3, r1, r3
 800144a:	43d9      	mvns	r1, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	4313      	orrs	r3, r2
         );
}
 8001452:	4618      	mov	r0, r3
 8001454:	3724      	adds	r7, #36	; 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3b01      	subs	r3, #1
 8001468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800146c:	d301      	bcc.n	8001472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800146e:	2301      	movs	r3, #1
 8001470:	e00f      	b.n	8001492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001472:	4a0a      	ldr	r2, [pc, #40]	; (800149c <SysTick_Config+0x40>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3b01      	subs	r3, #1
 8001478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147a:	210f      	movs	r1, #15
 800147c:	f04f 30ff 	mov.w	r0, #4294967295
 8001480:	f7ff ff90 	bl	80013a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001484:	4b05      	ldr	r3, [pc, #20]	; (800149c <SysTick_Config+0x40>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148a:	4b04      	ldr	r3, [pc, #16]	; (800149c <SysTick_Config+0x40>)
 800148c:	2207      	movs	r2, #7
 800148e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	e000e010 	.word	0xe000e010

080014a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ff2d 	bl	8001308 <__NVIC_SetPriorityGrouping>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b086      	sub	sp, #24
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	4603      	mov	r3, r0
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
 80014c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c8:	f7ff ff42 	bl	8001350 <__NVIC_GetPriorityGrouping>
 80014cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	68b9      	ldr	r1, [r7, #8]
 80014d2:	6978      	ldr	r0, [r7, #20]
 80014d4:	f7ff ff90 	bl	80013f8 <NVIC_EncodePriority>
 80014d8:	4602      	mov	r2, r0
 80014da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014de:	4611      	mov	r1, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff5f 	bl	80013a4 <__NVIC_SetPriority>
}
 80014e6:	bf00      	nop
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff35 	bl	800136c <__NVIC_EnableIRQ>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff ffa2 	bl	800145c <SysTick_Config>
 8001518:	4603      	mov	r3, r0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001524:	b480      	push	{r7}
 8001526:	b08b      	sub	sp, #44	; 0x2c
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800152e:	2300      	movs	r3, #0
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001532:	2300      	movs	r3, #0
 8001534:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001536:	e148      	b.n	80017ca <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001538:	2201      	movs	r2, #1
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	69fa      	ldr	r2, [r7, #28]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	429a      	cmp	r2, r3
 8001552:	f040 8137 	bne.w	80017c4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	4aa3      	ldr	r2, [pc, #652]	; (80017e8 <HAL_GPIO_Init+0x2c4>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d05e      	beq.n	800161e <HAL_GPIO_Init+0xfa>
 8001560:	4aa1      	ldr	r2, [pc, #644]	; (80017e8 <HAL_GPIO_Init+0x2c4>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d875      	bhi.n	8001652 <HAL_GPIO_Init+0x12e>
 8001566:	4aa1      	ldr	r2, [pc, #644]	; (80017ec <HAL_GPIO_Init+0x2c8>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d058      	beq.n	800161e <HAL_GPIO_Init+0xfa>
 800156c:	4a9f      	ldr	r2, [pc, #636]	; (80017ec <HAL_GPIO_Init+0x2c8>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d86f      	bhi.n	8001652 <HAL_GPIO_Init+0x12e>
 8001572:	4a9f      	ldr	r2, [pc, #636]	; (80017f0 <HAL_GPIO_Init+0x2cc>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d052      	beq.n	800161e <HAL_GPIO_Init+0xfa>
 8001578:	4a9d      	ldr	r2, [pc, #628]	; (80017f0 <HAL_GPIO_Init+0x2cc>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d869      	bhi.n	8001652 <HAL_GPIO_Init+0x12e>
 800157e:	4a9d      	ldr	r2, [pc, #628]	; (80017f4 <HAL_GPIO_Init+0x2d0>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d04c      	beq.n	800161e <HAL_GPIO_Init+0xfa>
 8001584:	4a9b      	ldr	r2, [pc, #620]	; (80017f4 <HAL_GPIO_Init+0x2d0>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d863      	bhi.n	8001652 <HAL_GPIO_Init+0x12e>
 800158a:	4a9b      	ldr	r2, [pc, #620]	; (80017f8 <HAL_GPIO_Init+0x2d4>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d046      	beq.n	800161e <HAL_GPIO_Init+0xfa>
 8001590:	4a99      	ldr	r2, [pc, #612]	; (80017f8 <HAL_GPIO_Init+0x2d4>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d85d      	bhi.n	8001652 <HAL_GPIO_Init+0x12e>
 8001596:	2b12      	cmp	r3, #18
 8001598:	d82a      	bhi.n	80015f0 <HAL_GPIO_Init+0xcc>
 800159a:	2b12      	cmp	r3, #18
 800159c:	d859      	bhi.n	8001652 <HAL_GPIO_Init+0x12e>
 800159e:	a201      	add	r2, pc, #4	; (adr r2, 80015a4 <HAL_GPIO_Init+0x80>)
 80015a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a4:	0800161f 	.word	0x0800161f
 80015a8:	080015f9 	.word	0x080015f9
 80015ac:	0800160b 	.word	0x0800160b
 80015b0:	0800164d 	.word	0x0800164d
 80015b4:	08001653 	.word	0x08001653
 80015b8:	08001653 	.word	0x08001653
 80015bc:	08001653 	.word	0x08001653
 80015c0:	08001653 	.word	0x08001653
 80015c4:	08001653 	.word	0x08001653
 80015c8:	08001653 	.word	0x08001653
 80015cc:	08001653 	.word	0x08001653
 80015d0:	08001653 	.word	0x08001653
 80015d4:	08001653 	.word	0x08001653
 80015d8:	08001653 	.word	0x08001653
 80015dc:	08001653 	.word	0x08001653
 80015e0:	08001653 	.word	0x08001653
 80015e4:	08001653 	.word	0x08001653
 80015e8:	08001601 	.word	0x08001601
 80015ec:	08001615 	.word	0x08001615
 80015f0:	4a82      	ldr	r2, [pc, #520]	; (80017fc <HAL_GPIO_Init+0x2d8>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d013      	beq.n	800161e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015f6:	e02c      	b.n	8001652 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	623b      	str	r3, [r7, #32]
          break;
 80015fe:	e029      	b.n	8001654 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	3304      	adds	r3, #4
 8001606:	623b      	str	r3, [r7, #32]
          break;
 8001608:	e024      	b.n	8001654 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	3308      	adds	r3, #8
 8001610:	623b      	str	r3, [r7, #32]
          break;
 8001612:	e01f      	b.n	8001654 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	330c      	adds	r3, #12
 800161a:	623b      	str	r3, [r7, #32]
          break;
 800161c:	e01a      	b.n	8001654 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d102      	bne.n	800162c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001626:	2304      	movs	r3, #4
 8001628:	623b      	str	r3, [r7, #32]
          break;
 800162a:	e013      	b.n	8001654 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d105      	bne.n	8001640 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001634:	2308      	movs	r3, #8
 8001636:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69fa      	ldr	r2, [r7, #28]
 800163c:	611a      	str	r2, [r3, #16]
          break;
 800163e:	e009      	b.n	8001654 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001640:	2308      	movs	r3, #8
 8001642:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69fa      	ldr	r2, [r7, #28]
 8001648:	615a      	str	r2, [r3, #20]
          break;
 800164a:	e003      	b.n	8001654 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800164c:	2300      	movs	r3, #0
 800164e:	623b      	str	r3, [r7, #32]
          break;
 8001650:	e000      	b.n	8001654 <HAL_GPIO_Init+0x130>
          break;
 8001652:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	2bff      	cmp	r3, #255	; 0xff
 8001658:	d801      	bhi.n	800165e <HAL_GPIO_Init+0x13a>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	e001      	b.n	8001662 <HAL_GPIO_Init+0x13e>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3304      	adds	r3, #4
 8001662:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	2bff      	cmp	r3, #255	; 0xff
 8001668:	d802      	bhi.n	8001670 <HAL_GPIO_Init+0x14c>
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	e002      	b.n	8001676 <HAL_GPIO_Init+0x152>
 8001670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001672:	3b08      	subs	r3, #8
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	210f      	movs	r1, #15
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	fa01 f303 	lsl.w	r3, r1, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	401a      	ands	r2, r3
 8001688:	6a39      	ldr	r1, [r7, #32]
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	fa01 f303 	lsl.w	r3, r1, r3
 8001690:	431a      	orrs	r2, r3
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 8090 	beq.w	80017c4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016a4:	4b56      	ldr	r3, [pc, #344]	; (8001800 <HAL_GPIO_Init+0x2dc>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	4a55      	ldr	r2, [pc, #340]	; (8001800 <HAL_GPIO_Init+0x2dc>)
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	6193      	str	r3, [r2, #24]
 80016b0:	4b53      	ldr	r3, [pc, #332]	; (8001800 <HAL_GPIO_Init+0x2dc>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016bc:	4a51      	ldr	r2, [pc, #324]	; (8001804 <HAL_GPIO_Init+0x2e0>)
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	089b      	lsrs	r3, r3, #2
 80016c2:	3302      	adds	r3, #2
 80016c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	220f      	movs	r2, #15
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	4013      	ands	r3, r2
 80016de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a49      	ldr	r2, [pc, #292]	; (8001808 <HAL_GPIO_Init+0x2e4>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d00d      	beq.n	8001704 <HAL_GPIO_Init+0x1e0>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a48      	ldr	r2, [pc, #288]	; (800180c <HAL_GPIO_Init+0x2e8>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d007      	beq.n	8001700 <HAL_GPIO_Init+0x1dc>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a47      	ldr	r2, [pc, #284]	; (8001810 <HAL_GPIO_Init+0x2ec>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d101      	bne.n	80016fc <HAL_GPIO_Init+0x1d8>
 80016f8:	2302      	movs	r3, #2
 80016fa:	e004      	b.n	8001706 <HAL_GPIO_Init+0x1e2>
 80016fc:	2303      	movs	r3, #3
 80016fe:	e002      	b.n	8001706 <HAL_GPIO_Init+0x1e2>
 8001700:	2301      	movs	r3, #1
 8001702:	e000      	b.n	8001706 <HAL_GPIO_Init+0x1e2>
 8001704:	2300      	movs	r3, #0
 8001706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001708:	f002 0203 	and.w	r2, r2, #3
 800170c:	0092      	lsls	r2, r2, #2
 800170e:	4093      	lsls	r3, r2
 8001710:	68fa      	ldr	r2, [r7, #12]
 8001712:	4313      	orrs	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001716:	493b      	ldr	r1, [pc, #236]	; (8001804 <HAL_GPIO_Init+0x2e0>)
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	089b      	lsrs	r3, r3, #2
 800171c:	3302      	adds	r3, #2
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d006      	beq.n	800173e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001730:	4b38      	ldr	r3, [pc, #224]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4937      	ldr	r1, [pc, #220]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	4313      	orrs	r3, r2
 800173a:	600b      	str	r3, [r1, #0]
 800173c:	e006      	b.n	800174c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800173e:	4b35      	ldr	r3, [pc, #212]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	43db      	mvns	r3, r3
 8001746:	4933      	ldr	r1, [pc, #204]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 8001748:	4013      	ands	r3, r2
 800174a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d006      	beq.n	8001766 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001758:	4b2e      	ldr	r3, [pc, #184]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	492d      	ldr	r1, [pc, #180]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	4313      	orrs	r3, r2
 8001762:	604b      	str	r3, [r1, #4]
 8001764:	e006      	b.n	8001774 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001766:	4b2b      	ldr	r3, [pc, #172]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	43db      	mvns	r3, r3
 800176e:	4929      	ldr	r1, [pc, #164]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 8001770:	4013      	ands	r3, r2
 8001772:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d006      	beq.n	800178e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001780:	4b24      	ldr	r3, [pc, #144]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	4923      	ldr	r1, [pc, #140]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	4313      	orrs	r3, r2
 800178a:	608b      	str	r3, [r1, #8]
 800178c:	e006      	b.n	800179c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800178e:	4b21      	ldr	r3, [pc, #132]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	43db      	mvns	r3, r3
 8001796:	491f      	ldr	r1, [pc, #124]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 8001798:	4013      	ands	r3, r2
 800179a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d006      	beq.n	80017b6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017a8:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 80017aa:	68da      	ldr	r2, [r3, #12]
 80017ac:	4919      	ldr	r1, [pc, #100]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	60cb      	str	r3, [r1, #12]
 80017b4:	e006      	b.n	80017c4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017b6:	4b17      	ldr	r3, [pc, #92]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 80017b8:	68da      	ldr	r2, [r3, #12]
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	43db      	mvns	r3, r3
 80017be:	4915      	ldr	r1, [pc, #84]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 80017c0:	4013      	ands	r3, r2
 80017c2:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	3301      	adds	r3, #1
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	fa22 f303 	lsr.w	r3, r2, r3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f47f aeaf 	bne.w	8001538 <HAL_GPIO_Init+0x14>
  }
}
 80017da:	bf00      	nop
 80017dc:	bf00      	nop
 80017de:	372c      	adds	r7, #44	; 0x2c
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	10320000 	.word	0x10320000
 80017ec:	10310000 	.word	0x10310000
 80017f0:	10220000 	.word	0x10220000
 80017f4:	10210000 	.word	0x10210000
 80017f8:	10120000 	.word	0x10120000
 80017fc:	10110000 	.word	0x10110000
 8001800:	40021000 	.word	0x40021000
 8001804:	40010000 	.word	0x40010000
 8001808:	40010800 	.word	0x40010800
 800180c:	40010c00 	.word	0x40010c00
 8001810:	40011000 	.word	0x40011000
 8001814:	40010400 	.word	0x40010400

08001818 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	887b      	ldrh	r3, [r7, #2]
 800182a:	4013      	ands	r3, r2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d002      	beq.n	8001836 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001830:	2301      	movs	r3, #1
 8001832:	73fb      	strb	r3, [r7, #15]
 8001834:	e001      	b.n	800183a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001836:	2300      	movs	r3, #0
 8001838:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800183a:	7bfb      	ldrb	r3, [r7, #15]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr

08001846 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
 800184e:	460b      	mov	r3, r1
 8001850:	807b      	strh	r3, [r7, #2]
 8001852:	4613      	mov	r3, r2
 8001854:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001856:	787b      	ldrb	r3, [r7, #1]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800185c:	887a      	ldrh	r2, [r7, #2]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001862:	e003      	b.n	800186c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001864:	887b      	ldrh	r3, [r7, #2]
 8001866:	041a      	lsls	r2, r3, #16
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	611a      	str	r2, [r3, #16]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr

08001876 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001876:	b480      	push	{r7}
 8001878:	b085      	sub	sp, #20
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	460b      	mov	r3, r1
 8001880:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001888:	887a      	ldrh	r2, [r7, #2]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4013      	ands	r3, r2
 800188e:	041a      	lsls	r2, r3, #16
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	43d9      	mvns	r1, r3
 8001894:	887b      	ldrh	r3, [r7, #2]
 8001896:	400b      	ands	r3, r1
 8001898:	431a      	orrs	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	611a      	str	r2, [r3, #16]
}
 800189e:	bf00      	nop
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr

080018a8 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80018b4:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_PWR_EnterSLEEPMode+0x34>)
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	4a08      	ldr	r2, [pc, #32]	; (80018dc <HAL_PWR_EnterSLEEPMode+0x34>)
 80018ba:	f023 0304 	bic.w	r3, r3, #4
 80018be:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80018c0:	78fb      	ldrb	r3, [r7, #3]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d101      	bne.n	80018ca <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80018c6:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 80018c8:	e002      	b.n	80018d0 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 80018ca:	bf40      	sev
    __WFE();
 80018cc:	bf20      	wfe
    __WFE();
 80018ce:	bf20      	wfe
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e26c      	b.n	8001dcc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 8087 	beq.w	8001a0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001900:	4b92      	ldr	r3, [pc, #584]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 030c 	and.w	r3, r3, #12
 8001908:	2b04      	cmp	r3, #4
 800190a:	d00c      	beq.n	8001926 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800190c:	4b8f      	ldr	r3, [pc, #572]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 030c 	and.w	r3, r3, #12
 8001914:	2b08      	cmp	r3, #8
 8001916:	d112      	bne.n	800193e <HAL_RCC_OscConfig+0x5e>
 8001918:	4b8c      	ldr	r3, [pc, #560]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001924:	d10b      	bne.n	800193e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001926:	4b89      	ldr	r3, [pc, #548]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d06c      	beq.n	8001a0c <HAL_RCC_OscConfig+0x12c>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d168      	bne.n	8001a0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e246      	b.n	8001dcc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001946:	d106      	bne.n	8001956 <HAL_RCC_OscConfig+0x76>
 8001948:	4b80      	ldr	r3, [pc, #512]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a7f      	ldr	r2, [pc, #508]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 800194e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001952:	6013      	str	r3, [r2, #0]
 8001954:	e02e      	b.n	80019b4 <HAL_RCC_OscConfig+0xd4>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10c      	bne.n	8001978 <HAL_RCC_OscConfig+0x98>
 800195e:	4b7b      	ldr	r3, [pc, #492]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a7a      	ldr	r2, [pc, #488]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001964:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	4b78      	ldr	r3, [pc, #480]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a77      	ldr	r2, [pc, #476]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001970:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	e01d      	b.n	80019b4 <HAL_RCC_OscConfig+0xd4>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001980:	d10c      	bne.n	800199c <HAL_RCC_OscConfig+0xbc>
 8001982:	4b72      	ldr	r3, [pc, #456]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a71      	ldr	r2, [pc, #452]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	4b6f      	ldr	r3, [pc, #444]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a6e      	ldr	r2, [pc, #440]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	e00b      	b.n	80019b4 <HAL_RCC_OscConfig+0xd4>
 800199c:	4b6b      	ldr	r3, [pc, #428]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a6a      	ldr	r2, [pc, #424]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 80019a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	4b68      	ldr	r3, [pc, #416]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a67      	ldr	r2, [pc, #412]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 80019ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d013      	beq.n	80019e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019bc:	f7ff fc7e 	bl	80012bc <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c4:	f7ff fc7a 	bl	80012bc <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b64      	cmp	r3, #100	; 0x64
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e1fa      	b.n	8001dcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d6:	4b5d      	ldr	r3, [pc, #372]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0xe4>
 80019e2:	e014      	b.n	8001a0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e4:	f7ff fc6a 	bl	80012bc <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ec:	f7ff fc66 	bl	80012bc <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b64      	cmp	r3, #100	; 0x64
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e1e6      	b.n	8001dcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019fe:	4b53      	ldr	r3, [pc, #332]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x10c>
 8001a0a:	e000      	b.n	8001a0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d063      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a1a:	4b4c      	ldr	r3, [pc, #304]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00b      	beq.n	8001a3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a26:	4b49      	ldr	r3, [pc, #292]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 030c 	and.w	r3, r3, #12
 8001a2e:	2b08      	cmp	r3, #8
 8001a30:	d11c      	bne.n	8001a6c <HAL_RCC_OscConfig+0x18c>
 8001a32:	4b46      	ldr	r3, [pc, #280]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d116      	bne.n	8001a6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3e:	4b43      	ldr	r3, [pc, #268]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d005      	beq.n	8001a56 <HAL_RCC_OscConfig+0x176>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d001      	beq.n	8001a56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e1ba      	b.n	8001dcc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a56:	4b3d      	ldr	r3, [pc, #244]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	4939      	ldr	r1, [pc, #228]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a6a:	e03a      	b.n	8001ae2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d020      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a74:	4b36      	ldr	r3, [pc, #216]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7a:	f7ff fc1f 	bl	80012bc <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a82:	f7ff fc1b 	bl	80012bc <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e19b      	b.n	8001dcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a94:	4b2d      	ldr	r3, [pc, #180]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0f0      	beq.n	8001a82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa0:	4b2a      	ldr	r3, [pc, #168]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	4927      	ldr	r1, [pc, #156]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	600b      	str	r3, [r1, #0]
 8001ab4:	e015      	b.n	8001ae2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ab6:	4b26      	ldr	r3, [pc, #152]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abc:	f7ff fbfe 	bl	80012bc <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac4:	f7ff fbfa 	bl	80012bc <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e17a      	b.n	8001dcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ad6:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f0      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d03a      	beq.n	8001b64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d019      	beq.n	8001b2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001af6:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001afc:	f7ff fbde 	bl	80012bc <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b04:	f7ff fbda 	bl	80012bc <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e15a      	b.n	8001dcc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b16:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0f0      	beq.n	8001b04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b22:	2001      	movs	r0, #1
 8001b24:	f000 faa6 	bl	8002074 <RCC_Delay>
 8001b28:	e01c      	b.n	8001b64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b30:	f7ff fbc4 	bl	80012bc <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b36:	e00f      	b.n	8001b58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b38:	f7ff fbc0 	bl	80012bc <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d908      	bls.n	8001b58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e140      	b.n	8001dcc <HAL_RCC_OscConfig+0x4ec>
 8001b4a:	bf00      	nop
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	42420000 	.word	0x42420000
 8001b54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b58:	4b9e      	ldr	r3, [pc, #632]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1e9      	bne.n	8001b38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 80a6 	beq.w	8001cbe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b72:	2300      	movs	r3, #0
 8001b74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b76:	4b97      	ldr	r3, [pc, #604]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10d      	bne.n	8001b9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b82:	4b94      	ldr	r3, [pc, #592]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	4a93      	ldr	r2, [pc, #588]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b8c:	61d3      	str	r3, [r2, #28]
 8001b8e:	4b91      	ldr	r3, [pc, #580]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9e:	4b8e      	ldr	r3, [pc, #568]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d118      	bne.n	8001bdc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001baa:	4b8b      	ldr	r3, [pc, #556]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a8a      	ldr	r2, [pc, #552]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bb6:	f7ff fb81 	bl	80012bc <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bbe:	f7ff fb7d 	bl	80012bc <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b64      	cmp	r3, #100	; 0x64
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e0fd      	b.n	8001dcc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd0:	4b81      	ldr	r3, [pc, #516]	; (8001dd8 <HAL_RCC_OscConfig+0x4f8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0f0      	beq.n	8001bbe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d106      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x312>
 8001be4:	4b7b      	ldr	r3, [pc, #492]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	4a7a      	ldr	r2, [pc, #488]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6213      	str	r3, [r2, #32]
 8001bf0:	e02d      	b.n	8001c4e <HAL_RCC_OscConfig+0x36e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x334>
 8001bfa:	4b76      	ldr	r3, [pc, #472]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	4a75      	ldr	r2, [pc, #468]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001c00:	f023 0301 	bic.w	r3, r3, #1
 8001c04:	6213      	str	r3, [r2, #32]
 8001c06:	4b73      	ldr	r3, [pc, #460]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	4a72      	ldr	r2, [pc, #456]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001c0c:	f023 0304 	bic.w	r3, r3, #4
 8001c10:	6213      	str	r3, [r2, #32]
 8001c12:	e01c      	b.n	8001c4e <HAL_RCC_OscConfig+0x36e>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	2b05      	cmp	r3, #5
 8001c1a:	d10c      	bne.n	8001c36 <HAL_RCC_OscConfig+0x356>
 8001c1c:	4b6d      	ldr	r3, [pc, #436]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	4a6c      	ldr	r2, [pc, #432]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001c22:	f043 0304 	orr.w	r3, r3, #4
 8001c26:	6213      	str	r3, [r2, #32]
 8001c28:	4b6a      	ldr	r3, [pc, #424]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	4a69      	ldr	r2, [pc, #420]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	6213      	str	r3, [r2, #32]
 8001c34:	e00b      	b.n	8001c4e <HAL_RCC_OscConfig+0x36e>
 8001c36:	4b67      	ldr	r3, [pc, #412]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	4a66      	ldr	r2, [pc, #408]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001c3c:	f023 0301 	bic.w	r3, r3, #1
 8001c40:	6213      	str	r3, [r2, #32]
 8001c42:	4b64      	ldr	r3, [pc, #400]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	4a63      	ldr	r2, [pc, #396]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001c48:	f023 0304 	bic.w	r3, r3, #4
 8001c4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d015      	beq.n	8001c82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c56:	f7ff fb31 	bl	80012bc <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c5c:	e00a      	b.n	8001c74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5e:	f7ff fb2d 	bl	80012bc <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e0ab      	b.n	8001dcc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c74:	4b57      	ldr	r3, [pc, #348]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0ee      	beq.n	8001c5e <HAL_RCC_OscConfig+0x37e>
 8001c80:	e014      	b.n	8001cac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c82:	f7ff fb1b 	bl	80012bc <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c88:	e00a      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8a:	f7ff fb17 	bl	80012bc <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e095      	b.n	8001dcc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca0:	4b4c      	ldr	r3, [pc, #304]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1ee      	bne.n	8001c8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cac:	7dfb      	ldrb	r3, [r7, #23]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d105      	bne.n	8001cbe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cb2:	4b48      	ldr	r3, [pc, #288]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	4a47      	ldr	r2, [pc, #284]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001cb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 8081 	beq.w	8001dca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cc8:	4b42      	ldr	r3, [pc, #264]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 030c 	and.w	r3, r3, #12
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d061      	beq.n	8001d98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d146      	bne.n	8001d6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cdc:	4b3f      	ldr	r3, [pc, #252]	; (8001ddc <HAL_RCC_OscConfig+0x4fc>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce2:	f7ff faeb 	bl	80012bc <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cea:	f7ff fae7 	bl	80012bc <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e067      	b.n	8001dcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cfc:	4b35      	ldr	r3, [pc, #212]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1f0      	bne.n	8001cea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d10:	d108      	bne.n	8001d24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d12:	4b30      	ldr	r3, [pc, #192]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	492d      	ldr	r1, [pc, #180]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d24:	4b2b      	ldr	r3, [pc, #172]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a19      	ldr	r1, [r3, #32]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d34:	430b      	orrs	r3, r1
 8001d36:	4927      	ldr	r1, [pc, #156]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d3c:	4b27      	ldr	r3, [pc, #156]	; (8001ddc <HAL_RCC_OscConfig+0x4fc>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d42:	f7ff fabb 	bl	80012bc <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4a:	f7ff fab7 	bl	80012bc <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e037      	b.n	8001dcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d5c:	4b1d      	ldr	r3, [pc, #116]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0f0      	beq.n	8001d4a <HAL_RCC_OscConfig+0x46a>
 8001d68:	e02f      	b.n	8001dca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d6a:	4b1c      	ldr	r3, [pc, #112]	; (8001ddc <HAL_RCC_OscConfig+0x4fc>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d70:	f7ff faa4 	bl	80012bc <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d78:	f7ff faa0 	bl	80012bc <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e020      	b.n	8001dcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d8a:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f0      	bne.n	8001d78 <HAL_RCC_OscConfig+0x498>
 8001d96:	e018      	b.n	8001dca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d101      	bne.n	8001da4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e013      	b.n	8001dcc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <HAL_RCC_OscConfig+0x4f4>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d106      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d001      	beq.n	8001dca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40007000 	.word	0x40007000
 8001ddc:	42420060 	.word	0x42420060

08001de0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e0d0      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001df4:	4b6a      	ldr	r3, [pc, #424]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d910      	bls.n	8001e24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e02:	4b67      	ldr	r3, [pc, #412]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f023 0207 	bic.w	r2, r3, #7
 8001e0a:	4965      	ldr	r1, [pc, #404]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e12:	4b63      	ldr	r3, [pc, #396]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d001      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e0b8      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d020      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d005      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e3c:	4b59      	ldr	r3, [pc, #356]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	4a58      	ldr	r2, [pc, #352]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d005      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e54:	4b53      	ldr	r3, [pc, #332]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	4a52      	ldr	r2, [pc, #328]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e60:	4b50      	ldr	r3, [pc, #320]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	494d      	ldr	r1, [pc, #308]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d040      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d107      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e86:	4b47      	ldr	r3, [pc, #284]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d115      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e07f      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d107      	bne.n	8001eae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9e:	4b41      	ldr	r3, [pc, #260]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d109      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e073      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eae:	4b3d      	ldr	r3, [pc, #244]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e06b      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ebe:	4b39      	ldr	r3, [pc, #228]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f023 0203 	bic.w	r2, r3, #3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	4936      	ldr	r1, [pc, #216]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ed0:	f7ff f9f4 	bl	80012bc <HAL_GetTick>
 8001ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed6:	e00a      	b.n	8001eee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed8:	f7ff f9f0 	bl	80012bc <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e053      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eee:	4b2d      	ldr	r3, [pc, #180]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 020c 	and.w	r2, r3, #12
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d1eb      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f00:	4b27      	ldr	r3, [pc, #156]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d210      	bcs.n	8001f30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0e:	4b24      	ldr	r3, [pc, #144]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f023 0207 	bic.w	r2, r3, #7
 8001f16:	4922      	ldr	r1, [pc, #136]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1e:	4b20      	ldr	r3, [pc, #128]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d001      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e032      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d008      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f3c:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	4916      	ldr	r1, [pc, #88]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d009      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f5a:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	490e      	ldr	r1, [pc, #56]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f6e:	f000 f821 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 8001f72:	4602      	mov	r2, r0
 8001f74:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	091b      	lsrs	r3, r3, #4
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	490a      	ldr	r1, [pc, #40]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f80:	5ccb      	ldrb	r3, [r1, r3]
 8001f82:	fa22 f303 	lsr.w	r3, r2, r3
 8001f86:	4a09      	ldr	r2, [pc, #36]	; (8001fac <HAL_RCC_ClockConfig+0x1cc>)
 8001f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f8a:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <HAL_RCC_ClockConfig+0x1d0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff f952 	bl	8001238 <HAL_InitTick>

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40022000 	.word	0x40022000
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	080028f8 	.word	0x080028f8
 8001fac:	2000008c 	.word	0x2000008c
 8001fb0:	20000090 	.word	0x20000090

08001fb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb4:	b490      	push	{r4, r7}
 8001fb6:	b08a      	sub	sp, #40	; 0x28
 8001fb8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fba:	4b2a      	ldr	r3, [pc, #168]	; (8002064 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001fbc:	1d3c      	adds	r4, r7, #4
 8001fbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fc4:	f240 2301 	movw	r3, #513	; 0x201
 8001fc8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61bb      	str	r3, [r7, #24]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fde:	4b22      	ldr	r3, [pc, #136]	; (8002068 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d002      	beq.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x40>
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d003      	beq.n	8001ffa <HAL_RCC_GetSysClockFreq+0x46>
 8001ff2:	e02d      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ff4:	4b1d      	ldr	r3, [pc, #116]	; (800206c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ff6:	623b      	str	r3, [r7, #32]
      break;
 8001ff8:	e02d      	b.n	8002056 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	0c9b      	lsrs	r3, r3, #18
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002006:	4413      	add	r3, r2
 8002008:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800200c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d013      	beq.n	8002040 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002018:	4b13      	ldr	r3, [pc, #76]	; (8002068 <HAL_RCC_GetSysClockFreq+0xb4>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	0c5b      	lsrs	r3, r3, #17
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002026:	4413      	add	r3, r2
 8002028:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800202c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	4a0e      	ldr	r2, [pc, #56]	; (800206c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002032:	fb02 f203 	mul.w	r2, r2, r3
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	fbb2 f3f3 	udiv	r3, r2, r3
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
 800203e:	e004      	b.n	800204a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	4a0b      	ldr	r2, [pc, #44]	; (8002070 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002044:	fb02 f303 	mul.w	r3, r2, r3
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	623b      	str	r3, [r7, #32]
      break;
 800204e:	e002      	b.n	8002056 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002050:	4b06      	ldr	r3, [pc, #24]	; (800206c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002052:	623b      	str	r3, [r7, #32]
      break;
 8002054:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002056:	6a3b      	ldr	r3, [r7, #32]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3728      	adds	r7, #40	; 0x28
 800205c:	46bd      	mov	sp, r7
 800205e:	bc90      	pop	{r4, r7}
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	080028e8 	.word	0x080028e8
 8002068:	40021000 	.word	0x40021000
 800206c:	007a1200 	.word	0x007a1200
 8002070:	003d0900 	.word	0x003d0900

08002074 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800207c:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <RCC_Delay+0x34>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a0a      	ldr	r2, [pc, #40]	; (80020ac <RCC_Delay+0x38>)
 8002082:	fba2 2303 	umull	r2, r3, r2, r3
 8002086:	0a5b      	lsrs	r3, r3, #9
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	fb02 f303 	mul.w	r3, r2, r3
 800208e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002090:	bf00      	nop
  }
  while (Delay --);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	1e5a      	subs	r2, r3, #1
 8002096:	60fa      	str	r2, [r7, #12]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1f9      	bne.n	8002090 <RCC_Delay+0x1c>
}
 800209c:	bf00      	nop
 800209e:	bf00      	nop
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr
 80020a8:	2000008c 	.word	0x2000008c
 80020ac:	10624dd3 	.word	0x10624dd3

080020b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e041      	b.n	8002146 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d106      	bne.n	80020dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7fe fe12 	bl	8000d00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2202      	movs	r2, #2
 80020e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3304      	adds	r3, #4
 80020ec:	4619      	mov	r1, r3
 80020ee:	4610      	mov	r0, r2
 80020f0:	f000 fa6a 	bl	80025c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b01      	cmp	r3, #1
 8002162:	d001      	beq.n	8002168 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e035      	b.n	80021d4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2202      	movs	r2, #2
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 0201 	orr.w	r2, r2, #1
 800217e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a16      	ldr	r2, [pc, #88]	; (80021e0 <HAL_TIM_Base_Start_IT+0x90>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d009      	beq.n	800219e <HAL_TIM_Base_Start_IT+0x4e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002192:	d004      	beq.n	800219e <HAL_TIM_Base_Start_IT+0x4e>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a12      	ldr	r2, [pc, #72]	; (80021e4 <HAL_TIM_Base_Start_IT+0x94>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d111      	bne.n	80021c2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2b06      	cmp	r3, #6
 80021ae:	d010      	beq.n	80021d2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0201 	orr.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021c0:	e007      	b.n	80021d2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f042 0201 	orr.w	r2, r2, #1
 80021d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40012c00 	.word	0x40012c00
 80021e4:	40000400 	.word	0x40000400

080021e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d122      	bne.n	8002244 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b02      	cmp	r3, #2
 800220a:	d11b      	bne.n	8002244 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f06f 0202 	mvn.w	r2, #2
 8002214:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f9b1 	bl	8002592 <HAL_TIM_IC_CaptureCallback>
 8002230:	e005      	b.n	800223e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f9a4 	bl	8002580 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 f9b3 	bl	80025a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	2b04      	cmp	r3, #4
 8002250:	d122      	bne.n	8002298 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b04      	cmp	r3, #4
 800225e:	d11b      	bne.n	8002298 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f06f 0204 	mvn.w	r2, #4
 8002268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2202      	movs	r2, #2
 800226e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f987 	bl	8002592 <HAL_TIM_IC_CaptureCallback>
 8002284:	e005      	b.n	8002292 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f97a 	bl	8002580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 f989 	bl	80025a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b08      	cmp	r3, #8
 80022a4:	d122      	bne.n	80022ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	f003 0308 	and.w	r3, r3, #8
 80022b0:	2b08      	cmp	r3, #8
 80022b2:	d11b      	bne.n	80022ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f06f 0208 	mvn.w	r2, #8
 80022bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2204      	movs	r2, #4
 80022c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 f95d 	bl	8002592 <HAL_TIM_IC_CaptureCallback>
 80022d8:	e005      	b.n	80022e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f950 	bl	8002580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 f95f 	bl	80025a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	f003 0310 	and.w	r3, r3, #16
 80022f6:	2b10      	cmp	r3, #16
 80022f8:	d122      	bne.n	8002340 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	f003 0310 	and.w	r3, r3, #16
 8002304:	2b10      	cmp	r3, #16
 8002306:	d11b      	bne.n	8002340 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f06f 0210 	mvn.w	r2, #16
 8002310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2208      	movs	r2, #8
 8002316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f933 	bl	8002592 <HAL_TIM_IC_CaptureCallback>
 800232c:	e005      	b.n	800233a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f926 	bl	8002580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f935 	bl	80025a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b01      	cmp	r3, #1
 800234c:	d10e      	bne.n	800236c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b01      	cmp	r3, #1
 800235a:	d107      	bne.n	800236c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f06f 0201 	mvn.w	r2, #1
 8002364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7fe fb18 	bl	800099c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002376:	2b80      	cmp	r3, #128	; 0x80
 8002378:	d10e      	bne.n	8002398 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002384:	2b80      	cmp	r3, #128	; 0x80
 8002386:	d107      	bne.n	8002398 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 fa67 	bl	8002866 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a2:	2b40      	cmp	r3, #64	; 0x40
 80023a4:	d10e      	bne.n	80023c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b0:	2b40      	cmp	r3, #64	; 0x40
 80023b2:	d107      	bne.n	80023c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f8f9 	bl	80025b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	f003 0320 	and.w	r3, r3, #32
 80023ce:	2b20      	cmp	r3, #32
 80023d0:	d10e      	bne.n	80023f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f003 0320 	and.w	r3, r3, #32
 80023dc:	2b20      	cmp	r3, #32
 80023de:	d107      	bne.n	80023f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f06f 0220 	mvn.w	r2, #32
 80023e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 fa32 	bl	8002854 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023f0:	bf00      	nop
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_TIM_ConfigClockSource+0x18>
 800240c:	2302      	movs	r3, #2
 800240e:	e0b3      	b.n	8002578 <HAL_TIM_ConfigClockSource+0x180>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2202      	movs	r2, #2
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800242e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002436:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002448:	d03e      	beq.n	80024c8 <HAL_TIM_ConfigClockSource+0xd0>
 800244a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800244e:	f200 8087 	bhi.w	8002560 <HAL_TIM_ConfigClockSource+0x168>
 8002452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002456:	f000 8085 	beq.w	8002564 <HAL_TIM_ConfigClockSource+0x16c>
 800245a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800245e:	d87f      	bhi.n	8002560 <HAL_TIM_ConfigClockSource+0x168>
 8002460:	2b70      	cmp	r3, #112	; 0x70
 8002462:	d01a      	beq.n	800249a <HAL_TIM_ConfigClockSource+0xa2>
 8002464:	2b70      	cmp	r3, #112	; 0x70
 8002466:	d87b      	bhi.n	8002560 <HAL_TIM_ConfigClockSource+0x168>
 8002468:	2b60      	cmp	r3, #96	; 0x60
 800246a:	d050      	beq.n	800250e <HAL_TIM_ConfigClockSource+0x116>
 800246c:	2b60      	cmp	r3, #96	; 0x60
 800246e:	d877      	bhi.n	8002560 <HAL_TIM_ConfigClockSource+0x168>
 8002470:	2b50      	cmp	r3, #80	; 0x50
 8002472:	d03c      	beq.n	80024ee <HAL_TIM_ConfigClockSource+0xf6>
 8002474:	2b50      	cmp	r3, #80	; 0x50
 8002476:	d873      	bhi.n	8002560 <HAL_TIM_ConfigClockSource+0x168>
 8002478:	2b40      	cmp	r3, #64	; 0x40
 800247a:	d058      	beq.n	800252e <HAL_TIM_ConfigClockSource+0x136>
 800247c:	2b40      	cmp	r3, #64	; 0x40
 800247e:	d86f      	bhi.n	8002560 <HAL_TIM_ConfigClockSource+0x168>
 8002480:	2b30      	cmp	r3, #48	; 0x30
 8002482:	d064      	beq.n	800254e <HAL_TIM_ConfigClockSource+0x156>
 8002484:	2b30      	cmp	r3, #48	; 0x30
 8002486:	d86b      	bhi.n	8002560 <HAL_TIM_ConfigClockSource+0x168>
 8002488:	2b20      	cmp	r3, #32
 800248a:	d060      	beq.n	800254e <HAL_TIM_ConfigClockSource+0x156>
 800248c:	2b20      	cmp	r3, #32
 800248e:	d867      	bhi.n	8002560 <HAL_TIM_ConfigClockSource+0x168>
 8002490:	2b00      	cmp	r3, #0
 8002492:	d05c      	beq.n	800254e <HAL_TIM_ConfigClockSource+0x156>
 8002494:	2b10      	cmp	r3, #16
 8002496:	d05a      	beq.n	800254e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002498:	e062      	b.n	8002560 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	6899      	ldr	r1, [r3, #8]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f000 f95c 	bl	8002766 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	609a      	str	r2, [r3, #8]
      break;
 80024c6:	e04e      	b.n	8002566 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	6899      	ldr	r1, [r3, #8]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f000 f945 	bl	8002766 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024ea:	609a      	str	r2, [r3, #8]
      break;
 80024ec:	e03b      	b.n	8002566 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6818      	ldr	r0, [r3, #0]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	6859      	ldr	r1, [r3, #4]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	461a      	mov	r2, r3
 80024fc:	f000 f8bc 	bl	8002678 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2150      	movs	r1, #80	; 0x50
 8002506:	4618      	mov	r0, r3
 8002508:	f000 f913 	bl	8002732 <TIM_ITRx_SetConfig>
      break;
 800250c:	e02b      	b.n	8002566 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	6859      	ldr	r1, [r3, #4]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	461a      	mov	r2, r3
 800251c:	f000 f8da 	bl	80026d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2160      	movs	r1, #96	; 0x60
 8002526:	4618      	mov	r0, r3
 8002528:	f000 f903 	bl	8002732 <TIM_ITRx_SetConfig>
      break;
 800252c:	e01b      	b.n	8002566 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6818      	ldr	r0, [r3, #0]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	6859      	ldr	r1, [r3, #4]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	461a      	mov	r2, r3
 800253c:	f000 f89c 	bl	8002678 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2140      	movs	r1, #64	; 0x40
 8002546:	4618      	mov	r0, r3
 8002548:	f000 f8f3 	bl	8002732 <TIM_ITRx_SetConfig>
      break;
 800254c:	e00b      	b.n	8002566 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4619      	mov	r1, r3
 8002558:	4610      	mov	r0, r2
 800255a:	f000 f8ea 	bl	8002732 <TIM_ITRx_SetConfig>
        break;
 800255e:	e002      	b.n	8002566 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002560:	bf00      	nop
 8002562:	e000      	b.n	8002566 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002564:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr

08002592 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr

080025a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr

080025b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a25      	ldr	r2, [pc, #148]	; (8002670 <TIM_Base_SetConfig+0xa8>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d007      	beq.n	80025f0 <TIM_Base_SetConfig+0x28>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e6:	d003      	beq.n	80025f0 <TIM_Base_SetConfig+0x28>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a22      	ldr	r2, [pc, #136]	; (8002674 <TIM_Base_SetConfig+0xac>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d108      	bne.n	8002602 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4313      	orrs	r3, r2
 8002600:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a1a      	ldr	r2, [pc, #104]	; (8002670 <TIM_Base_SetConfig+0xa8>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d007      	beq.n	800261a <TIM_Base_SetConfig+0x52>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002610:	d003      	beq.n	800261a <TIM_Base_SetConfig+0x52>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a17      	ldr	r2, [pc, #92]	; (8002674 <TIM_Base_SetConfig+0xac>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d108      	bne.n	800262c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002620:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	4313      	orrs	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	4313      	orrs	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a07      	ldr	r2, [pc, #28]	; (8002670 <TIM_Base_SetConfig+0xa8>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d103      	bne.n	8002660 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	615a      	str	r2, [r3, #20]
}
 8002666:	bf00      	nop
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr
 8002670:	40012c00 	.word	0x40012c00
 8002674:	40000400 	.word	0x40000400

08002678 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002678:	b480      	push	{r7}
 800267a:	b087      	sub	sp, #28
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	f023 0201 	bic.w	r2, r3, #1
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f023 030a 	bic.w	r3, r3, #10
 80026b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	621a      	str	r2, [r3, #32]
}
 80026ca:	bf00      	nop
 80026cc:	371c      	adds	r7, #28
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr

080026d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b087      	sub	sp, #28
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	f023 0210 	bic.w	r2, r3, #16
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	031b      	lsls	r3, r3, #12
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	4313      	orrs	r3, r2
 8002708:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002710:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	621a      	str	r2, [r3, #32]
}
 8002728:	bf00      	nop
 800272a:	371c      	adds	r7, #28
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr

08002732 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002732:	b480      	push	{r7}
 8002734:	b085      	sub	sp, #20
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
 800273a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002748:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4313      	orrs	r3, r2
 8002750:	f043 0307 	orr.w	r3, r3, #7
 8002754:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	609a      	str	r2, [r3, #8]
}
 800275c:	bf00      	nop
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr

08002766 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002766:	b480      	push	{r7}
 8002768:	b087      	sub	sp, #28
 800276a:	af00      	add	r7, sp, #0
 800276c:	60f8      	str	r0, [r7, #12]
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	607a      	str	r2, [r7, #4]
 8002772:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002780:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	021a      	lsls	r2, r3, #8
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	431a      	orrs	r2, r3
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	4313      	orrs	r3, r2
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	4313      	orrs	r3, r2
 8002792:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	609a      	str	r2, [r3, #8]
}
 800279a:	bf00      	nop
 800279c:	371c      	adds	r7, #28
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d101      	bne.n	80027bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027b8:	2302      	movs	r3, #2
 80027ba:	e041      	b.n	8002840 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a14      	ldr	r2, [pc, #80]	; (800284c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d009      	beq.n	8002814 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002808:	d004      	beq.n	8002814 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a10      	ldr	r2, [pc, #64]	; (8002850 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d10c      	bne.n	800282e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800281a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	4313      	orrs	r3, r2
 8002824:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40012c00 	.word	0x40012c00
 8002850:	40000400 	.word	0x40000400

08002854 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr

08002878 <__libc_init_array>:
 8002878:	b570      	push	{r4, r5, r6, lr}
 800287a:	2600      	movs	r6, #0
 800287c:	4d0c      	ldr	r5, [pc, #48]	; (80028b0 <__libc_init_array+0x38>)
 800287e:	4c0d      	ldr	r4, [pc, #52]	; (80028b4 <__libc_init_array+0x3c>)
 8002880:	1b64      	subs	r4, r4, r5
 8002882:	10a4      	asrs	r4, r4, #2
 8002884:	42a6      	cmp	r6, r4
 8002886:	d109      	bne.n	800289c <__libc_init_array+0x24>
 8002888:	f000 f822 	bl	80028d0 <_init>
 800288c:	2600      	movs	r6, #0
 800288e:	4d0a      	ldr	r5, [pc, #40]	; (80028b8 <__libc_init_array+0x40>)
 8002890:	4c0a      	ldr	r4, [pc, #40]	; (80028bc <__libc_init_array+0x44>)
 8002892:	1b64      	subs	r4, r4, r5
 8002894:	10a4      	asrs	r4, r4, #2
 8002896:	42a6      	cmp	r6, r4
 8002898:	d105      	bne.n	80028a6 <__libc_init_array+0x2e>
 800289a:	bd70      	pop	{r4, r5, r6, pc}
 800289c:	f855 3b04 	ldr.w	r3, [r5], #4
 80028a0:	4798      	blx	r3
 80028a2:	3601      	adds	r6, #1
 80028a4:	e7ee      	b.n	8002884 <__libc_init_array+0xc>
 80028a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80028aa:	4798      	blx	r3
 80028ac:	3601      	adds	r6, #1
 80028ae:	e7f2      	b.n	8002896 <__libc_init_array+0x1e>
 80028b0:	08002908 	.word	0x08002908
 80028b4:	08002908 	.word	0x08002908
 80028b8:	08002908 	.word	0x08002908
 80028bc:	0800290c 	.word	0x0800290c

080028c0 <memset>:
 80028c0:	4603      	mov	r3, r0
 80028c2:	4402      	add	r2, r0
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d100      	bne.n	80028ca <memset+0xa>
 80028c8:	4770      	bx	lr
 80028ca:	f803 1b01 	strb.w	r1, [r3], #1
 80028ce:	e7f9      	b.n	80028c4 <memset+0x4>

080028d0 <_init>:
 80028d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028d2:	bf00      	nop
 80028d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028d6:	bc08      	pop	{r3}
 80028d8:	469e      	mov	lr, r3
 80028da:	4770      	bx	lr

080028dc <_fini>:
 80028dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028de:	bf00      	nop
 80028e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028e2:	bc08      	pop	{r3}
 80028e4:	469e      	mov	lr, r3
 80028e6:	4770      	bx	lr
