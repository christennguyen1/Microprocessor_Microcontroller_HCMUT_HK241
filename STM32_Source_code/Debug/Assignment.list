
Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d08  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  08005e14  08005e14  00015e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060d0  080060d0  000200ec  2**0
                  CONTENTS
  4 .ARM          00000000  080060d0  080060d0  000200ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060d0  080060d0  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060d0  080060d0  000160d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060d4  080060d4  000160d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  080060d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  200000ec  080061c4  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  080061c4  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001543d  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ecd  00000000  00000000  00035552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00038420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa8  00000000  00000000  00039510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a3ab  00000000  00000000  0003a4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015aa0  00000000  00000000  00054863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008edf7  00000000  00000000  0006a303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f90fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005154  00000000  00000000  000f9150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000ec 	.word	0x200000ec
 8000128:	00000000 	.word	0x00000000
 800012c:	08005dfc 	.word	0x08005dfc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000f0 	.word	0x200000f0
 8000148:	08005dfc 	.word	0x08005dfc

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <isButton1Pressed>:
int button1_pressed[NUM_BUTTONS] = {0};
int button1_long_pressed[NUM_BUTTONS] = {0};
int button1_flag[NUM_BUTTONS] = {0};


int isButton1Pressed(int index){
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	if(index >= NUM_BUTTONS) return 0;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2b03      	cmp	r3, #3
 800017c:	dd01      	ble.n	8000182 <isButton1Pressed+0x12>
 800017e:	2300      	movs	r3, #0
 8000180:	e00d      	b.n	800019e <isButton1Pressed+0x2e>
	if(button1_flag[index] == 1){
 8000182:	4a09      	ldr	r2, [pc, #36]	; (80001a8 <isButton1Pressed+0x38>)
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800018a:	2b01      	cmp	r3, #1
 800018c:	d106      	bne.n	800019c <isButton1Pressed+0x2c>
		button1_flag[index] = 0;
 800018e:	4a06      	ldr	r2, [pc, #24]	; (80001a8 <isButton1Pressed+0x38>)
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	2100      	movs	r1, #0
 8000194:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000198:	2301      	movs	r3, #1
 800019a:	e000      	b.n	800019e <isButton1Pressed+0x2e>
	}
	return 0;
 800019c:	2300      	movs	r3, #0
}
 800019e:	4618      	mov	r0, r3
 80001a0:	370c      	adds	r7, #12
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr
 80001a8:	20000108 	.word	0x20000108

080001ac <subKeyProcess>:
		return 1;
	}
	return 0;
}

void subKeyProcess(int index){
 80001ac:	b480      	push	{r7}
 80001ae:	b083      	sub	sp, #12
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
	button1_flag[index] = 1;
 80001b4:	4a04      	ldr	r2, [pc, #16]	; (80001c8 <subKeyProcess+0x1c>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2101      	movs	r1, #1
 80001ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80001be:	bf00      	nop
 80001c0:	370c      	adds	r7, #12
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr
 80001c8:	20000108 	.word	0x20000108

080001cc <getKeyInput>:

void getKeyInput(){
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
	for( int i = 0 ; i < NUM_BUTTONS ; i++)
 80001d2:	2300      	movs	r3, #0
 80001d4:	607b      	str	r3, [r7, #4]
 80001d6:	e084      	b.n	80002e2 <getKeyInput+0x116>
	{
		KeyReg0[i] = KeyReg1[i];
 80001d8:	4a46      	ldr	r2, [pc, #280]	; (80002f4 <getKeyInput+0x128>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e0:	4945      	ldr	r1, [pc, #276]	; (80002f8 <getKeyInput+0x12c>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80001e8:	4a44      	ldr	r2, [pc, #272]	; (80002fc <getKeyInput+0x130>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f0:	4940      	ldr	r1, [pc, #256]	; (80002f4 <getKeyInput+0x128>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		// Add your key
		if(i == 3){
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2b03      	cmp	r3, #3
 80001fc:	d10e      	bne.n	800021c <getKeyInput+0x50>
			KeyReg2[i] = HAL_GPIO_ReadPin(GPIOC, BUTTON[i]);
 80001fe:	4a40      	ldr	r2, [pc, #256]	; (8000300 <getKeyInput+0x134>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000206:	4619      	mov	r1, r3
 8000208:	483e      	ldr	r0, [pc, #248]	; (8000304 <getKeyInput+0x138>)
 800020a:	f001 ffd7 	bl	80021bc <HAL_GPIO_ReadPin>
 800020e:	4603      	mov	r3, r0
 8000210:	4619      	mov	r1, r3
 8000212:	4a3a      	ldr	r2, [pc, #232]	; (80002fc <getKeyInput+0x130>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800021a:	e00d      	b.n	8000238 <getKeyInput+0x6c>
		}
		else{
			KeyReg2[i] = HAL_GPIO_ReadPin(GPIOB, BUTTON[i]);
 800021c:	4a38      	ldr	r2, [pc, #224]	; (8000300 <getKeyInput+0x134>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000224:	4619      	mov	r1, r3
 8000226:	4838      	ldr	r0, [pc, #224]	; (8000308 <getKeyInput+0x13c>)
 8000228:	f001 ffc8 	bl	80021bc <HAL_GPIO_ReadPin>
 800022c:	4603      	mov	r3, r0
 800022e:	4619      	mov	r1, r3
 8000230:	4a32      	ldr	r2, [pc, #200]	; (80002fc <getKeyInput+0x130>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}


		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000238:	4a2e      	ldr	r2, [pc, #184]	; (80002f4 <getKeyInput+0x128>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000240:	492d      	ldr	r1, [pc, #180]	; (80002f8 <getKeyInput+0x12c>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000248:	429a      	cmp	r2, r3
 800024a:	d147      	bne.n	80002dc <getKeyInput+0x110>
 800024c:	4a29      	ldr	r2, [pc, #164]	; (80002f4 <getKeyInput+0x128>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000254:	4929      	ldr	r1, [pc, #164]	; (80002fc <getKeyInput+0x130>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800025c:	429a      	cmp	r2, r3
 800025e:	d13d      	bne.n	80002dc <getKeyInput+0x110>
		    if (KeyReg2[i] != KeyReg3[i]){
 8000260:	4a26      	ldr	r2, [pc, #152]	; (80002fc <getKeyInput+0x130>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000268:	4928      	ldr	r1, [pc, #160]	; (800030c <getKeyInput+0x140>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000270:	429a      	cmp	r2, r3
 8000272:	d016      	beq.n	80002a2 <getKeyInput+0xd6>
		      KeyReg3[i] = KeyReg2[i];
 8000274:	4a21      	ldr	r2, [pc, #132]	; (80002fc <getKeyInput+0x130>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800027c:	4923      	ldr	r1, [pc, #140]	; (800030c <getKeyInput+0x140>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		      if (KeyReg2[i] == PRESSED_STATE){
 8000284:	4a1d      	ldr	r2, [pc, #116]	; (80002fc <getKeyInput+0x130>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d125      	bne.n	80002dc <getKeyInput+0x110>
		    	  TimeOutForKeyPress[i] = 200;
 8000290:	4a1f      	ldr	r2, [pc, #124]	; (8000310 <getKeyInput+0x144>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	21c8      	movs	r1, #200	; 0xc8
 8000296:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		    	  subKeyProcess(i);
 800029a:	6878      	ldr	r0, [r7, #4]
 800029c:	f7ff ff86 	bl	80001ac <subKeyProcess>
 80002a0:	e01c      	b.n	80002dc <getKeyInput+0x110>
		      }

		    }else{
		        TimeOutForKeyPress[i] --;
 80002a2:	4a1b      	ldr	r2, [pc, #108]	; (8000310 <getKeyInput+0x144>)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002aa:	1e5a      	subs	r2, r3, #1
 80002ac:	4918      	ldr	r1, [pc, #96]	; (8000310 <getKeyInput+0x144>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		        if (TimeOutForKeyPress[i] == 0){
 80002b4:	4a16      	ldr	r2, [pc, #88]	; (8000310 <getKeyInput+0x144>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d10d      	bne.n	80002dc <getKeyInput+0x110>
		        	TimeOutForKeyPress[i] = 200;
 80002c0:	4a13      	ldr	r2, [pc, #76]	; (8000310 <getKeyInput+0x144>)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	21c8      	movs	r1, #200	; 0xc8
 80002c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		        	if (KeyReg2[i] == PRESSED_STATE){
 80002ca:	4a0c      	ldr	r2, [pc, #48]	; (80002fc <getKeyInput+0x130>)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d102      	bne.n	80002dc <getKeyInput+0x110>
		        		subKeyProcess(i);
 80002d6:	6878      	ldr	r0, [r7, #4]
 80002d8:	f7ff ff68 	bl	80001ac <subKeyProcess>
	for( int i = 0 ; i < NUM_BUTTONS ; i++)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	3301      	adds	r3, #1
 80002e0:	607b      	str	r3, [r7, #4]
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2b03      	cmp	r3, #3
 80002e6:	f77f af77 	ble.w	80001d8 <getKeyInput+0xc>
		        	}
		        }
		    }
		}
	}
}
 80002ea:	bf00      	nop
 80002ec:	bf00      	nop
 80002ee:	3708      	adds	r7, #8
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	20000010 	.word	0x20000010
 80002f8:	20000000 	.word	0x20000000
 80002fc:	20000020 	.word	0x20000020
 8000300:	20000050 	.word	0x20000050
 8000304:	40011000 	.word	0x40011000
 8000308:	40010c00 	.word	0x40010c00
 800030c:	20000030 	.word	0x20000030
 8000310:	20000040 	.word	0x20000040

08000314 <updateClockBuffer>:

int led_buffer[4] = {1, 2, 3, 4};
char res_str[10];


void updateClockBuffer(int lane_1, int lane_2){
 8000314:	b580      	push	{r7, lr}
 8000316:	b086      	sub	sp, #24
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
 800031c:	6039      	str	r1, [r7, #0]
	if(status0 != INIT_BUTTON){
 800031e:	4b26      	ldr	r3, [pc, #152]	; (80003b8 <updateClockBuffer+0xa4>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d01e      	beq.n	8000364 <updateClockBuffer+0x50>
		int tam_1 = lane_1;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	617b      	str	r3, [r7, #20]
		int tam_2 = lane_2;
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	613b      	str	r3, [r7, #16]
		lcd_send_cmd (0x80);
 800032e:	2080      	movs	r0, #128	; 0x80
 8000330:	f000 fb8a 	bl	8000a48 <lcd_send_cmd>
		lcd_goto_XY(1,0);
 8000334:	2100      	movs	r1, #0
 8000336:	2001      	movs	r0, #1
 8000338:	f000 fc30 	bl	8000b9c <lcd_goto_XY>
		sprintf(res_str, "%d", tam_1);
 800033c:	697a      	ldr	r2, [r7, #20]
 800033e:	491f      	ldr	r1, [pc, #124]	; (80003bc <updateClockBuffer+0xa8>)
 8000340:	481f      	ldr	r0, [pc, #124]	; (80003c0 <updateClockBuffer+0xac>)
 8000342:	f004 fabf 	bl	80048c4 <siprintf>
		lcd_send_string(res_str);
 8000346:	481e      	ldr	r0, [pc, #120]	; (80003c0 <updateClockBuffer+0xac>)
 8000348:	f000 fc0c 	bl	8000b64 <lcd_send_string>
		lcd_goto_XY(0,0);
 800034c:	2100      	movs	r1, #0
 800034e:	2000      	movs	r0, #0
 8000350:	f000 fc24 	bl	8000b9c <lcd_goto_XY>
		sprintf(res_str, "%d", tam_2);
 8000354:	693a      	ldr	r2, [r7, #16]
 8000356:	4919      	ldr	r1, [pc, #100]	; (80003bc <updateClockBuffer+0xa8>)
 8000358:	4819      	ldr	r0, [pc, #100]	; (80003c0 <updateClockBuffer+0xac>)
 800035a:	f004 fab3 	bl	80048c4 <siprintf>
		lcd_send_string(res_str);
 800035e:	4818      	ldr	r0, [pc, #96]	; (80003c0 <updateClockBuffer+0xac>)
 8000360:	f000 fc00 	bl	8000b64 <lcd_send_string>
	}

	if(status0 == MODE1){
 8000364:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <updateClockBuffer+0xa4>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2b0b      	cmp	r3, #11
 800036a:	d120      	bne.n	80003ae <updateClockBuffer+0x9a>
//		lcd_init();
		lcd_clear_display();
 800036c:	f000 fc0f 	bl	8000b8e <lcd_clear_display>
		int tam_1 = lane_1;
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	60fb      	str	r3, [r7, #12]
		int tam_2 = lane_2;
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	60bb      	str	r3, [r7, #8]
		lcd_send_cmd (0x80);
 8000378:	2080      	movs	r0, #128	; 0x80
 800037a:	f000 fb65 	bl	8000a48 <lcd_send_cmd>
		lcd_goto_XY(1,0);
 800037e:	2100      	movs	r1, #0
 8000380:	2001      	movs	r0, #1
 8000382:	f000 fc0b 	bl	8000b9c <lcd_goto_XY>
		sprintf(res_str, "%d", tam_1);
 8000386:	68fa      	ldr	r2, [r7, #12]
 8000388:	490c      	ldr	r1, [pc, #48]	; (80003bc <updateClockBuffer+0xa8>)
 800038a:	480d      	ldr	r0, [pc, #52]	; (80003c0 <updateClockBuffer+0xac>)
 800038c:	f004 fa9a 	bl	80048c4 <siprintf>
		lcd_send_string(res_str);
 8000390:	480b      	ldr	r0, [pc, #44]	; (80003c0 <updateClockBuffer+0xac>)
 8000392:	f000 fbe7 	bl	8000b64 <lcd_send_string>
		lcd_goto_XY(0,0);
 8000396:	2100      	movs	r1, #0
 8000398:	2000      	movs	r0, #0
 800039a:	f000 fbff 	bl	8000b9c <lcd_goto_XY>
		sprintf(res_str, "%d", tam_2);
 800039e:	68ba      	ldr	r2, [r7, #8]
 80003a0:	4906      	ldr	r1, [pc, #24]	; (80003bc <updateClockBuffer+0xa8>)
 80003a2:	4807      	ldr	r0, [pc, #28]	; (80003c0 <updateClockBuffer+0xac>)
 80003a4:	f004 fa8e 	bl	80048c4 <siprintf>
		lcd_send_string(res_str);
 80003a8:	4805      	ldr	r0, [pc, #20]	; (80003c0 <updateClockBuffer+0xac>)
 80003aa:	f000 fbdb 	bl	8000b64 <lcd_send_string>
	}
}
 80003ae:	bf00      	nop
 80003b0:	3718      	adds	r7, #24
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	2000011c 	.word	0x2000011c
 80003bc:	08005e14 	.word	0x08005e14
 80003c0:	20000148 	.word	0x20000148

080003c4 <clearAll>:


void clearAll(){
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
	lcd_clear_display();
 80003c8:	f000 fbe1 	bl	8000b8e <lcd_clear_display>
	HAL_GPIO_WritePin(LED1_3_GPIO_Port, LED1_3_Pin, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2108      	movs	r1, #8
 80003d0:	480a      	ldr	r0, [pc, #40]	; (80003fc <clearAll+0x38>)
 80003d2:	f001 ff0a 	bl	80021ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_5_GPIO_Port, LED1_5_Pin, GPIO_PIN_RESET);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2120      	movs	r1, #32
 80003da:	4808      	ldr	r0, [pc, #32]	; (80003fc <clearAll+0x38>)
 80003dc:	f001 ff05 	bl	80021ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_9_GPIO_Port, LED4_9_Pin, GPIO_PIN_RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003e6:	4806      	ldr	r0, [pc, #24]	; (8000400 <clearAll+0x3c>)
 80003e8:	f001 feff 	bl	80021ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_8_GPIO_Port, LED4_8_Pin, GPIO_PIN_RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f2:	4803      	ldr	r0, [pc, #12]	; (8000400 <clearAll+0x3c>)
 80003f4:	f001 fef9 	bl	80021ea <HAL_GPIO_WritePin>
}
 80003f8:	bf00      	nop
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	40010c00 	.word	0x40010c00
 8000400:	40010800 	.word	0x40010800

08000404 <fsm_automatic_run>:
 */

#include"fsm_automatic.h"


void fsm_automatic_run(){
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	fsm_automatic_traffic_light();
 8000408:	f001 fa08 	bl	800181c <fsm_automatic_traffic_light>
	fsm_automatic_run_segmen();
 800040c:	f000 faec 	bl	80009e8 <fsm_automatic_run_segmen>
//	updateLed();
}
 8000410:	bf00      	nop
 8000412:	bd80      	pop	{r7, pc}

08000414 <fsm_manual_run>:
 *      Author: vinhn
 */

#include"fsm_manual.h"

void fsm_manual_run(){
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
	switch(status0){
 8000418:	4bbc      	ldr	r3, [pc, #752]	; (800070c <fsm_manual_run+0x2f8>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	2b11      	cmp	r3, #17
 800041e:	f200 81c5 	bhi.w	80007ac <fsm_manual_run+0x398>
 8000422:	a201      	add	r2, pc, #4	; (adr r2, 8000428 <fsm_manual_run+0x14>)
 8000424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000428:	08000471 	.word	0x08000471
 800042c:	080007ad 	.word	0x080007ad
 8000430:	080007ad 	.word	0x080007ad
 8000434:	080007ad 	.word	0x080007ad
 8000438:	080007ad 	.word	0x080007ad
 800043c:	080007ad 	.word	0x080007ad
 8000440:	080007ad 	.word	0x080007ad
 8000444:	080007ad 	.word	0x080007ad
 8000448:	080007ad 	.word	0x080007ad
 800044c:	080007ad 	.word	0x080007ad
 8000450:	080007ad 	.word	0x080007ad
 8000454:	080004e9 	.word	0x080004e9
 8000458:	0800050d 	.word	0x0800050d
 800045c:	08000567 	.word	0x08000567
 8000460:	080005dd 	.word	0x080005dd
 8000464:	08000637 	.word	0x08000637
 8000468:	080006ad 	.word	0x080006ad
 800046c:	08000739 	.word	0x08000739
		case INIT_BUTTON:
			lcd_send_cmd (0x80);
 8000470:	2080      	movs	r0, #128	; 0x80
 8000472:	f000 fae9 	bl	8000a48 <lcd_send_cmd>
			lcd_goto_XY(1,4);
 8000476:	2104      	movs	r1, #4
 8000478:	2001      	movs	r0, #1
 800047a:	f000 fb8f 	bl	8000b9c <lcd_goto_XY>
			lcd_send_string("Hello guy");
 800047e:	48a4      	ldr	r0, [pc, #656]	; (8000710 <fsm_manual_run+0x2fc>)
 8000480:	f000 fb70 	bl	8000b64 <lcd_send_string>
			if(isButton1Pressed(0) == 1){
 8000484:	2000      	movs	r0, #0
 8000486:	f7ff fe73 	bl	8000170 <isButton1Pressed>
 800048a:	4603      	mov	r3, r0
 800048c:	2b01      	cmp	r3, #1
 800048e:	f040 818f 	bne.w	80007b0 <fsm_manual_run+0x39c>
				  setTimer0(3, 1010);
 8000492:	f240 31f2 	movw	r1, #1010	; 0x3f2
 8000496:	2003      	movs	r0, #3
 8000498:	f000 fec2 	bl	8001220 <setTimer0>
				  setTimer0(2, 10);
 800049c:	210a      	movs	r1, #10
 800049e:	2002      	movs	r0, #2
 80004a0:	f000 febe 	bl	8001220 <setTimer0>
				  setTimer0(1, 1010);
 80004a4:	f240 31f2 	movw	r1, #1010	; 0x3f2
 80004a8:	2001      	movs	r0, #1
 80004aa:	f000 feb9 	bl	8001220 <setTimer0>
				  setTimer0(0, 1010);
 80004ae:	f240 31f2 	movw	r1, #1010	; 0x3f2
 80004b2:	2000      	movs	r0, #0
 80004b4:	f000 feb4 	bl	8001220 <setTimer0>
				  status1 = INIT_LED;
 80004b8:	4b96      	ldr	r3, [pc, #600]	; (8000714 <fsm_manual_run+0x300>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
				  status2 = INIT_LED;
 80004be:	4b96      	ldr	r3, [pc, #600]	; (8000718 <fsm_manual_run+0x304>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
				  status0 = MODE1;
 80004c4:	4b91      	ldr	r3, [pc, #580]	; (800070c <fsm_manual_run+0x2f8>)
 80004c6:	220b      	movs	r2, #11
 80004c8:	601a      	str	r2, [r3, #0]
				  status3 = INIT_LED;
 80004ca:	4b94      	ldr	r3, [pc, #592]	; (800071c <fsm_manual_run+0x308>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
				  status4 = INIT_LED;
 80004d0:	4b93      	ldr	r3, [pc, #588]	; (8000720 <fsm_manual_run+0x30c>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
				  time_lane1 = MODE1 % 10;
 80004d6:	4b93      	ldr	r3, [pc, #588]	; (8000724 <fsm_manual_run+0x310>)
 80004d8:	2201      	movs	r2, #1
 80004da:	601a      	str	r2, [r3, #0]
				  time_lane2 = 0;
 80004dc:	4b92      	ldr	r3, [pc, #584]	; (8000728 <fsm_manual_run+0x314>)
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
				  clearAll();
 80004e2:	f7ff ff6f 	bl	80003c4 <clearAll>
			}

			break;
 80004e6:	e163      	b.n	80007b0 <fsm_manual_run+0x39c>
		case MODE1:
			updateLed();
 80004e8:	f000 fa90 	bl	8000a0c <updateLed>
			if(isButton1Pressed(0) == 1){
 80004ec:	2000      	movs	r0, #0
 80004ee:	f7ff fe3f 	bl	8000170 <isButton1Pressed>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	f040 815d 	bne.w	80007b4 <fsm_manual_run+0x3a0>
				time_mid = 1;
 80004fa:	4b8c      	ldr	r3, [pc, #560]	; (800072c <fsm_manual_run+0x318>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	601a      	str	r2, [r3, #0]
				status0 = MODE2;
 8000500:	4b82      	ldr	r3, [pc, #520]	; (800070c <fsm_manual_run+0x2f8>)
 8000502:	220c      	movs	r2, #12
 8000504:	601a      	str	r2, [r3, #0]
				clearAll();
 8000506:	f7ff ff5d 	bl	80003c4 <clearAll>
			}

			break;
 800050a:	e153      	b.n	80007b4 <fsm_manual_run+0x3a0>
		case MODE2:
			traffic_light1(AUTO_RED1);
 800050c:	2001      	movs	r0, #1
 800050e:	f001 f8e9 	bl	80016e4 <traffic_light1>
			traffic_light2(AUTO_RED2);
 8000512:	2005      	movs	r0, #5
 8000514:	f001 f92c 	bl	8001770 <traffic_light2>
			time_lane1 = MODE2 % 10;
 8000518:	4b82      	ldr	r3, [pc, #520]	; (8000724 <fsm_manual_run+0x310>)
 800051a:	2202      	movs	r2, #2
 800051c:	601a      	str	r2, [r3, #0]
			time_lane2 = time_mid;
 800051e:	4b83      	ldr	r3, [pc, #524]	; (800072c <fsm_manual_run+0x318>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a81      	ldr	r2, [pc, #516]	; (8000728 <fsm_manual_run+0x314>)
 8000524:	6013      	str	r3, [r2, #0]
			updateLed();
 8000526:	f000 fa71 	bl	8000a0c <updateLed>
			if(isButton1Pressed(0) == 1){
 800052a:	2000      	movs	r0, #0
 800052c:	f7ff fe20 	bl	8000170 <isButton1Pressed>
 8000530:	4603      	mov	r3, r0
 8000532:	2b01      	cmp	r3, #1
 8000534:	d107      	bne.n	8000546 <fsm_manual_run+0x132>
				time_mid = 1;
 8000536:	4b7d      	ldr	r3, [pc, #500]	; (800072c <fsm_manual_run+0x318>)
 8000538:	2201      	movs	r2, #1
 800053a:	601a      	str	r2, [r3, #0]
				status0 = MODE3;
 800053c:	4b73      	ldr	r3, [pc, #460]	; (800070c <fsm_manual_run+0x2f8>)
 800053e:	220e      	movs	r2, #14
 8000540:	601a      	str	r2, [r3, #0]
				clearAll();
 8000542:	f7ff ff3f 	bl	80003c4 <clearAll>
			}

			//increase time value of red led
			if(isButton1Pressed(3) == 1){
 8000546:	2003      	movs	r0, #3
 8000548:	f7ff fe12 	bl	8000170 <isButton1Pressed>
 800054c:	4603      	mov	r3, r0
 800054e:	2b01      	cmp	r3, #1
 8000550:	f040 8132 	bne.w	80007b8 <fsm_manual_run+0x3a4>
				time_mid = 1;
 8000554:	4b75      	ldr	r3, [pc, #468]	; (800072c <fsm_manual_run+0x318>)
 8000556:	2201      	movs	r2, #1
 8000558:	601a      	str	r2, [r3, #0]
				status0 = MODE21;
 800055a:	4b6c      	ldr	r3, [pc, #432]	; (800070c <fsm_manual_run+0x2f8>)
 800055c:	220d      	movs	r2, #13
 800055e:	601a      	str	r2, [r3, #0]
				clearAll();
 8000560:	f7ff ff30 	bl	80003c4 <clearAll>
//
//						//confirm time value of red led
//			if(isButton1Pressed(2) == 1){
//				//	Ban dang o che do dieu khien tu dong, lam on chuyen sang che do set up thoi gian
//			}
			break;
 8000564:	e128      	b.n	80007b8 <fsm_manual_run+0x3a4>
		case MODE21:
			traffic_light1(AUTO_RED1);
 8000566:	2001      	movs	r0, #1
 8000568:	f001 f8bc 	bl	80016e4 <traffic_light1>
			traffic_light2(AUTO_RED2);
 800056c:	2005      	movs	r0, #5
 800056e:	f001 f8ff 	bl	8001770 <traffic_light2>
			time_lane1 = MODE21 % 10;
 8000572:	4b6c      	ldr	r3, [pc, #432]	; (8000724 <fsm_manual_run+0x310>)
 8000574:	2203      	movs	r2, #3
 8000576:	601a      	str	r2, [r3, #0]
			time_lane2 = time_mid;
 8000578:	4b6c      	ldr	r3, [pc, #432]	; (800072c <fsm_manual_run+0x318>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a6a      	ldr	r2, [pc, #424]	; (8000728 <fsm_manual_run+0x314>)
 800057e:	6013      	str	r3, [r2, #0]
			updateLed();
 8000580:	f000 fa44 	bl	8000a0c <updateLed>
			//increase time value of red led
			if(isButton1Pressed(1) == 1){
 8000584:	2001      	movs	r0, #1
 8000586:	f7ff fdf3 	bl	8000170 <isButton1Pressed>
 800058a:	4603      	mov	r3, r0
 800058c:	2b01      	cmp	r3, #1
 800058e:	d10d      	bne.n	80005ac <fsm_manual_run+0x198>
				time_mid = time_mid + 1;
 8000590:	4b66      	ldr	r3, [pc, #408]	; (800072c <fsm_manual_run+0x318>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	3301      	adds	r3, #1
 8000596:	4a65      	ldr	r2, [pc, #404]	; (800072c <fsm_manual_run+0x318>)
 8000598:	6013      	str	r3, [r2, #0]
				if( time_mid >= 100 ){
 800059a:	4b64      	ldr	r3, [pc, #400]	; (800072c <fsm_manual_run+0x318>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	2b63      	cmp	r3, #99	; 0x63
 80005a0:	dd04      	ble.n	80005ac <fsm_manual_run+0x198>
					time_mid = 1;
 80005a2:	4b62      	ldr	r3, [pc, #392]	; (800072c <fsm_manual_run+0x318>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	601a      	str	r2, [r3, #0]
					clearAll();
 80005a8:	f7ff ff0c 	bl	80003c4 <clearAll>
				}
			}

			//confirm time value of red led
			if(isButton1Pressed(2) == 1){
 80005ac:	2002      	movs	r0, #2
 80005ae:	f7ff fddf 	bl	8000170 <isButton1Pressed>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	f040 8101 	bne.w	80007bc <fsm_manual_run+0x3a8>
				TIME_RED = time_mid * 1000;
 80005ba:	4b5c      	ldr	r3, [pc, #368]	; (800072c <fsm_manual_run+0x318>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005c2:	fb02 f303 	mul.w	r3, r2, r3
 80005c6:	4a5a      	ldr	r2, [pc, #360]	; (8000730 <fsm_manual_run+0x31c>)
 80005c8:	6013      	str	r3, [r2, #0]
				time_mid = 1;
 80005ca:	4b58      	ldr	r3, [pc, #352]	; (800072c <fsm_manual_run+0x318>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	601a      	str	r2, [r3, #0]
				clearAll();
 80005d0:	f7ff fef8 	bl	80003c4 <clearAll>
				status0 = MODE2;
 80005d4:	4b4d      	ldr	r3, [pc, #308]	; (800070c <fsm_manual_run+0x2f8>)
 80005d6:	220c      	movs	r2, #12
 80005d8:	601a      	str	r2, [r3, #0]
			}
			break;
 80005da:	e0ef      	b.n	80007bc <fsm_manual_run+0x3a8>
		case MODE3:
			traffic_light1(AUTO_AMBER1);
 80005dc:	2003      	movs	r0, #3
 80005de:	f001 f881 	bl	80016e4 <traffic_light1>
			traffic_light2(AUTO_AMBER2);
 80005e2:	2007      	movs	r0, #7
 80005e4:	f001 f8c4 	bl	8001770 <traffic_light2>
			time_lane1 = MODE3 % 10;
 80005e8:	4b4e      	ldr	r3, [pc, #312]	; (8000724 <fsm_manual_run+0x310>)
 80005ea:	2204      	movs	r2, #4
 80005ec:	601a      	str	r2, [r3, #0]
			time_lane2 = time_mid;
 80005ee:	4b4f      	ldr	r3, [pc, #316]	; (800072c <fsm_manual_run+0x318>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a4d      	ldr	r2, [pc, #308]	; (8000728 <fsm_manual_run+0x314>)
 80005f4:	6013      	str	r3, [r2, #0]
			updateLed();
 80005f6:	f000 fa09 	bl	8000a0c <updateLed>
			if(isButton1Pressed(0) == 1){
 80005fa:	2000      	movs	r0, #0
 80005fc:	f7ff fdb8 	bl	8000170 <isButton1Pressed>
 8000600:	4603      	mov	r3, r0
 8000602:	2b01      	cmp	r3, #1
 8000604:	d107      	bne.n	8000616 <fsm_manual_run+0x202>
				time_mid = 1;
 8000606:	4b49      	ldr	r3, [pc, #292]	; (800072c <fsm_manual_run+0x318>)
 8000608:	2201      	movs	r2, #1
 800060a:	601a      	str	r2, [r3, #0]
				status0 = MODE4;
 800060c:	4b3f      	ldr	r3, [pc, #252]	; (800070c <fsm_manual_run+0x2f8>)
 800060e:	2210      	movs	r2, #16
 8000610:	601a      	str	r2, [r3, #0]
				clearAll();
 8000612:	f7ff fed7 	bl	80003c4 <clearAll>
			}

			//increase time value of amber led
			if(isButton1Pressed(3) == 1){
 8000616:	2003      	movs	r0, #3
 8000618:	f7ff fdaa 	bl	8000170 <isButton1Pressed>
 800061c:	4603      	mov	r3, r0
 800061e:	2b01      	cmp	r3, #1
 8000620:	f040 80ce 	bne.w	80007c0 <fsm_manual_run+0x3ac>
				time_mid = 1;
 8000624:	4b41      	ldr	r3, [pc, #260]	; (800072c <fsm_manual_run+0x318>)
 8000626:	2201      	movs	r2, #1
 8000628:	601a      	str	r2, [r3, #0]
				status0 = MODE31;
 800062a:	4b38      	ldr	r3, [pc, #224]	; (800070c <fsm_manual_run+0x2f8>)
 800062c:	220f      	movs	r2, #15
 800062e:	601a      	str	r2, [r3, #0]
				clearAll();
 8000630:	f7ff fec8 	bl	80003c4 <clearAll>
			//						//confirm time value of red led
			//			if(isButton1Pressed(2) == 1){
			//				//	Ban dang o che do dieu khien tu dong, lam on chuyen sang che do set up thoi gian
			//			}
			//			break;
			break;
 8000634:	e0c4      	b.n	80007c0 <fsm_manual_run+0x3ac>
		case MODE31:
			traffic_light1(AUTO_AMBER1);
 8000636:	2003      	movs	r0, #3
 8000638:	f001 f854 	bl	80016e4 <traffic_light1>
			traffic_light2(AUTO_AMBER2);
 800063c:	2007      	movs	r0, #7
 800063e:	f001 f897 	bl	8001770 <traffic_light2>
			time_lane1 = MODE31 % 10;
 8000642:	4b38      	ldr	r3, [pc, #224]	; (8000724 <fsm_manual_run+0x310>)
 8000644:	2205      	movs	r2, #5
 8000646:	601a      	str	r2, [r3, #0]
			time_lane2 = time_mid;
 8000648:	4b38      	ldr	r3, [pc, #224]	; (800072c <fsm_manual_run+0x318>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a36      	ldr	r2, [pc, #216]	; (8000728 <fsm_manual_run+0x314>)
 800064e:	6013      	str	r3, [r2, #0]
			updateLed();
 8000650:	f000 f9dc 	bl	8000a0c <updateLed>
			//increase time value of red led
			if(isButton1Pressed(1) == 1){
 8000654:	2001      	movs	r0, #1
 8000656:	f7ff fd8b 	bl	8000170 <isButton1Pressed>
 800065a:	4603      	mov	r3, r0
 800065c:	2b01      	cmp	r3, #1
 800065e:	d10d      	bne.n	800067c <fsm_manual_run+0x268>
				time_mid = time_mid + 1;
 8000660:	4b32      	ldr	r3, [pc, #200]	; (800072c <fsm_manual_run+0x318>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	3301      	adds	r3, #1
 8000666:	4a31      	ldr	r2, [pc, #196]	; (800072c <fsm_manual_run+0x318>)
 8000668:	6013      	str	r3, [r2, #0]
				if( time_mid >= 100 ){
 800066a:	4b30      	ldr	r3, [pc, #192]	; (800072c <fsm_manual_run+0x318>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2b63      	cmp	r3, #99	; 0x63
 8000670:	dd04      	ble.n	800067c <fsm_manual_run+0x268>
					time_mid = 1;
 8000672:	4b2e      	ldr	r3, [pc, #184]	; (800072c <fsm_manual_run+0x318>)
 8000674:	2201      	movs	r2, #1
 8000676:	601a      	str	r2, [r3, #0]
					clearAll();
 8000678:	f7ff fea4 	bl	80003c4 <clearAll>
				}
			}

					//confirm time value of red led
			if(isButton1Pressed(2) == 1){
 800067c:	2002      	movs	r0, #2
 800067e:	f7ff fd77 	bl	8000170 <isButton1Pressed>
 8000682:	4603      	mov	r3, r0
 8000684:	2b01      	cmp	r3, #1
 8000686:	f040 809d 	bne.w	80007c4 <fsm_manual_run+0x3b0>
				TIME_YELLOW = time_mid * 1000;
 800068a:	4b28      	ldr	r3, [pc, #160]	; (800072c <fsm_manual_run+0x318>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000692:	fb02 f303 	mul.w	r3, r2, r3
 8000696:	4a27      	ldr	r2, [pc, #156]	; (8000734 <fsm_manual_run+0x320>)
 8000698:	6013      	str	r3, [r2, #0]
				time_mid = 1;
 800069a:	4b24      	ldr	r3, [pc, #144]	; (800072c <fsm_manual_run+0x318>)
 800069c:	2201      	movs	r2, #1
 800069e:	601a      	str	r2, [r3, #0]
				clearAll();
 80006a0:	f7ff fe90 	bl	80003c4 <clearAll>
				status0 = MODE3;
 80006a4:	4b19      	ldr	r3, [pc, #100]	; (800070c <fsm_manual_run+0x2f8>)
 80006a6:	220e      	movs	r2, #14
 80006a8:	601a      	str	r2, [r3, #0]
			}
			break;
 80006aa:	e08b      	b.n	80007c4 <fsm_manual_run+0x3b0>
		case MODE4:
			traffic_light1(AUTO_GREEN1);
 80006ac:	2002      	movs	r0, #2
 80006ae:	f001 f819 	bl	80016e4 <traffic_light1>
			traffic_light2(AUTO_GREEN2);
 80006b2:	2006      	movs	r0, #6
 80006b4:	f001 f85c 	bl	8001770 <traffic_light2>
			time_lane1 = MODE4 % 10;
 80006b8:	4b1a      	ldr	r3, [pc, #104]	; (8000724 <fsm_manual_run+0x310>)
 80006ba:	2206      	movs	r2, #6
 80006bc:	601a      	str	r2, [r3, #0]
			time_lane2 = time_mid;
 80006be:	4b1b      	ldr	r3, [pc, #108]	; (800072c <fsm_manual_run+0x318>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a19      	ldr	r2, [pc, #100]	; (8000728 <fsm_manual_run+0x314>)
 80006c4:	6013      	str	r3, [r2, #0]
			updateLed();
 80006c6:	f000 f9a1 	bl	8000a0c <updateLed>
			if(isButton1Pressed(0) == 1){
 80006ca:	2000      	movs	r0, #0
 80006cc:	f7ff fd50 	bl	8000170 <isButton1Pressed>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d10a      	bne.n	80006ec <fsm_manual_run+0x2d8>
				time_mid = 1;
 80006d6:	4b15      	ldr	r3, [pc, #84]	; (800072c <fsm_manual_run+0x318>)
 80006d8:	2201      	movs	r2, #1
 80006da:	601a      	str	r2, [r3, #0]
				status0 = INIT_BUTTON;
 80006dc:	4b0b      	ldr	r3, [pc, #44]	; (800070c <fsm_manual_run+0x2f8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
				clearAll();
 80006e2:	f7ff fe6f 	bl	80003c4 <clearAll>
				lcd_send_cmd (0x02);
 80006e6:	2002      	movs	r0, #2
 80006e8:	f000 f9ae 	bl	8000a48 <lcd_send_cmd>
			}

			if(isButton1Pressed(3) == 1){
 80006ec:	2003      	movs	r0, #3
 80006ee:	f7ff fd3f 	bl	8000170 <isButton1Pressed>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d167      	bne.n	80007c8 <fsm_manual_run+0x3b4>
				time_mid = 1;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <fsm_manual_run+0x318>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	601a      	str	r2, [r3, #0]
				status0 = MODE41;
 80006fe:	4b03      	ldr	r3, [pc, #12]	; (800070c <fsm_manual_run+0x2f8>)
 8000700:	2211      	movs	r2, #17
 8000702:	601a      	str	r2, [r3, #0]
				clearAll();
 8000704:	f7ff fe5e 	bl	80003c4 <clearAll>
			//						//confirm time value of red led
			//			if(isButton1Pressed(2) == 1){
			//				//	Ban dang o che do dieu khien tu dong, lam on chuyen sang che do set up thoi gian
			//			}
			//			break;
			break;
 8000708:	e05e      	b.n	80007c8 <fsm_manual_run+0x3b4>
 800070a:	bf00      	nop
 800070c:	2000011c 	.word	0x2000011c
 8000710:	08005e18 	.word	0x08005e18
 8000714:	20000120 	.word	0x20000120
 8000718:	20000124 	.word	0x20000124
 800071c:	20000128 	.word	0x20000128
 8000720:	2000012c 	.word	0x2000012c
 8000724:	20000134 	.word	0x20000134
 8000728:	20000138 	.word	0x20000138
 800072c:	20000130 	.word	0x20000130
 8000730:	20000058 	.word	0x20000058
 8000734:	2000005c 	.word	0x2000005c
		case MODE41:
			traffic_light1(AUTO_GREEN1);
 8000738:	2002      	movs	r0, #2
 800073a:	f000 ffd3 	bl	80016e4 <traffic_light1>
			traffic_light2(AUTO_GREEN2);
 800073e:	2006      	movs	r0, #6
 8000740:	f001 f816 	bl	8001770 <traffic_light2>
			time_lane1 = MODE41 % 10;
 8000744:	4b23      	ldr	r3, [pc, #140]	; (80007d4 <fsm_manual_run+0x3c0>)
 8000746:	2207      	movs	r2, #7
 8000748:	601a      	str	r2, [r3, #0]
			time_lane2 = time_mid;
 800074a:	4b23      	ldr	r3, [pc, #140]	; (80007d8 <fsm_manual_run+0x3c4>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a23      	ldr	r2, [pc, #140]	; (80007dc <fsm_manual_run+0x3c8>)
 8000750:	6013      	str	r3, [r2, #0]
			updateLed();
 8000752:	f000 f95b 	bl	8000a0c <updateLed>
			//increase time value of red led
			if(isButton1Pressed(1) == 1){
 8000756:	2001      	movs	r0, #1
 8000758:	f7ff fd0a 	bl	8000170 <isButton1Pressed>
 800075c:	4603      	mov	r3, r0
 800075e:	2b01      	cmp	r3, #1
 8000760:	d10d      	bne.n	800077e <fsm_manual_run+0x36a>
				time_mid = time_mid + 1;
 8000762:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <fsm_manual_run+0x3c4>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	3301      	adds	r3, #1
 8000768:	4a1b      	ldr	r2, [pc, #108]	; (80007d8 <fsm_manual_run+0x3c4>)
 800076a:	6013      	str	r3, [r2, #0]
				if( time_mid >= 100 ){
 800076c:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <fsm_manual_run+0x3c4>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b63      	cmp	r3, #99	; 0x63
 8000772:	dd04      	ble.n	800077e <fsm_manual_run+0x36a>
					time_mid = 1;
 8000774:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <fsm_manual_run+0x3c4>)
 8000776:	2201      	movs	r2, #1
 8000778:	601a      	str	r2, [r3, #0]
					clearAll();
 800077a:	f7ff fe23 	bl	80003c4 <clearAll>
				}
			}

					//confirm time value of red led
			if(isButton1Pressed(2) == 1){
 800077e:	2002      	movs	r0, #2
 8000780:	f7ff fcf6 	bl	8000170 <isButton1Pressed>
 8000784:	4603      	mov	r3, r0
 8000786:	2b01      	cmp	r3, #1
 8000788:	d120      	bne.n	80007cc <fsm_manual_run+0x3b8>
				TIME_GREEN = time_mid * 1000;
 800078a:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <fsm_manual_run+0x3c4>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000792:	fb02 f303 	mul.w	r3, r2, r3
 8000796:	4a12      	ldr	r2, [pc, #72]	; (80007e0 <fsm_manual_run+0x3cc>)
 8000798:	6013      	str	r3, [r2, #0]
				time_mid = 1;
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <fsm_manual_run+0x3c4>)
 800079c:	2201      	movs	r2, #1
 800079e:	601a      	str	r2, [r3, #0]
				clearAll();
 80007a0:	f7ff fe10 	bl	80003c4 <clearAll>
				status0 = MODE4;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <fsm_manual_run+0x3d0>)
 80007a6:	2210      	movs	r2, #16
 80007a8:	601a      	str	r2, [r3, #0]
			}
			break;
 80007aa:	e00f      	b.n	80007cc <fsm_manual_run+0x3b8>
		default:
			break;
 80007ac:	bf00      	nop
 80007ae:	e00e      	b.n	80007ce <fsm_manual_run+0x3ba>
			break;
 80007b0:	bf00      	nop
 80007b2:	e00c      	b.n	80007ce <fsm_manual_run+0x3ba>
			break;
 80007b4:	bf00      	nop
 80007b6:	e00a      	b.n	80007ce <fsm_manual_run+0x3ba>
			break;
 80007b8:	bf00      	nop
 80007ba:	e008      	b.n	80007ce <fsm_manual_run+0x3ba>
			break;
 80007bc:	bf00      	nop
 80007be:	e006      	b.n	80007ce <fsm_manual_run+0x3ba>
			break;
 80007c0:	bf00      	nop
 80007c2:	e004      	b.n	80007ce <fsm_manual_run+0x3ba>
			break;
 80007c4:	bf00      	nop
 80007c6:	e002      	b.n	80007ce <fsm_manual_run+0x3ba>
			break;
 80007c8:	bf00      	nop
 80007ca:	e000      	b.n	80007ce <fsm_manual_run+0x3ba>
			break;
 80007cc:	bf00      	nop
	}
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000134 	.word	0x20000134
 80007d8:	20000130 	.word	0x20000130
 80007dc:	20000138 	.word	0x20000138
 80007e0:	20000060 	.word	0x20000060
 80007e4:	2000011c 	.word	0x2000011c

080007e8 <counter_7segmen2>:


// Function calculate time that display on lcd
#include "fsm_setting.h"

void counter_7segmen2(){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	if(status0 == MODE1){
 80007ec:	4b75      	ldr	r3, [pc, #468]	; (80009c4 <counter_7segmen2+0x1dc>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b0b      	cmp	r3, #11
 80007f2:	f040 80d4 	bne.w	800099e <counter_7segmen2+0x1b6>
		switch(status3){
 80007f6:	4b74      	ldr	r3, [pc, #464]	; (80009c8 <counter_7segmen2+0x1e0>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b03      	cmp	r3, #3
 80007fc:	d85d      	bhi.n	80008ba <counter_7segmen2+0xd2>
 80007fe:	a201      	add	r2, pc, #4	; (adr r2, 8000804 <counter_7segmen2+0x1c>)
 8000800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000804:	08000815 	.word	0x08000815
 8000808:	08000831 	.word	0x08000831
 800080c:	0800088d 	.word	0x0800088d
 8000810:	0800085f 	.word	0x0800085f
				case INIT_LED:
						time_lane1 = TIME_RED / 1000;
 8000814:	4b6d      	ldr	r3, [pc, #436]	; (80009cc <counter_7segmen2+0x1e4>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a6d      	ldr	r2, [pc, #436]	; (80009d0 <counter_7segmen2+0x1e8>)
 800081a:	fb82 1203 	smull	r1, r2, r2, r3
 800081e:	1192      	asrs	r2, r2, #6
 8000820:	17db      	asrs	r3, r3, #31
 8000822:	1ad3      	subs	r3, r2, r3
 8000824:	4a6b      	ldr	r2, [pc, #428]	; (80009d4 <counter_7segmen2+0x1ec>)
 8000826:	6013      	str	r3, [r2, #0]
						status3 = AUTO_RED1;
 8000828:	4b67      	ldr	r3, [pc, #412]	; (80009c8 <counter_7segmen2+0x1e0>)
 800082a:	2201      	movs	r2, #1
 800082c:	601a      	str	r2, [r3, #0]
					break;
 800082e:	e04b      	b.n	80008c8 <counter_7segmen2+0xe0>

				case AUTO_RED1:
						time_lane1--;
 8000830:	4b68      	ldr	r3, [pc, #416]	; (80009d4 <counter_7segmen2+0x1ec>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	3b01      	subs	r3, #1
 8000836:	4a67      	ldr	r2, [pc, #412]	; (80009d4 <counter_7segmen2+0x1ec>)
 8000838:	6013      	str	r3, [r2, #0]
						if (time_lane1 <= 0){
 800083a:	4b66      	ldr	r3, [pc, #408]	; (80009d4 <counter_7segmen2+0x1ec>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	dc3d      	bgt.n	80008be <counter_7segmen2+0xd6>
							time_lane1 = TIME_GREEN / 1000;
 8000842:	4b65      	ldr	r3, [pc, #404]	; (80009d8 <counter_7segmen2+0x1f0>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a62      	ldr	r2, [pc, #392]	; (80009d0 <counter_7segmen2+0x1e8>)
 8000848:	fb82 1203 	smull	r1, r2, r2, r3
 800084c:	1192      	asrs	r2, r2, #6
 800084e:	17db      	asrs	r3, r3, #31
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	4a60      	ldr	r2, [pc, #384]	; (80009d4 <counter_7segmen2+0x1ec>)
 8000854:	6013      	str	r3, [r2, #0]
							status3 = AUTO_GREEN1;
 8000856:	4b5c      	ldr	r3, [pc, #368]	; (80009c8 <counter_7segmen2+0x1e0>)
 8000858:	2202      	movs	r2, #2
 800085a:	601a      	str	r2, [r3, #0]
						}
					break;
 800085c:	e02f      	b.n	80008be <counter_7segmen2+0xd6>

				case AUTO_AMBER1:
						time_lane1--;
 800085e:	4b5d      	ldr	r3, [pc, #372]	; (80009d4 <counter_7segmen2+0x1ec>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	3b01      	subs	r3, #1
 8000864:	4a5b      	ldr	r2, [pc, #364]	; (80009d4 <counter_7segmen2+0x1ec>)
 8000866:	6013      	str	r3, [r2, #0]
						if (time_lane1 <= 0){
 8000868:	4b5a      	ldr	r3, [pc, #360]	; (80009d4 <counter_7segmen2+0x1ec>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	dc28      	bgt.n	80008c2 <counter_7segmen2+0xda>
							time_lane1 = TIME_RED / 1000;
 8000870:	4b56      	ldr	r3, [pc, #344]	; (80009cc <counter_7segmen2+0x1e4>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a56      	ldr	r2, [pc, #344]	; (80009d0 <counter_7segmen2+0x1e8>)
 8000876:	fb82 1203 	smull	r1, r2, r2, r3
 800087a:	1192      	asrs	r2, r2, #6
 800087c:	17db      	asrs	r3, r3, #31
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	4a54      	ldr	r2, [pc, #336]	; (80009d4 <counter_7segmen2+0x1ec>)
 8000882:	6013      	str	r3, [r2, #0]
							status3 = AUTO_RED1;
 8000884:	4b50      	ldr	r3, [pc, #320]	; (80009c8 <counter_7segmen2+0x1e0>)
 8000886:	2201      	movs	r2, #1
 8000888:	601a      	str	r2, [r3, #0]
						}
					break;
 800088a:	e01a      	b.n	80008c2 <counter_7segmen2+0xda>

				case AUTO_GREEN1:
						time_lane1--;
 800088c:	4b51      	ldr	r3, [pc, #324]	; (80009d4 <counter_7segmen2+0x1ec>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	3b01      	subs	r3, #1
 8000892:	4a50      	ldr	r2, [pc, #320]	; (80009d4 <counter_7segmen2+0x1ec>)
 8000894:	6013      	str	r3, [r2, #0]
						if (time_lane1 <= 0){
 8000896:	4b4f      	ldr	r3, [pc, #316]	; (80009d4 <counter_7segmen2+0x1ec>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	dc13      	bgt.n	80008c6 <counter_7segmen2+0xde>
							time_lane1 = TIME_YELLOW / 1000;
 800089e:	4b4f      	ldr	r3, [pc, #316]	; (80009dc <counter_7segmen2+0x1f4>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a4b      	ldr	r2, [pc, #300]	; (80009d0 <counter_7segmen2+0x1e8>)
 80008a4:	fb82 1203 	smull	r1, r2, r2, r3
 80008a8:	1192      	asrs	r2, r2, #6
 80008aa:	17db      	asrs	r3, r3, #31
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	4a49      	ldr	r2, [pc, #292]	; (80009d4 <counter_7segmen2+0x1ec>)
 80008b0:	6013      	str	r3, [r2, #0]
							status3 = AUTO_AMBER1;
 80008b2:	4b45      	ldr	r3, [pc, #276]	; (80009c8 <counter_7segmen2+0x1e0>)
 80008b4:	2203      	movs	r2, #3
 80008b6:	601a      	str	r2, [r3, #0]
						}
					break;
 80008b8:	e005      	b.n	80008c6 <counter_7segmen2+0xde>

				default:
					break;
 80008ba:	bf00      	nop
 80008bc:	e004      	b.n	80008c8 <counter_7segmen2+0xe0>
					break;
 80008be:	bf00      	nop
 80008c0:	e002      	b.n	80008c8 <counter_7segmen2+0xe0>
					break;
 80008c2:	bf00      	nop
 80008c4:	e000      	b.n	80008c8 <counter_7segmen2+0xe0>
					break;
 80008c6:	bf00      	nop
		}

		switch(status4){
 80008c8:	4b45      	ldr	r3, [pc, #276]	; (80009e0 <counter_7segmen2+0x1f8>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b07      	cmp	r3, #7
 80008ce:	d868      	bhi.n	80009a2 <counter_7segmen2+0x1ba>
 80008d0:	a201      	add	r2, pc, #4	; (adr r2, 80008d8 <counter_7segmen2+0xf0>)
 80008d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d6:	bf00      	nop
 80008d8:	080008f9 	.word	0x080008f9
 80008dc:	080009a3 	.word	0x080009a3
 80008e0:	080009a3 	.word	0x080009a3
 80008e4:	080009a3 	.word	0x080009a3
 80008e8:	080009a3 	.word	0x080009a3
 80008ec:	08000915 	.word	0x08000915
 80008f0:	08000971 	.word	0x08000971
 80008f4:	08000943 	.word	0x08000943
			case INIT_LED:
					time_lane2 = TIME_GREEN / 1000;
 80008f8:	4b37      	ldr	r3, [pc, #220]	; (80009d8 <counter_7segmen2+0x1f0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a34      	ldr	r2, [pc, #208]	; (80009d0 <counter_7segmen2+0x1e8>)
 80008fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000902:	1192      	asrs	r2, r2, #6
 8000904:	17db      	asrs	r3, r3, #31
 8000906:	1ad3      	subs	r3, r2, r3
 8000908:	4a36      	ldr	r2, [pc, #216]	; (80009e4 <counter_7segmen2+0x1fc>)
 800090a:	6013      	str	r3, [r2, #0]
					status4 = AUTO_GREEN2;
 800090c:	4b34      	ldr	r3, [pc, #208]	; (80009e0 <counter_7segmen2+0x1f8>)
 800090e:	2206      	movs	r2, #6
 8000910:	601a      	str	r2, [r3, #0]
				break;
 8000912:	e04d      	b.n	80009b0 <counter_7segmen2+0x1c8>

			case AUTO_RED2:
					time_lane2--;
 8000914:	4b33      	ldr	r3, [pc, #204]	; (80009e4 <counter_7segmen2+0x1fc>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	3b01      	subs	r3, #1
 800091a:	4a32      	ldr	r2, [pc, #200]	; (80009e4 <counter_7segmen2+0x1fc>)
 800091c:	6013      	str	r3, [r2, #0]
					if (time_lane2 <= 0){
 800091e:	4b31      	ldr	r3, [pc, #196]	; (80009e4 <counter_7segmen2+0x1fc>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	dc3f      	bgt.n	80009a6 <counter_7segmen2+0x1be>
						time_lane2 = TIME_GREEN / 1000;
 8000926:	4b2c      	ldr	r3, [pc, #176]	; (80009d8 <counter_7segmen2+0x1f0>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a29      	ldr	r2, [pc, #164]	; (80009d0 <counter_7segmen2+0x1e8>)
 800092c:	fb82 1203 	smull	r1, r2, r2, r3
 8000930:	1192      	asrs	r2, r2, #6
 8000932:	17db      	asrs	r3, r3, #31
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	4a2b      	ldr	r2, [pc, #172]	; (80009e4 <counter_7segmen2+0x1fc>)
 8000938:	6013      	str	r3, [r2, #0]
						status4 = AUTO_GREEN2;
 800093a:	4b29      	ldr	r3, [pc, #164]	; (80009e0 <counter_7segmen2+0x1f8>)
 800093c:	2206      	movs	r2, #6
 800093e:	601a      	str	r2, [r3, #0]
					}
				break;
 8000940:	e031      	b.n	80009a6 <counter_7segmen2+0x1be>

			case AUTO_AMBER2:
					time_lane2--;
 8000942:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <counter_7segmen2+0x1fc>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	3b01      	subs	r3, #1
 8000948:	4a26      	ldr	r2, [pc, #152]	; (80009e4 <counter_7segmen2+0x1fc>)
 800094a:	6013      	str	r3, [r2, #0]
					if (time_lane2 <= 0){
 800094c:	4b25      	ldr	r3, [pc, #148]	; (80009e4 <counter_7segmen2+0x1fc>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	dc2a      	bgt.n	80009aa <counter_7segmen2+0x1c2>
						time_lane2 = TIME_RED / 1000;
 8000954:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <counter_7segmen2+0x1e4>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a1d      	ldr	r2, [pc, #116]	; (80009d0 <counter_7segmen2+0x1e8>)
 800095a:	fb82 1203 	smull	r1, r2, r2, r3
 800095e:	1192      	asrs	r2, r2, #6
 8000960:	17db      	asrs	r3, r3, #31
 8000962:	1ad3      	subs	r3, r2, r3
 8000964:	4a1f      	ldr	r2, [pc, #124]	; (80009e4 <counter_7segmen2+0x1fc>)
 8000966:	6013      	str	r3, [r2, #0]
						status4 = AUTO_RED2;
 8000968:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <counter_7segmen2+0x1f8>)
 800096a:	2205      	movs	r2, #5
 800096c:	601a      	str	r2, [r3, #0]
					}
				break;
 800096e:	e01c      	b.n	80009aa <counter_7segmen2+0x1c2>

			case AUTO_GREEN2:
					time_lane2--;
 8000970:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <counter_7segmen2+0x1fc>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	3b01      	subs	r3, #1
 8000976:	4a1b      	ldr	r2, [pc, #108]	; (80009e4 <counter_7segmen2+0x1fc>)
 8000978:	6013      	str	r3, [r2, #0]
					if (time_lane2 <= 0){
 800097a:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <counter_7segmen2+0x1fc>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	dc15      	bgt.n	80009ae <counter_7segmen2+0x1c6>
						time_lane2 = TIME_YELLOW / 1000;
 8000982:	4b16      	ldr	r3, [pc, #88]	; (80009dc <counter_7segmen2+0x1f4>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <counter_7segmen2+0x1e8>)
 8000988:	fb82 1203 	smull	r1, r2, r2, r3
 800098c:	1192      	asrs	r2, r2, #6
 800098e:	17db      	asrs	r3, r3, #31
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	4a14      	ldr	r2, [pc, #80]	; (80009e4 <counter_7segmen2+0x1fc>)
 8000994:	6013      	str	r3, [r2, #0]
						status4 = AUTO_AMBER2;
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <counter_7segmen2+0x1f8>)
 8000998:	2207      	movs	r2, #7
 800099a:	601a      	str	r2, [r3, #0]
					}
				break;
 800099c:	e007      	b.n	80009ae <counter_7segmen2+0x1c6>

			default:
				break;
		}
	}
 800099e:	bf00      	nop
 80009a0:	e006      	b.n	80009b0 <counter_7segmen2+0x1c8>
				break;
 80009a2:	bf00      	nop
 80009a4:	e004      	b.n	80009b0 <counter_7segmen2+0x1c8>
				break;
 80009a6:	bf00      	nop
 80009a8:	e002      	b.n	80009b0 <counter_7segmen2+0x1c8>
				break;
 80009aa:	bf00      	nop
 80009ac:	e000      	b.n	80009b0 <counter_7segmen2+0x1c8>
				break;
 80009ae:	bf00      	nop
	updateClockBuffer(time_lane1, time_lane2);
 80009b0:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <counter_7segmen2+0x1ec>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a0b      	ldr	r2, [pc, #44]	; (80009e4 <counter_7segmen2+0x1fc>)
 80009b6:	6812      	ldr	r2, [r2, #0]
 80009b8:	4611      	mov	r1, r2
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fcaa 	bl	8000314 <updateClockBuffer>
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	2000011c 	.word	0x2000011c
 80009c8:	20000128 	.word	0x20000128
 80009cc:	20000058 	.word	0x20000058
 80009d0:	10624dd3 	.word	0x10624dd3
 80009d4:	20000134 	.word	0x20000134
 80009d8:	20000060 	.word	0x20000060
 80009dc:	2000005c 	.word	0x2000005c
 80009e0:	2000012c 	.word	0x2000012c
 80009e4:	20000138 	.word	0x20000138

080009e8 <fsm_automatic_run_segmen>:


void fsm_automatic_run_segmen(){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	if(timer_flag[3] == 1){
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <fsm_automatic_run_segmen+0x20>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d106      	bne.n	8000a02 <fsm_automatic_run_segmen+0x1a>
		counter_7segmen2();
 80009f4:	f7ff fef8 	bl	80007e8 <counter_7segmen2>
		setTimer0(3, 1000);
 80009f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009fc:	2003      	movs	r0, #3
 80009fe:	f000 fc0f 	bl	8001220 <setTimer0>
	}
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200002cc 	.word	0x200002cc

08000a0c <updateLed>:

void updateLed(){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
	if(timer_flag[2] == 1){
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <updateLed+0x2c>)
 8000a12:	689b      	ldr	r3, [r3, #8]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d10d      	bne.n	8000a34 <updateLed+0x28>
		updateClockBuffer(time_lane1, time_lane2);
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <updateLed+0x30>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a08      	ldr	r2, [pc, #32]	; (8000a40 <updateLed+0x34>)
 8000a1e:	6812      	ldr	r2, [r2, #0]
 8000a20:	4611      	mov	r1, r2
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff fc76 	bl	8000314 <updateClockBuffer>
		setTimer0(2, TIME_BLINK);
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <updateLed+0x38>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	2002      	movs	r0, #2
 8000a30:	f000 fbf6 	bl	8001220 <setTimer0>
	}
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	200002cc 	.word	0x200002cc
 8000a3c:	20000134 	.word	0x20000134
 8000a40:	20000138 	.word	0x20000138
 8000a44:	20000064 	.word	0x20000064

08000a48 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af02      	add	r7, sp, #8
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	f023 030f 	bic.w	r3, r3, #15
 8000a58:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	011b      	lsls	r3, r3, #4
 8000a5e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000a60:	7bfb      	ldrb	r3, [r7, #15]
 8000a62:	f043 030c 	orr.w	r3, r3, #12
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000a6a:	7bfb      	ldrb	r3, [r7, #15]
 8000a6c:	f043 0308 	orr.w	r3, r3, #8
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000a74:	7bbb      	ldrb	r3, [r7, #14]
 8000a76:	f043 030c 	orr.w	r3, r3, #12
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000a7e:	7bbb      	ldrb	r3, [r7, #14]
 8000a80:	f043 0308 	orr.w	r3, r3, #8
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000a88:	f107 0208 	add.w	r2, r7, #8
 8000a8c:	2364      	movs	r3, #100	; 0x64
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	2304      	movs	r3, #4
 8000a92:	2142      	movs	r1, #66	; 0x42
 8000a94:	4803      	ldr	r0, [pc, #12]	; (8000aa4 <lcd_send_cmd+0x5c>)
 8000a96:	f001 fd1d 	bl	80024d4 <HAL_I2C_Master_Transmit>
}
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200001c0 	.word	0x200001c0

08000aa8 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af02      	add	r7, sp, #8
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	f023 030f 	bic.w	r3, r3, #15
 8000ab8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	011b      	lsls	r3, r3, #4
 8000abe:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
 8000ac2:	f043 030d 	orr.w	r3, r3, #13
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	f043 0309 	orr.w	r3, r3, #9
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000ad4:	7bbb      	ldrb	r3, [r7, #14]
 8000ad6:	f043 030d 	orr.w	r3, r3, #13
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000ade:	7bbb      	ldrb	r3, [r7, #14]
 8000ae0:	f043 0309 	orr.w	r3, r3, #9
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ae8:	f107 0208 	add.w	r2, r7, #8
 8000aec:	2364      	movs	r3, #100	; 0x64
 8000aee:	9300      	str	r3, [sp, #0]
 8000af0:	2304      	movs	r3, #4
 8000af2:	2142      	movs	r1, #66	; 0x42
 8000af4:	4803      	ldr	r0, [pc, #12]	; (8000b04 <lcd_send_data+0x5c>)
 8000af6:	f001 fced 	bl	80024d4 <HAL_I2C_Master_Transmit>
}
 8000afa:	bf00      	nop
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200001c0 	.word	0x200001c0

08000b08 <lcd_init>:

void lcd_init (void) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000b0c:	2033      	movs	r0, #51	; 0x33
 8000b0e:	f7ff ff9b 	bl	8000a48 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000b12:	2032      	movs	r0, #50	; 0x32
 8000b14:	f7ff ff98 	bl	8000a48 <lcd_send_cmd>
	HAL_Delay(50);
 8000b18:	2032      	movs	r0, #50	; 0x32
 8000b1a:	f000 ffe7 	bl	8001aec <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000b1e:	2028      	movs	r0, #40	; 0x28
 8000b20:	f7ff ff92 	bl	8000a48 <lcd_send_cmd>
	HAL_Delay(50);
 8000b24:	2032      	movs	r0, #50	; 0x32
 8000b26:	f000 ffe1 	bl	8001aec <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	f7ff ff8c 	bl	8000a48 <lcd_send_cmd>
	HAL_Delay(50);
 8000b30:	2032      	movs	r0, #50	; 0x32
 8000b32:	f000 ffdb 	bl	8001aec <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000b36:	2006      	movs	r0, #6
 8000b38:	f7ff ff86 	bl	8000a48 <lcd_send_cmd>
	HAL_Delay(50);
 8000b3c:	2032      	movs	r0, #50	; 0x32
 8000b3e:	f000 ffd5 	bl	8001aec <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8000b42:	200c      	movs	r0, #12
 8000b44:	f7ff ff80 	bl	8000a48 <lcd_send_cmd>
	HAL_Delay(50);
 8000b48:	2032      	movs	r0, #50	; 0x32
 8000b4a:	f000 ffcf 	bl	8001aec <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000b4e:	2002      	movs	r0, #2
 8000b50:	f7ff ff7a 	bl	8000a48 <lcd_send_cmd>
	HAL_Delay(50);
 8000b54:	2032      	movs	r0, #50	; 0x32
 8000b56:	f000 ffc9 	bl	8001aec <HAL_Delay>
	lcd_send_cmd (0x80);
 8000b5a:	2080      	movs	r0, #128	; 0x80
 8000b5c:	f7ff ff74 	bl	8000a48 <lcd_send_cmd>
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000b6c:	e006      	b.n	8000b7c <lcd_send_string+0x18>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	1c5a      	adds	r2, r3, #1
 8000b72:	607a      	str	r2, [r7, #4]
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff ff96 	bl	8000aa8 <lcd_send_data>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d1f4      	bne.n	8000b6e <lcd_send_string+0xa>
}
 8000b84:	bf00      	nop
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <lcd_clear_display>:

void lcd_clear_display (void)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8000b92:	2001      	movs	r0, #1
 8000b94:	f7ff ff58 	bl	8000a48 <lcd_send_cmd>
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <lcd_goto_XY>:


void lcd_goto_XY (int row, int col)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d108      	bne.n	8000bbe <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	4413      	add	r3, r2
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	337f      	adds	r3, #127	; 0x7f
 8000bba:	73fb      	strb	r3, [r7, #15]
 8000bbc:	e008      	b.n	8000bd0 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	3340      	adds	r3, #64	; 0x40
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	b25b      	sxtb	r3, r3
 8000bc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bcc:	b25b      	sxtb	r3, r3
 8000bce:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff ff38 	bl	8000a48 <lcd_send_cmd>
}
 8000bd8:	bf00      	nop
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, (uint8_t *)&rec, 1);
 8000be8:	2201      	movs	r2, #1
 8000bea:	49a8      	ldr	r1, [pc, #672]	; (8000e8c <HAL_UART_RxCpltCallback+0x2ac>)
 8000bec:	48a8      	ldr	r0, [pc, #672]	; (8000e90 <HAL_UART_RxCpltCallback+0x2b0>)
 8000bee:	f003 f8a4 	bl	8003d3a <HAL_UART_Receive_IT>
	if (rec != 13 && rec != '\r' && rec != '\n') { // Loại b�? ký tự Enter hoặc xuống dòng
 8000bf2:	4ba6      	ldr	r3, [pc, #664]	; (8000e8c <HAL_UART_RxCpltCallback+0x2ac>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b0d      	cmp	r3, #13
 8000bf8:	d017      	beq.n	8000c2a <HAL_UART_RxCpltCallback+0x4a>
 8000bfa:	4ba4      	ldr	r3, [pc, #656]	; (8000e8c <HAL_UART_RxCpltCallback+0x2ac>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b0d      	cmp	r3, #13
 8000c00:	d013      	beq.n	8000c2a <HAL_UART_RxCpltCallback+0x4a>
 8000c02:	4ba2      	ldr	r3, [pc, #648]	; (8000e8c <HAL_UART_RxCpltCallback+0x2ac>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b0a      	cmp	r3, #10
 8000c08:	d00f      	beq.n	8000c2a <HAL_UART_RxCpltCallback+0x4a>
	    buffer[i++] = rec; // Thêm ký tự hợp lệ vào buffer
 8000c0a:	4ba2      	ldr	r3, [pc, #648]	; (8000e94 <HAL_UART_RxCpltCallback+0x2b4>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	1c5a      	adds	r2, r3, #1
 8000c10:	49a0      	ldr	r1, [pc, #640]	; (8000e94 <HAL_UART_RxCpltCallback+0x2b4>)
 8000c12:	600a      	str	r2, [r1, #0]
 8000c14:	4a9d      	ldr	r2, [pc, #628]	; (8000e8c <HAL_UART_RxCpltCallback+0x2ac>)
 8000c16:	7811      	ldrb	r1, [r2, #0]
 8000c18:	4a9f      	ldr	r2, [pc, #636]	; (8000e98 <HAL_UART_RxCpltCallback+0x2b8>)
 8000c1a:	54d1      	strb	r1, [r2, r3]
	    if (i >= sizeof(buffer) - 1) { // Tránh tràn buffer
 8000c1c:	4b9d      	ldr	r3, [pc, #628]	; (8000e94 <HAL_UART_RxCpltCallback+0x2b4>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b62      	cmp	r3, #98	; 0x62
 8000c22:	d902      	bls.n	8000c2a <HAL_UART_RxCpltCallback+0x4a>
	      i = sizeof(buffer) - 1;
 8000c24:	4b9b      	ldr	r3, [pc, #620]	; (8000e94 <HAL_UART_RxCpltCallback+0x2b4>)
 8000c26:	2263      	movs	r2, #99	; 0x63
 8000c28:	601a      	str	r2, [r3, #0]
	    }
	  }

  if (rec == 13) { // Khi nhận được Enter (Carriage Return)
 8000c2a:	4b98      	ldr	r3, [pc, #608]	; (8000e8c <HAL_UART_RxCpltCallback+0x2ac>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b0d      	cmp	r3, #13
 8000c30:	f040 8128 	bne.w	8000e84 <HAL_UART_RxCpltCallback+0x2a4>
    i = 0; // Reset chỉ số để nhận chuỗi mới
 8000c34:	4b97      	ldr	r3, [pc, #604]	; (8000e94 <HAL_UART_RxCpltCallback+0x2b4>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
    rec = '\0';
 8000c3a:	4b94      	ldr	r3, [pc, #592]	; (8000e8c <HAL_UART_RxCpltCallback+0x2ac>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]

    int len = strlen(buffer);
 8000c40:	4895      	ldr	r0, [pc, #596]	; (8000e98 <HAL_UART_RxCpltCallback+0x2b8>)
 8000c42:	f7ff fa8d 	bl	8000160 <strlen>
 8000c46:	4603      	mov	r3, r0
 8000c48:	617b      	str	r3, [r7, #20]
    while (len > 0 && (buffer[len - 1] == '\r' || buffer[len - 1] == '\n')) {
 8000c4a:	e007      	b.n	8000c5c <HAL_UART_RxCpltCallback+0x7c>
      buffer[--len] = '\0';
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	4a91      	ldr	r2, [pc, #580]	; (8000e98 <HAL_UART_RxCpltCallback+0x2b8>)
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	4413      	add	r3, r2
 8000c58:	2200      	movs	r2, #0
 8000c5a:	701a      	strb	r2, [r3, #0]
    while (len > 0 && (buffer[len - 1] == '\r' || buffer[len - 1] == '\n')) {
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	dd0b      	ble.n	8000c7a <HAL_UART_RxCpltCallback+0x9a>
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	3b01      	subs	r3, #1
 8000c66:	4a8c      	ldr	r2, [pc, #560]	; (8000e98 <HAL_UART_RxCpltCallback+0x2b8>)
 8000c68:	5cd3      	ldrb	r3, [r2, r3]
 8000c6a:	2b0d      	cmp	r3, #13
 8000c6c:	d0ee      	beq.n	8000c4c <HAL_UART_RxCpltCallback+0x6c>
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	3b01      	subs	r3, #1
 8000c72:	4a89      	ldr	r2, [pc, #548]	; (8000e98 <HAL_UART_RxCpltCallback+0x2b8>)
 8000c74:	5cd3      	ldrb	r3, [r2, r3]
 8000c76:	2b0a      	cmp	r3, #10
 8000c78:	d0e8      	beq.n	8000c4c <HAL_UART_RxCpltCallback+0x6c>
    }

    HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen((char *)buffer), 100);
 8000c7a:	4887      	ldr	r0, [pc, #540]	; (8000e98 <HAL_UART_RxCpltCallback+0x2b8>)
 8000c7c:	f7ff fa70 	bl	8000160 <strlen>
 8000c80:	4603      	mov	r3, r0
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	2364      	movs	r3, #100	; 0x64
 8000c86:	4984      	ldr	r1, [pc, #528]	; (8000e98 <HAL_UART_RxCpltCallback+0x2b8>)
 8000c88:	4881      	ldr	r0, [pc, #516]	; (8000e90 <HAL_UART_RxCpltCallback+0x2b0>)
 8000c8a:	f002 ffcb 	bl	8003c24 <HAL_UART_Transmit>
    if (strcmp(buffer, "START") == 0) {
 8000c8e:	4983      	ldr	r1, [pc, #524]	; (8000e9c <HAL_UART_RxCpltCallback+0x2bc>)
 8000c90:	4881      	ldr	r0, [pc, #516]	; (8000e98 <HAL_UART_RxCpltCallback+0x2b8>)
 8000c92:	f7ff fa5b 	bl	800014c <strcmp>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d130      	bne.n	8000cfe <HAL_UART_RxCpltCallback+0x11e>
    	      status0 = MODE1;
 8000c9c:	4b80      	ldr	r3, [pc, #512]	; (8000ea0 <HAL_UART_RxCpltCallback+0x2c0>)
 8000c9e:	220b      	movs	r2, #11
 8000ca0:	601a      	str	r2, [r3, #0]
    	      HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000ca2:	2120      	movs	r1, #32
 8000ca4:	487f      	ldr	r0, [pc, #508]	; (8000ea4 <HAL_UART_RxCpltCallback+0x2c4>)
 8000ca6:	f001 fab8 	bl	800221a <HAL_GPIO_TogglePin>
    	      setTimer0(3, 1010);
 8000caa:	f240 31f2 	movw	r1, #1010	; 0x3f2
 8000cae:	2003      	movs	r0, #3
 8000cb0:	f000 fab6 	bl	8001220 <setTimer0>
    	      setTimer0(2, 10);
 8000cb4:	210a      	movs	r1, #10
 8000cb6:	2002      	movs	r0, #2
 8000cb8:	f000 fab2 	bl	8001220 <setTimer0>
    	      setTimer0(1, 1010);
 8000cbc:	f240 31f2 	movw	r1, #1010	; 0x3f2
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f000 faad 	bl	8001220 <setTimer0>
    	      setTimer0(0, 1010);
 8000cc6:	f240 31f2 	movw	r1, #1010	; 0x3f2
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f000 faa8 	bl	8001220 <setTimer0>
    	      status1 = INIT_LED;
 8000cd0:	4b75      	ldr	r3, [pc, #468]	; (8000ea8 <HAL_UART_RxCpltCallback+0x2c8>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
    	      status2 = INIT_LED;
 8000cd6:	4b75      	ldr	r3, [pc, #468]	; (8000eac <HAL_UART_RxCpltCallback+0x2cc>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
    	      status0 = MODE1;
 8000cdc:	4b70      	ldr	r3, [pc, #448]	; (8000ea0 <HAL_UART_RxCpltCallback+0x2c0>)
 8000cde:	220b      	movs	r2, #11
 8000ce0:	601a      	str	r2, [r3, #0]
    	      status3 = INIT_LED;
 8000ce2:	4b73      	ldr	r3, [pc, #460]	; (8000eb0 <HAL_UART_RxCpltCallback+0x2d0>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
    	      status4 = INIT_LED;
 8000ce8:	4b72      	ldr	r3, [pc, #456]	; (8000eb4 <HAL_UART_RxCpltCallback+0x2d4>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
    	      time_lane1 = MODE1 % 10;
 8000cee:	4b72      	ldr	r3, [pc, #456]	; (8000eb8 <HAL_UART_RxCpltCallback+0x2d8>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	601a      	str	r2, [r3, #0]
    	      time_lane2 = 0;
 8000cf4:	4b71      	ldr	r3, [pc, #452]	; (8000ebc <HAL_UART_RxCpltCallback+0x2dc>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
    	      clearAll();
 8000cfa:	f7ff fb63 	bl	80003c4 <clearAll>
    }
    if (strcmp(buffer, "RESTART") == 0) {
 8000cfe:	4970      	ldr	r1, [pc, #448]	; (8000ec0 <HAL_UART_RxCpltCallback+0x2e0>)
 8000d00:	4865      	ldr	r0, [pc, #404]	; (8000e98 <HAL_UART_RxCpltCallback+0x2b8>)
 8000d02:	f7ff fa23 	bl	800014c <strcmp>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d10b      	bne.n	8000d24 <HAL_UART_RxCpltCallback+0x144>
            clearAll();
 8000d0c:	f7ff fb5a 	bl	80003c4 <clearAll>
            lcd_send_cmd (0x80);
 8000d10:	2080      	movs	r0, #128	; 0x80
 8000d12:	f7ff fe99 	bl	8000a48 <lcd_send_cmd>
            lcd_goto_XY(1,4);
 8000d16:	2104      	movs	r1, #4
 8000d18:	2001      	movs	r0, #1
 8000d1a:	f7ff ff3f 	bl	8000b9c <lcd_goto_XY>
            status0 = INIT_BUTTON;
 8000d1e:	4b60      	ldr	r3, [pc, #384]	; (8000ea0 <HAL_UART_RxCpltCallback+0x2c0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
    }
    if (strcmp(buffer, "MANUAL1") == 0) {
 8000d24:	4967      	ldr	r1, [pc, #412]	; (8000ec4 <HAL_UART_RxCpltCallback+0x2e4>)
 8000d26:	485c      	ldr	r0, [pc, #368]	; (8000e98 <HAL_UART_RxCpltCallback+0x2b8>)
 8000d28:	f7ff fa10 	bl	800014c <strcmp>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d117      	bne.n	8000d62 <HAL_UART_RxCpltCallback+0x182>
            clearAll();
 8000d32:	f7ff fb47 	bl	80003c4 <clearAll>
            lcd_send_cmd (0x80);
 8000d36:	2080      	movs	r0, #128	; 0x80
 8000d38:	f7ff fe86 	bl	8000a48 <lcd_send_cmd>
            lcd_goto_XY(1,4);
 8000d3c:	2104      	movs	r1, #4
 8000d3e:	2001      	movs	r0, #1
 8000d40:	f7ff ff2c 	bl	8000b9c <lcd_goto_XY>
            status0 = INIT_BUTTON;
 8000d44:	4b56      	ldr	r3, [pc, #344]	; (8000ea0 <HAL_UART_RxCpltCallback+0x2c0>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
            traffic_light1(AUTO_RED1);
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f000 fcca 	bl	80016e4 <traffic_light1>
            traffic_light2(AUTO_GREEN2);
 8000d50:	2006      	movs	r0, #6
 8000d52:	f000 fd0d 	bl	8001770 <traffic_light2>
            time_lane1 = 0;
 8000d56:	4b58      	ldr	r3, [pc, #352]	; (8000eb8 <HAL_UART_RxCpltCallback+0x2d8>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
            time_lane2 = 0;
 8000d5c:	4b57      	ldr	r3, [pc, #348]	; (8000ebc <HAL_UART_RxCpltCallback+0x2dc>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
    }
    if (strcmp(buffer, "MANUAL2") == 0) {
 8000d62:	4959      	ldr	r1, [pc, #356]	; (8000ec8 <HAL_UART_RxCpltCallback+0x2e8>)
 8000d64:	484c      	ldr	r0, [pc, #304]	; (8000e98 <HAL_UART_RxCpltCallback+0x2b8>)
 8000d66:	f7ff f9f1 	bl	800014c <strcmp>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d117      	bne.n	8000da0 <HAL_UART_RxCpltCallback+0x1c0>
            clearAll();
 8000d70:	f7ff fb28 	bl	80003c4 <clearAll>
            lcd_send_cmd (0x80);
 8000d74:	2080      	movs	r0, #128	; 0x80
 8000d76:	f7ff fe67 	bl	8000a48 <lcd_send_cmd>
            lcd_goto_XY(1,4);
 8000d7a:	2104      	movs	r1, #4
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	f7ff ff0d 	bl	8000b9c <lcd_goto_XY>
            status0 = INIT_BUTTON;
 8000d82:	4b47      	ldr	r3, [pc, #284]	; (8000ea0 <HAL_UART_RxCpltCallback+0x2c0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
            traffic_light1(AUTO_GREEN1);
 8000d88:	2002      	movs	r0, #2
 8000d8a:	f000 fcab 	bl	80016e4 <traffic_light1>
            traffic_light2(AUTO_RED2);
 8000d8e:	2005      	movs	r0, #5
 8000d90:	f000 fcee 	bl	8001770 <traffic_light2>
            time_lane1 = 0;
 8000d94:	4b48      	ldr	r3, [pc, #288]	; (8000eb8 <HAL_UART_RxCpltCallback+0x2d8>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
            time_lane2 = 0;
 8000d9a:	4b48      	ldr	r3, [pc, #288]	; (8000ebc <HAL_UART_RxCpltCallback+0x2dc>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
    }
    if (strcmp(buffer, "MANUAL3") == 0) {
 8000da0:	494a      	ldr	r1, [pc, #296]	; (8000ecc <HAL_UART_RxCpltCallback+0x2ec>)
 8000da2:	483d      	ldr	r0, [pc, #244]	; (8000e98 <HAL_UART_RxCpltCallback+0x2b8>)
 8000da4:	f7ff f9d2 	bl	800014c <strcmp>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d117      	bne.n	8000dde <HAL_UART_RxCpltCallback+0x1fe>
            clearAll();
 8000dae:	f7ff fb09 	bl	80003c4 <clearAll>
            lcd_send_cmd (0x80);
 8000db2:	2080      	movs	r0, #128	; 0x80
 8000db4:	f7ff fe48 	bl	8000a48 <lcd_send_cmd>
            lcd_goto_XY(1,4);
 8000db8:	2104      	movs	r1, #4
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f7ff feee 	bl	8000b9c <lcd_goto_XY>
            status0 = INIT_BUTTON;
 8000dc0:	4b37      	ldr	r3, [pc, #220]	; (8000ea0 <HAL_UART_RxCpltCallback+0x2c0>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
            traffic_light1(AUTO_AMBER1);
 8000dc6:	2003      	movs	r0, #3
 8000dc8:	f000 fc8c 	bl	80016e4 <traffic_light1>
            traffic_light2(AUTO_AMBER2);
 8000dcc:	2007      	movs	r0, #7
 8000dce:	f000 fccf 	bl	8001770 <traffic_light2>
            time_lane1 = 0;
 8000dd2:	4b39      	ldr	r3, [pc, #228]	; (8000eb8 <HAL_UART_RxCpltCallback+0x2d8>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
            time_lane2 = 0;
 8000dd8:	4b38      	ldr	r3, [pc, #224]	; (8000ebc <HAL_UART_RxCpltCallback+0x2dc>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
    }
    if (strncmp(buffer, "Set_up!", 7) == 0) {
 8000dde:	2207      	movs	r2, #7
 8000de0:	493b      	ldr	r1, [pc, #236]	; (8000ed0 <HAL_UART_RxCpltCallback+0x2f0>)
 8000de2:	482d      	ldr	r0, [pc, #180]	; (8000e98 <HAL_UART_RxCpltCallback+0x2b8>)
 8000de4:	f003 fd8e 	bl	8004904 <strncmp>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d145      	bne.n	8000e7a <HAL_UART_RxCpltCallback+0x29a>
        char *token = strtok(buffer, "!");
 8000dee:	4939      	ldr	r1, [pc, #228]	; (8000ed4 <HAL_UART_RxCpltCallback+0x2f4>)
 8000df0:	4829      	ldr	r0, [pc, #164]	; (8000e98 <HAL_UART_RxCpltCallback+0x2b8>)
 8000df2:	f003 fd99 	bl	8004928 <strtok>
 8000df6:	6138      	str	r0, [r7, #16]
        int index = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60fb      	str	r3, [r7, #12]

        while (token != NULL) {
 8000dfc:	e02e      	b.n	8000e5c <HAL_UART_RxCpltCallback+0x27c>
          if (index == 1) TIME_RED = atoi(token) * 1000;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d109      	bne.n	8000e18 <HAL_UART_RxCpltCallback+0x238>
 8000e04:	6938      	ldr	r0, [r7, #16]
 8000e06:	f003 fd27 	bl	8004858 <atoi>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e10:	fb02 f303 	mul.w	r3, r2, r3
 8000e14:	4a30      	ldr	r2, [pc, #192]	; (8000ed8 <HAL_UART_RxCpltCallback+0x2f8>)
 8000e16:	6013      	str	r3, [r2, #0]
          if (index == 2) TIME_YELLOW = atoi(token) * 1000;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d109      	bne.n	8000e32 <HAL_UART_RxCpltCallback+0x252>
 8000e1e:	6938      	ldr	r0, [r7, #16]
 8000e20:	f003 fd1a 	bl	8004858 <atoi>
 8000e24:	4603      	mov	r3, r0
 8000e26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e2a:	fb02 f303 	mul.w	r3, r2, r3
 8000e2e:	4a2b      	ldr	r2, [pc, #172]	; (8000edc <HAL_UART_RxCpltCallback+0x2fc>)
 8000e30:	6013      	str	r3, [r2, #0]
          if (index == 3) TIME_GREEN = atoi(token) * 1000;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	2b03      	cmp	r3, #3
 8000e36:	d109      	bne.n	8000e4c <HAL_UART_RxCpltCallback+0x26c>
 8000e38:	6938      	ldr	r0, [r7, #16]
 8000e3a:	f003 fd0d 	bl	8004858 <atoi>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e44:	fb02 f303 	mul.w	r3, r2, r3
 8000e48:	4a25      	ldr	r2, [pc, #148]	; (8000ee0 <HAL_UART_RxCpltCallback+0x300>)
 8000e4a:	6013      	str	r3, [r2, #0]
          token = strtok(NULL, "!");
 8000e4c:	4921      	ldr	r1, [pc, #132]	; (8000ed4 <HAL_UART_RxCpltCallback+0x2f4>)
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f003 fd6a 	bl	8004928 <strtok>
 8000e54:	6138      	str	r0, [r7, #16]
          index++;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
        while (token != NULL) {
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1cd      	bne.n	8000dfe <HAL_UART_RxCpltCallback+0x21e>
        }
        clearAll();
 8000e62:	f7ff faaf 	bl	80003c4 <clearAll>
        lcd_send_cmd (0x80);
 8000e66:	2080      	movs	r0, #128	; 0x80
 8000e68:	f7ff fdee 	bl	8000a48 <lcd_send_cmd>
        lcd_goto_XY(1,4);
 8000e6c:	2104      	movs	r1, #4
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f7ff fe94 	bl	8000b9c <lcd_goto_XY>
        status0 = INIT_BUTTON;
 8000e74:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <HAL_UART_RxCpltCallback+0x2c0>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
    }

    // Xóa buffer
    memset(buffer, 0, sizeof(buffer));
 8000e7a:	2264      	movs	r2, #100	; 0x64
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4806      	ldr	r0, [pc, #24]	; (8000e98 <HAL_UART_RxCpltCallback+0x2b8>)
 8000e80:	f003 fd18 	bl	80048b4 <memset>
  }

  // Tiếp tục nhận dữ liệu
}
 8000e84:	bf00      	nop
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	200001bc 	.word	0x200001bc
 8000e90:	2000025c 	.word	0x2000025c
 8000e94:	20000118 	.word	0x20000118
 8000e98:	20000158 	.word	0x20000158
 8000e9c:	08005e24 	.word	0x08005e24
 8000ea0:	2000011c 	.word	0x2000011c
 8000ea4:	40010800 	.word	0x40010800
 8000ea8:	20000120 	.word	0x20000120
 8000eac:	20000124 	.word	0x20000124
 8000eb0:	20000128 	.word	0x20000128
 8000eb4:	2000012c 	.word	0x2000012c
 8000eb8:	20000134 	.word	0x20000134
 8000ebc:	20000138 	.word	0x20000138
 8000ec0:	08005e2c 	.word	0x08005e2c
 8000ec4:	08005e34 	.word	0x08005e34
 8000ec8:	08005e3c 	.word	0x08005e3c
 8000ecc:	08005e44 	.word	0x08005e44
 8000ed0:	08005e4c 	.word	0x08005e4c
 8000ed4:	08005e54 	.word	0x08005e54
 8000ed8:	20000058 	.word	0x20000058
 8000edc:	2000005c 	.word	0x2000005c
 8000ee0:	20000060 	.word	0x20000060

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee8:	f000 fd9e 	bl	8001a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eec:	f000 f82a 	bl	8000f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef0:	f000 f908 	bl	8001104 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ef4:	f000 f890 	bl	8001018 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000ef8:	f000 f860 	bl	8000fbc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000efc:	f000 f8d8 	bl	80010b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000f00:	480b      	ldr	r0, [pc, #44]	; (8000f30 <main+0x4c>)
 8000f02:	f002 fa9d 	bl	8003440 <HAL_TIM_Base_Start_IT>
  HAL_UART_Transmit(&huart2, senddata,sizeof(senddata),100);
 8000f06:	2364      	movs	r3, #100	; 0x64
 8000f08:	2210      	movs	r2, #16
 8000f0a:	490a      	ldr	r1, [pc, #40]	; (8000f34 <main+0x50>)
 8000f0c:	480a      	ldr	r0, [pc, #40]	; (8000f38 <main+0x54>)
 8000f0e:	f002 fe89 	bl	8003c24 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2,(uint8_t *)&rec,1);
 8000f12:	2201      	movs	r2, #1
 8000f14:	4909      	ldr	r1, [pc, #36]	; (8000f3c <main+0x58>)
 8000f16:	4808      	ldr	r0, [pc, #32]	; (8000f38 <main+0x54>)
 8000f18:	f002 ff0f 	bl	8003d3a <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  lcd_init();
 8000f1c:	f7ff fdf4 	bl	8000b08 <lcd_init>
  status0 = INIT_BUTTON;
 8000f20:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <main+0x5c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_automatic_run();
 8000f26:	f7ff fa6d 	bl	8000404 <fsm_automatic_run>
	  fsm_manual_run();
 8000f2a:	f7ff fa73 	bl	8000414 <fsm_manual_run>
	  fsm_automatic_run();
 8000f2e:	e7fa      	b.n	8000f26 <main+0x42>
 8000f30:	20000214 	.word	0x20000214
 8000f34:	20000068 	.word	0x20000068
 8000f38:	2000025c 	.word	0x2000025c
 8000f3c:	200001bc 	.word	0x200001bc
 8000f40:	2000011c 	.word	0x2000011c

08000f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b090      	sub	sp, #64	; 0x40
 8000f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4a:	f107 0318 	add.w	r3, r7, #24
 8000f4e:	2228      	movs	r2, #40	; 0x28
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f003 fcae 	bl	80048b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
 8000f64:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f66:	2302      	movs	r3, #2
 8000f68:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f6e:	2310      	movs	r3, #16
 8000f70:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f76:	f107 0318 	add.w	r3, r7, #24
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f001 fe02 	bl	8002b84 <HAL_RCC_OscConfig>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f86:	f000 f945 	bl	8001214 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f8a:	230f      	movs	r3, #15
 8000f8c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f002 f86e 	bl	8003084 <HAL_RCC_ClockConfig>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000fae:	f000 f931 	bl	8001214 <Error_Handler>
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	3740      	adds	r7, #64	; 0x40
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <MX_I2C1_Init+0x50>)
 8000fc2:	4a13      	ldr	r2, [pc, #76]	; (8001010 <MX_I2C1_Init+0x54>)
 8000fc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_I2C1_Init+0x50>)
 8000fc8:	4a12      	ldr	r2, [pc, #72]	; (8001014 <MX_I2C1_Init+0x58>)
 8000fca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_I2C1_Init+0x50>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <MX_I2C1_Init+0x50>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <MX_I2C1_Init+0x50>)
 8000fda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <MX_I2C1_Init+0x50>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <MX_I2C1_Init+0x50>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fec:	4b07      	ldr	r3, [pc, #28]	; (800100c <MX_I2C1_Init+0x50>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <MX_I2C1_Init+0x50>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ff8:	4804      	ldr	r0, [pc, #16]	; (800100c <MX_I2C1_Init+0x50>)
 8000ffa:	f001 f927 	bl	800224c <HAL_I2C_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001004:	f000 f906 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200001c0 	.word	0x200001c0
 8001010:	40005400 	.word	0x40005400
 8001014:	000186a0 	.word	0x000186a0

08001018 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101e:	f107 0308 	add.w	r3, r7, #8
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800102c:	463b      	mov	r3, r7
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001034:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <MX_TIM2_Init+0x94>)
 8001036:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800103a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800103c:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <MX_TIM2_Init+0x94>)
 800103e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001042:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001044:	4b19      	ldr	r3, [pc, #100]	; (80010ac <MX_TIM2_Init+0x94>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800104a:	4b18      	ldr	r3, [pc, #96]	; (80010ac <MX_TIM2_Init+0x94>)
 800104c:	2209      	movs	r2, #9
 800104e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001050:	4b16      	ldr	r3, [pc, #88]	; (80010ac <MX_TIM2_Init+0x94>)
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <MX_TIM2_Init+0x94>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800105c:	4813      	ldr	r0, [pc, #76]	; (80010ac <MX_TIM2_Init+0x94>)
 800105e:	f002 f99f 	bl	80033a0 <HAL_TIM_Base_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001068:	f000 f8d4 	bl	8001214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800106c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001070:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001072:	f107 0308 	add.w	r3, r7, #8
 8001076:	4619      	mov	r1, r3
 8001078:	480c      	ldr	r0, [pc, #48]	; (80010ac <MX_TIM2_Init+0x94>)
 800107a:	f002 fb23 	bl	80036c4 <HAL_TIM_ConfigClockSource>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001084:	f000 f8c6 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001088:	2300      	movs	r3, #0
 800108a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108c:	2300      	movs	r3, #0
 800108e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001090:	463b      	mov	r3, r7
 8001092:	4619      	mov	r1, r3
 8001094:	4805      	ldr	r0, [pc, #20]	; (80010ac <MX_TIM2_Init+0x94>)
 8001096:	f002 fd05 	bl	8003aa4 <HAL_TIMEx_MasterConfigSynchronization>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010a0:	f000 f8b8 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000214 	.word	0x20000214

080010b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010b6:	4a12      	ldr	r2, [pc, #72]	; (8001100 <MX_USART2_UART_Init+0x50>)
 80010b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010d6:	220c      	movs	r2, #12
 80010d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010e6:	4805      	ldr	r0, [pc, #20]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010e8:	f002 fd4c 	bl	8003b84 <HAL_UART_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010f2:	f000 f88f 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	2000025c 	.word	0x2000025c
 8001100:	40004400 	.word	0x40004400

08001104 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110a:	f107 0310 	add.w	r3, r7, #16
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001118:	4b34      	ldr	r3, [pc, #208]	; (80011ec <MX_GPIO_Init+0xe8>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	4a33      	ldr	r2, [pc, #204]	; (80011ec <MX_GPIO_Init+0xe8>)
 800111e:	f043 0304 	orr.w	r3, r3, #4
 8001122:	6193      	str	r3, [r2, #24]
 8001124:	4b31      	ldr	r3, [pc, #196]	; (80011ec <MX_GPIO_Init+0xe8>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	f003 0304 	and.w	r3, r3, #4
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001130:	4b2e      	ldr	r3, [pc, #184]	; (80011ec <MX_GPIO_Init+0xe8>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	4a2d      	ldr	r2, [pc, #180]	; (80011ec <MX_GPIO_Init+0xe8>)
 8001136:	f043 0308 	orr.w	r3, r3, #8
 800113a:	6193      	str	r3, [r2, #24]
 800113c:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <MX_GPIO_Init+0xe8>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	f003 0308 	and.w	r3, r3, #8
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001148:	4b28      	ldr	r3, [pc, #160]	; (80011ec <MX_GPIO_Init+0xe8>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4a27      	ldr	r2, [pc, #156]	; (80011ec <MX_GPIO_Init+0xe8>)
 800114e:	f043 0310 	orr.w	r3, r3, #16
 8001152:	6193      	str	r3, [r2, #24]
 8001154:	4b25      	ldr	r3, [pc, #148]	; (80011ec <MX_GPIO_Init+0xe8>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	f003 0310 	and.w	r3, r3, #16
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED4_8_Pin|LED4_9_Pin, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001166:	4822      	ldr	r0, [pc, #136]	; (80011f0 <MX_GPIO_Init+0xec>)
 8001168:	f001 f83f 	bl	80021ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_3_Pin|LED1_5_Pin, GPIO_PIN_RESET);
 800116c:	2200      	movs	r2, #0
 800116e:	2128      	movs	r1, #40	; 0x28
 8001170:	4820      	ldr	r0, [pc, #128]	; (80011f4 <MX_GPIO_Init+0xf0>)
 8001172:	f001 f83a 	bl	80021ea <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED4_8_Pin LED4_9_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED4_8_Pin|LED4_9_Pin;
 8001176:	f44f 7348 	mov.w	r3, #800	; 0x320
 800117a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117c:	2301      	movs	r3, #1
 800117e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2302      	movs	r3, #2
 8001186:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001188:	f107 0310 	add.w	r3, r7, #16
 800118c:	4619      	mov	r1, r3
 800118e:	4818      	ldr	r0, [pc, #96]	; (80011f0 <MX_GPIO_Init+0xec>)
 8001190:	f000 fe90 	bl	8001eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin BUTTON1_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON1_Pin|BUTTON3_Pin;
 8001194:	f44f 638a 	mov.w	r3, #1104	; 0x450
 8001198:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800119e:	2302      	movs	r3, #2
 80011a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a2:	f107 0310 	add.w	r3, r7, #16
 80011a6:	4619      	mov	r1, r3
 80011a8:	4812      	ldr	r0, [pc, #72]	; (80011f4 <MX_GPIO_Init+0xf0>)
 80011aa:	f000 fe83 	bl	8001eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON4_Pin */
  GPIO_InitStruct.Pin = BUTTON4_Pin;
 80011ae:	2380      	movs	r3, #128	; 0x80
 80011b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011b6:	2302      	movs	r3, #2
 80011b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON4_GPIO_Port, &GPIO_InitStruct);
 80011ba:	f107 0310 	add.w	r3, r7, #16
 80011be:	4619      	mov	r1, r3
 80011c0:	480d      	ldr	r0, [pc, #52]	; (80011f8 <MX_GPIO_Init+0xf4>)
 80011c2:	f000 fe77 	bl	8001eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_3_Pin LED1_5_Pin */
  GPIO_InitStruct.Pin = LED1_3_Pin|LED1_5_Pin;
 80011c6:	2328      	movs	r3, #40	; 0x28
 80011c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2302      	movs	r3, #2
 80011d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d6:	f107 0310 	add.w	r3, r7, #16
 80011da:	4619      	mov	r1, r3
 80011dc:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_GPIO_Init+0xf0>)
 80011de:	f000 fe69 	bl	8001eb4 <HAL_GPIO_Init>

}
 80011e2:	bf00      	nop
 80011e4:	3720      	adds	r7, #32
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40010800 	.word	0x40010800
 80011f4:	40010c00 	.word	0x40010c00
 80011f8:	40011000 	.word	0x40011000

080011fc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	getKeyInput();
 8001204:	f7fe ffe2 	bl	80001cc <getKeyInput>
	timer_run();
 8001208:	f000 f828 	bl	800125c <timer_run>
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
}
 800121a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800121c:	e7fe      	b.n	800121c <Error_Handler+0x8>
	...

08001220 <setTimer0>:

int timer_flag[10];
int timer_counter[10];
int TIMER_DEVICE = 10;

void setTimer0(int index, int duration) {
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration / TIMER_DEVICE;
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <setTimer0+0x30>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	fb92 f2f3 	sdiv	r2, r2, r3
 8001234:	4907      	ldr	r1, [pc, #28]	; (8001254 <setTimer0+0x34>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 800123c:	4a06      	ldr	r2, [pc, #24]	; (8001258 <setTimer0+0x38>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2100      	movs	r1, #0
 8001242:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr
 8001250:	20000078 	.word	0x20000078
 8001254:	200002a4 	.word	0x200002a4
 8001258:	200002cc 	.word	0x200002cc

0800125c <timer_run>:

void timer_run() {
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
	if (timer_counter[0] > 0) {
 8001260:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <timer_run+0x8c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	dd0b      	ble.n	8001280 <timer_run+0x24>
		timer_counter[0]--;
 8001268:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <timer_run+0x8c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	3b01      	subs	r3, #1
 800126e:	4a1e      	ldr	r2, [pc, #120]	; (80012e8 <timer_run+0x8c>)
 8001270:	6013      	str	r3, [r2, #0]
		if (timer_counter[0] <= 0) {
 8001272:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <timer_run+0x8c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	dc02      	bgt.n	8001280 <timer_run+0x24>
			timer_flag[0] = 1;
 800127a:	4b1c      	ldr	r3, [pc, #112]	; (80012ec <timer_run+0x90>)
 800127c:	2201      	movs	r2, #1
 800127e:	601a      	str	r2, [r3, #0]
		}
	}

	if (timer_counter[1] > 0) {
 8001280:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <timer_run+0x8c>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	dd0b      	ble.n	80012a0 <timer_run+0x44>
		timer_counter[1]--;
 8001288:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <timer_run+0x8c>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	3b01      	subs	r3, #1
 800128e:	4a16      	ldr	r2, [pc, #88]	; (80012e8 <timer_run+0x8c>)
 8001290:	6053      	str	r3, [r2, #4]
		if (timer_counter[1] <= 0) {
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <timer_run+0x8c>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	dc02      	bgt.n	80012a0 <timer_run+0x44>
			timer_flag[1] = 1;
 800129a:	4b14      	ldr	r3, [pc, #80]	; (80012ec <timer_run+0x90>)
 800129c:	2201      	movs	r2, #1
 800129e:	605a      	str	r2, [r3, #4]
		}
	}

	if (timer_counter[2] > 0) {
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <timer_run+0x8c>)
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	dd0b      	ble.n	80012c0 <timer_run+0x64>
		timer_counter[2]--;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <timer_run+0x8c>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	3b01      	subs	r3, #1
 80012ae:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <timer_run+0x8c>)
 80012b0:	6093      	str	r3, [r2, #8]
		if (timer_counter[2] <= 0) {
 80012b2:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <timer_run+0x8c>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	dc02      	bgt.n	80012c0 <timer_run+0x64>
			timer_flag[2] = 1;
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <timer_run+0x90>)
 80012bc:	2201      	movs	r2, #1
 80012be:	609a      	str	r2, [r3, #8]
		}
	}

	if (timer_counter[3] > 0) {
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <timer_run+0x8c>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	dd0b      	ble.n	80012e0 <timer_run+0x84>
		timer_counter[3]--;
 80012c8:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <timer_run+0x8c>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	3b01      	subs	r3, #1
 80012ce:	4a06      	ldr	r2, [pc, #24]	; (80012e8 <timer_run+0x8c>)
 80012d0:	60d3      	str	r3, [r2, #12]
		if (timer_counter[3] <= 0) {
 80012d2:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <timer_run+0x8c>)
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	dc02      	bgt.n	80012e0 <timer_run+0x84>
			timer_flag[3] = 1;
 80012da:	4b04      	ldr	r3, [pc, #16]	; (80012ec <timer_run+0x90>)
 80012dc:	2201      	movs	r2, #1
 80012de:	60da      	str	r2, [r3, #12]
		}
	}
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr
 80012e8:	200002a4 	.word	0x200002a4
 80012ec:	200002cc 	.word	0x200002cc

080012f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <HAL_MspInit+0x5c>)
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	4a14      	ldr	r2, [pc, #80]	; (800134c <HAL_MspInit+0x5c>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6193      	str	r3, [r2, #24]
 8001302:	4b12      	ldr	r3, [pc, #72]	; (800134c <HAL_MspInit+0x5c>)
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800130e:	4b0f      	ldr	r3, [pc, #60]	; (800134c <HAL_MspInit+0x5c>)
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	4a0e      	ldr	r2, [pc, #56]	; (800134c <HAL_MspInit+0x5c>)
 8001314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001318:	61d3      	str	r3, [r2, #28]
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <HAL_MspInit+0x5c>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <HAL_MspInit+0x60>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	4a04      	ldr	r2, [pc, #16]	; (8001350 <HAL_MspInit+0x60>)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001342:	bf00      	nop
 8001344:	3714      	adds	r7, #20
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr
 800134c:	40021000 	.word	0x40021000
 8001350:	40010000 	.word	0x40010000

08001354 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	; 0x28
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a1d      	ldr	r2, [pc, #116]	; (80013e4 <HAL_I2C_MspInit+0x90>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d132      	bne.n	80013da <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001374:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <HAL_I2C_MspInit+0x94>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	4a1b      	ldr	r2, [pc, #108]	; (80013e8 <HAL_I2C_MspInit+0x94>)
 800137a:	f043 0308 	orr.w	r3, r3, #8
 800137e:	6193      	str	r3, [r2, #24]
 8001380:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <HAL_I2C_MspInit+0x94>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	f003 0308 	and.w	r3, r3, #8
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800138c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001392:	2312      	movs	r3, #18
 8001394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001396:	2303      	movs	r3, #3
 8001398:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	4812      	ldr	r0, [pc, #72]	; (80013ec <HAL_I2C_MspInit+0x98>)
 80013a2:	f000 fd87 	bl	8001eb4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80013a6:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <HAL_I2C_MspInit+0x9c>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
 80013ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ae:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	f043 0302 	orr.w	r3, r3, #2
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
 80013bc:	4a0c      	ldr	r2, [pc, #48]	; (80013f0 <HAL_I2C_MspInit+0x9c>)
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <HAL_I2C_MspInit+0x94>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	4a08      	ldr	r2, [pc, #32]	; (80013e8 <HAL_I2C_MspInit+0x94>)
 80013c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013cc:	61d3      	str	r3, [r2, #28]
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_I2C_MspInit+0x94>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013da:	bf00      	nop
 80013dc:	3728      	adds	r7, #40	; 0x28
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40005400 	.word	0x40005400
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40010c00 	.word	0x40010c00
 80013f0:	40010000 	.word	0x40010000

080013f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001404:	d113      	bne.n	800142e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <HAL_TIM_Base_MspInit+0x44>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	4a0b      	ldr	r2, [pc, #44]	; (8001438 <HAL_TIM_Base_MspInit+0x44>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	61d3      	str	r3, [r2, #28]
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <HAL_TIM_Base_MspInit+0x44>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2100      	movs	r1, #0
 8001422:	201c      	movs	r0, #28
 8001424:	f000 fc5d 	bl	8001ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001428:	201c      	movs	r0, #28
 800142a:	f000 fc76 	bl	8001d1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800142e:	bf00      	nop
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40021000 	.word	0x40021000

0800143c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 0310 	add.w	r3, r7, #16
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a1f      	ldr	r2, [pc, #124]	; (80014d4 <HAL_UART_MspInit+0x98>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d137      	bne.n	80014cc <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800145c:	4b1e      	ldr	r3, [pc, #120]	; (80014d8 <HAL_UART_MspInit+0x9c>)
 800145e:	69db      	ldr	r3, [r3, #28]
 8001460:	4a1d      	ldr	r2, [pc, #116]	; (80014d8 <HAL_UART_MspInit+0x9c>)
 8001462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001466:	61d3      	str	r3, [r2, #28]
 8001468:	4b1b      	ldr	r3, [pc, #108]	; (80014d8 <HAL_UART_MspInit+0x9c>)
 800146a:	69db      	ldr	r3, [r3, #28]
 800146c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001474:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <HAL_UART_MspInit+0x9c>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	4a17      	ldr	r2, [pc, #92]	; (80014d8 <HAL_UART_MspInit+0x9c>)
 800147a:	f043 0304 	orr.w	r3, r3, #4
 800147e:	6193      	str	r3, [r2, #24]
 8001480:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <HAL_UART_MspInit+0x9c>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800148c:	2304      	movs	r3, #4
 800148e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001490:	2302      	movs	r3, #2
 8001492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001494:	2303      	movs	r3, #3
 8001496:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001498:	f107 0310 	add.w	r3, r7, #16
 800149c:	4619      	mov	r1, r3
 800149e:	480f      	ldr	r0, [pc, #60]	; (80014dc <HAL_UART_MspInit+0xa0>)
 80014a0:	f000 fd08 	bl	8001eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014a4:	2308      	movs	r3, #8
 80014a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	4619      	mov	r1, r3
 80014b6:	4809      	ldr	r0, [pc, #36]	; (80014dc <HAL_UART_MspInit+0xa0>)
 80014b8:	f000 fcfc 	bl	8001eb4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80014bc:	2200      	movs	r2, #0
 80014be:	2101      	movs	r1, #1
 80014c0:	2026      	movs	r0, #38	; 0x26
 80014c2:	f000 fc0e 	bl	8001ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014c6:	2026      	movs	r0, #38	; 0x26
 80014c8:	f000 fc27 	bl	8001d1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014cc:	bf00      	nop
 80014ce:	3720      	adds	r7, #32
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40004400 	.word	0x40004400
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40010800 	.word	0x40010800

080014e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <NMI_Handler+0x4>

080014e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ea:	e7fe      	b.n	80014ea <HardFault_Handler+0x4>

080014ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <MemManage_Handler+0x4>

080014f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f6:	e7fe      	b.n	80014f6 <BusFault_Handler+0x4>

080014f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014fc:	e7fe      	b.n	80014fc <UsageFault_Handler+0x4>

080014fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr

0800150a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr

08001516 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr

08001522 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001526:	f000 fac5 	bl	8001ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <TIM2_IRQHandler+0x10>)
 8001536:	f001 ffd5 	bl	80034e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000214 	.word	0x20000214

08001544 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <USART2_IRQHandler+0x10>)
 800154a:	f002 fc1b 	bl	8003d84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	2000025c 	.word	0x2000025c

08001558 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
	return 1;
 800155c:	2301      	movs	r3, #1
}
 800155e:	4618      	mov	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr

08001566 <_kill>:

int _kill(int pid, int sig)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
 800156e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001570:	f003 f976 	bl	8004860 <__errno>
 8001574:	4603      	mov	r3, r0
 8001576:	2216      	movs	r2, #22
 8001578:	601a      	str	r2, [r3, #0]
	return -1;
 800157a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <_exit>:

void _exit (int status)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800158e:	f04f 31ff 	mov.w	r1, #4294967295
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ffe7 	bl	8001566 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001598:	e7fe      	b.n	8001598 <_exit+0x12>

0800159a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b086      	sub	sp, #24
 800159e:	af00      	add	r7, sp, #0
 80015a0:	60f8      	str	r0, [r7, #12]
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
 80015aa:	e00a      	b.n	80015c2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015ac:	f3af 8000 	nop.w
 80015b0:	4601      	mov	r1, r0
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	1c5a      	adds	r2, r3, #1
 80015b6:	60ba      	str	r2, [r7, #8]
 80015b8:	b2ca      	uxtb	r2, r1
 80015ba:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	3301      	adds	r3, #1
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	dbf0      	blt.n	80015ac <_read+0x12>
	}

return len;
 80015ca:	687b      	ldr	r3, [r7, #4]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	e009      	b.n	80015fa <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	1c5a      	adds	r2, r3, #1
 80015ea:	60ba      	str	r2, [r7, #8]
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	3301      	adds	r3, #1
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	429a      	cmp	r2, r3
 8001600:	dbf1      	blt.n	80015e6 <_write+0x12>
	}
	return len;
 8001602:	687b      	ldr	r3, [r7, #4]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <_close>:

int _close(int file)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	return -1;
 8001614:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr

08001622 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001632:	605a      	str	r2, [r3, #4]
	return 0;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <_isatty>:

int _isatty(int file)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	return 1;
 8001648:	2301      	movs	r3, #1
}
 800164a:	4618      	mov	r0, r3
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
	return 0;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr

0800166c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001674:	4a14      	ldr	r2, [pc, #80]	; (80016c8 <_sbrk+0x5c>)
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <_sbrk+0x60>)
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001680:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <_sbrk+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d102      	bne.n	800168e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <_sbrk+0x64>)
 800168a:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <_sbrk+0x68>)
 800168c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <_sbrk+0x64>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	429a      	cmp	r2, r3
 800169a:	d207      	bcs.n	80016ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800169c:	f003 f8e0 	bl	8004860 <__errno>
 80016a0:	4603      	mov	r3, r0
 80016a2:	220c      	movs	r2, #12
 80016a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
 80016aa:	e009      	b.n	80016c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <_sbrk+0x64>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016b2:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <_sbrk+0x64>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <_sbrk+0x64>)
 80016bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016be:	68fb      	ldr	r3, [r7, #12]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20005000 	.word	0x20005000
 80016cc:	00000400 	.word	0x00000400
 80016d0:	2000013c 	.word	0x2000013c
 80016d4:	20000308 	.word	0x20000308

080016d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <traffic_light1>:


#include"traffic_light.h"

//Display led traffic 1
void traffic_light1(int status1){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d836      	bhi.n	8001760 <traffic_light1+0x7c>
 80016f2:	a201      	add	r2, pc, #4	; (adr r2, 80016f8 <traffic_light1+0x14>)
 80016f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f8:	08001709 	.word	0x08001709
 80016fc:	0800171f 	.word	0x0800171f
 8001700:	0800174b 	.word	0x0800174b
 8001704:	08001735 	.word	0x08001735
	switch(status1){
			case INIT_LED:
				HAL_GPIO_WritePin(LED1_3_GPIO_Port, LED1_3_Pin, GPIO_PIN_RESET);
 8001708:	2200      	movs	r2, #0
 800170a:	2108      	movs	r1, #8
 800170c:	4817      	ldr	r0, [pc, #92]	; (800176c <traffic_light1+0x88>)
 800170e:	f000 fd6c 	bl	80021ea <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_5_GPIO_Port, LED1_5_Pin, GPIO_PIN_RESET);
 8001712:	2200      	movs	r2, #0
 8001714:	2120      	movs	r1, #32
 8001716:	4815      	ldr	r0, [pc, #84]	; (800176c <traffic_light1+0x88>)
 8001718:	f000 fd67 	bl	80021ea <HAL_GPIO_WritePin>
				break;
 800171c:	e021      	b.n	8001762 <traffic_light1+0x7e>

			case AUTO_RED1:
				HAL_GPIO_WritePin(LED1_3_GPIO_Port, LED1_3_Pin, GPIO_PIN_SET);
 800171e:	2201      	movs	r2, #1
 8001720:	2108      	movs	r1, #8
 8001722:	4812      	ldr	r0, [pc, #72]	; (800176c <traffic_light1+0x88>)
 8001724:	f000 fd61 	bl	80021ea <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_5_GPIO_Port, LED1_5_Pin, GPIO_PIN_SET);
 8001728:	2201      	movs	r2, #1
 800172a:	2120      	movs	r1, #32
 800172c:	480f      	ldr	r0, [pc, #60]	; (800176c <traffic_light1+0x88>)
 800172e:	f000 fd5c 	bl	80021ea <HAL_GPIO_WritePin>
				break;
 8001732:	e016      	b.n	8001762 <traffic_light1+0x7e>

			case AUTO_AMBER1:
				HAL_GPIO_WritePin(LED1_3_GPIO_Port, LED1_3_Pin, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	2108      	movs	r1, #8
 8001738:	480c      	ldr	r0, [pc, #48]	; (800176c <traffic_light1+0x88>)
 800173a:	f000 fd56 	bl	80021ea <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_5_GPIO_Port, LED1_5_Pin, GPIO_PIN_SET);
 800173e:	2201      	movs	r2, #1
 8001740:	2120      	movs	r1, #32
 8001742:	480a      	ldr	r0, [pc, #40]	; (800176c <traffic_light1+0x88>)
 8001744:	f000 fd51 	bl	80021ea <HAL_GPIO_WritePin>
				break;
 8001748:	e00b      	b.n	8001762 <traffic_light1+0x7e>

			case AUTO_GREEN1:
				HAL_GPIO_WritePin(LED1_3_GPIO_Port, LED1_3_Pin, GPIO_PIN_SET);
 800174a:	2201      	movs	r2, #1
 800174c:	2108      	movs	r1, #8
 800174e:	4807      	ldr	r0, [pc, #28]	; (800176c <traffic_light1+0x88>)
 8001750:	f000 fd4b 	bl	80021ea <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_5_GPIO_Port, LED1_5_Pin, GPIO_PIN_RESET);
 8001754:	2200      	movs	r2, #0
 8001756:	2120      	movs	r1, #32
 8001758:	4804      	ldr	r0, [pc, #16]	; (800176c <traffic_light1+0x88>)
 800175a:	f000 fd46 	bl	80021ea <HAL_GPIO_WritePin>
				break;
 800175e:	e000      	b.n	8001762 <traffic_light1+0x7e>

			default:
				break;
 8001760:	bf00      	nop
		}
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40010c00 	.word	0x40010c00

08001770 <traffic_light2>:


//Display led traffic 2
void traffic_light2(int status2){
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b07      	cmp	r3, #7
 800177c:	d846      	bhi.n	800180c <traffic_light2+0x9c>
 800177e:	a201      	add	r2, pc, #4	; (adr r2, 8001784 <traffic_light2+0x14>)
 8001780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001784:	080017a5 	.word	0x080017a5
 8001788:	0800180d 	.word	0x0800180d
 800178c:	0800180d 	.word	0x0800180d
 8001790:	0800180d 	.word	0x0800180d
 8001794:	0800180d 	.word	0x0800180d
 8001798:	080017bf 	.word	0x080017bf
 800179c:	080017f3 	.word	0x080017f3
 80017a0:	080017d9 	.word	0x080017d9
	switch(status2){
			case INIT_LED:
				HAL_GPIO_WritePin(LED4_9_GPIO_Port, LED4_9_Pin, GPIO_PIN_RESET);
 80017a4:	2200      	movs	r2, #0
 80017a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017aa:	481b      	ldr	r0, [pc, #108]	; (8001818 <traffic_light2+0xa8>)
 80017ac:	f000 fd1d 	bl	80021ea <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED4_8_GPIO_Port, LED4_8_Pin, GPIO_PIN_RESET);
 80017b0:	2200      	movs	r2, #0
 80017b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017b6:	4818      	ldr	r0, [pc, #96]	; (8001818 <traffic_light2+0xa8>)
 80017b8:	f000 fd17 	bl	80021ea <HAL_GPIO_WritePin>
				break;
 80017bc:	e027      	b.n	800180e <traffic_light2+0x9e>

			case AUTO_RED2:
				HAL_GPIO_WritePin(LED4_9_GPIO_Port, LED4_9_Pin, GPIO_PIN_SET);
 80017be:	2201      	movs	r2, #1
 80017c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017c4:	4814      	ldr	r0, [pc, #80]	; (8001818 <traffic_light2+0xa8>)
 80017c6:	f000 fd10 	bl	80021ea <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED4_8_GPIO_Port, LED4_8_Pin, GPIO_PIN_SET);
 80017ca:	2201      	movs	r2, #1
 80017cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017d0:	4811      	ldr	r0, [pc, #68]	; (8001818 <traffic_light2+0xa8>)
 80017d2:	f000 fd0a 	bl	80021ea <HAL_GPIO_WritePin>
				break;
 80017d6:	e01a      	b.n	800180e <traffic_light2+0x9e>

			case AUTO_AMBER2:
				HAL_GPIO_WritePin(LED4_9_GPIO_Port, LED4_9_Pin, GPIO_PIN_SET);
 80017d8:	2201      	movs	r2, #1
 80017da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017de:	480e      	ldr	r0, [pc, #56]	; (8001818 <traffic_light2+0xa8>)
 80017e0:	f000 fd03 	bl	80021ea <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED4_8_GPIO_Port, LED4_8_Pin, GPIO_PIN_RESET);
 80017e4:	2200      	movs	r2, #0
 80017e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017ea:	480b      	ldr	r0, [pc, #44]	; (8001818 <traffic_light2+0xa8>)
 80017ec:	f000 fcfd 	bl	80021ea <HAL_GPIO_WritePin>
				break;
 80017f0:	e00d      	b.n	800180e <traffic_light2+0x9e>

			case AUTO_GREEN2:
				HAL_GPIO_WritePin(LED4_9_GPIO_Port, LED4_9_Pin, GPIO_PIN_RESET);
 80017f2:	2200      	movs	r2, #0
 80017f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017f8:	4807      	ldr	r0, [pc, #28]	; (8001818 <traffic_light2+0xa8>)
 80017fa:	f000 fcf6 	bl	80021ea <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED4_8_GPIO_Port, LED4_8_Pin, GPIO_PIN_SET);
 80017fe:	2201      	movs	r2, #1
 8001800:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001804:	4804      	ldr	r0, [pc, #16]	; (8001818 <traffic_light2+0xa8>)
 8001806:	f000 fcf0 	bl	80021ea <HAL_GPIO_WritePin>
				break;
 800180a:	e000      	b.n	800180e <traffic_light2+0x9e>

			default:
				break;
 800180c:	bf00      	nop
		}
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40010800 	.word	0x40010800

0800181c <fsm_automatic_traffic_light>:


//Control led value in traffic_led
void fsm_automatic_traffic_light(){
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
	if(status0 == MODE1){
 8001820:	4b67      	ldr	r3, [pc, #412]	; (80019c0 <fsm_automatic_traffic_light+0x1a4>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b0b      	cmp	r3, #11
 8001826:	f040 80be 	bne.w	80019a6 <fsm_automatic_traffic_light+0x18a>
		switch(status1){
 800182a:	4b66      	ldr	r3, [pc, #408]	; (80019c4 <fsm_automatic_traffic_light+0x1a8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b03      	cmp	r3, #3
 8001830:	d851      	bhi.n	80018d6 <fsm_automatic_traffic_light+0xba>
 8001832:	a201      	add	r2, pc, #4	; (adr r2, 8001838 <fsm_automatic_traffic_light+0x1c>)
 8001834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001838:	08001849 	.word	0x08001849
 800183c:	08001865 	.word	0x08001865
 8001840:	080018b1 	.word	0x080018b1
 8001844:	0800188b 	.word	0x0800188b
				case INIT_LED:
					if(timer_flag[0] == 1){
 8001848:	4b5f      	ldr	r3, [pc, #380]	; (80019c8 <fsm_automatic_traffic_light+0x1ac>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d144      	bne.n	80018da <fsm_automatic_traffic_light+0xbe>
						status1 = AUTO_RED1;
 8001850:	4b5c      	ldr	r3, [pc, #368]	; (80019c4 <fsm_automatic_traffic_light+0x1a8>)
 8001852:	2201      	movs	r2, #1
 8001854:	601a      	str	r2, [r3, #0]
						setTimer0(0, TIME_RED);
 8001856:	4b5d      	ldr	r3, [pc, #372]	; (80019cc <fsm_automatic_traffic_light+0x1b0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4619      	mov	r1, r3
 800185c:	2000      	movs	r0, #0
 800185e:	f7ff fcdf 	bl	8001220 <setTimer0>
					}
					break;
 8001862:	e03a      	b.n	80018da <fsm_automatic_traffic_light+0xbe>

				case AUTO_RED1:
					traffic_light1(status1);
 8001864:	4b57      	ldr	r3, [pc, #348]	; (80019c4 <fsm_automatic_traffic_light+0x1a8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff3b 	bl	80016e4 <traffic_light1>
					if(timer_flag[0] == 1){
 800186e:	4b56      	ldr	r3, [pc, #344]	; (80019c8 <fsm_automatic_traffic_light+0x1ac>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d133      	bne.n	80018de <fsm_automatic_traffic_light+0xc2>
						status1 = AUTO_GREEN1;
 8001876:	4b53      	ldr	r3, [pc, #332]	; (80019c4 <fsm_automatic_traffic_light+0x1a8>)
 8001878:	2202      	movs	r2, #2
 800187a:	601a      	str	r2, [r3, #0]
						setTimer0(0, TIME_GREEN);
 800187c:	4b54      	ldr	r3, [pc, #336]	; (80019d0 <fsm_automatic_traffic_light+0x1b4>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4619      	mov	r1, r3
 8001882:	2000      	movs	r0, #0
 8001884:	f7ff fccc 	bl	8001220 <setTimer0>
					}
					break;
 8001888:	e029      	b.n	80018de <fsm_automatic_traffic_light+0xc2>

				case AUTO_AMBER1:
					traffic_light1(status1);
 800188a:	4b4e      	ldr	r3, [pc, #312]	; (80019c4 <fsm_automatic_traffic_light+0x1a8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff ff28 	bl	80016e4 <traffic_light1>
					if(timer_flag[0] == 1){
 8001894:	4b4c      	ldr	r3, [pc, #304]	; (80019c8 <fsm_automatic_traffic_light+0x1ac>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d122      	bne.n	80018e2 <fsm_automatic_traffic_light+0xc6>
						status1 = AUTO_RED1;
 800189c:	4b49      	ldr	r3, [pc, #292]	; (80019c4 <fsm_automatic_traffic_light+0x1a8>)
 800189e:	2201      	movs	r2, #1
 80018a0:	601a      	str	r2, [r3, #0]
						setTimer0(0, TIME_RED);
 80018a2:	4b4a      	ldr	r3, [pc, #296]	; (80019cc <fsm_automatic_traffic_light+0x1b0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4619      	mov	r1, r3
 80018a8:	2000      	movs	r0, #0
 80018aa:	f7ff fcb9 	bl	8001220 <setTimer0>
					}
					break;
 80018ae:	e018      	b.n	80018e2 <fsm_automatic_traffic_light+0xc6>

				case AUTO_GREEN1:
					traffic_light1(status1);
 80018b0:	4b44      	ldr	r3, [pc, #272]	; (80019c4 <fsm_automatic_traffic_light+0x1a8>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff ff15 	bl	80016e4 <traffic_light1>
					if(timer_flag[0] == 1){
 80018ba:	4b43      	ldr	r3, [pc, #268]	; (80019c8 <fsm_automatic_traffic_light+0x1ac>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d111      	bne.n	80018e6 <fsm_automatic_traffic_light+0xca>
						status1 = AUTO_AMBER1;
 80018c2:	4b40      	ldr	r3, [pc, #256]	; (80019c4 <fsm_automatic_traffic_light+0x1a8>)
 80018c4:	2203      	movs	r2, #3
 80018c6:	601a      	str	r2, [r3, #0]
						setTimer0(0, TIME_YELLOW);
 80018c8:	4b42      	ldr	r3, [pc, #264]	; (80019d4 <fsm_automatic_traffic_light+0x1b8>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4619      	mov	r1, r3
 80018ce:	2000      	movs	r0, #0
 80018d0:	f7ff fca6 	bl	8001220 <setTimer0>
					}
					break;
 80018d4:	e007      	b.n	80018e6 <fsm_automatic_traffic_light+0xca>

				default:
					break;
 80018d6:	bf00      	nop
 80018d8:	e006      	b.n	80018e8 <fsm_automatic_traffic_light+0xcc>
					break;
 80018da:	bf00      	nop
 80018dc:	e004      	b.n	80018e8 <fsm_automatic_traffic_light+0xcc>
					break;
 80018de:	bf00      	nop
 80018e0:	e002      	b.n	80018e8 <fsm_automatic_traffic_light+0xcc>
					break;
 80018e2:	bf00      	nop
 80018e4:	e000      	b.n	80018e8 <fsm_automatic_traffic_light+0xcc>
					break;
 80018e6:	bf00      	nop
		}

		switch(status2){
 80018e8:	4b3b      	ldr	r3, [pc, #236]	; (80019d8 <fsm_automatic_traffic_light+0x1bc>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b07      	cmp	r3, #7
 80018ee:	d85c      	bhi.n	80019aa <fsm_automatic_traffic_light+0x18e>
 80018f0:	a201      	add	r2, pc, #4	; (adr r2, 80018f8 <fsm_automatic_traffic_light+0xdc>)
 80018f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f6:	bf00      	nop
 80018f8:	08001919 	.word	0x08001919
 80018fc:	080019ab 	.word	0x080019ab
 8001900:	080019ab 	.word	0x080019ab
 8001904:	080019ab 	.word	0x080019ab
 8001908:	080019ab 	.word	0x080019ab
 800190c:	08001935 	.word	0x08001935
 8001910:	08001981 	.word	0x08001981
 8001914:	0800195b 	.word	0x0800195b
				case INIT_LED:
					if(timer_flag[1] == 1){
 8001918:	4b2b      	ldr	r3, [pc, #172]	; (80019c8 <fsm_automatic_traffic_light+0x1ac>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d146      	bne.n	80019ae <fsm_automatic_traffic_light+0x192>
						status2 = AUTO_GREEN2;
 8001920:	4b2d      	ldr	r3, [pc, #180]	; (80019d8 <fsm_automatic_traffic_light+0x1bc>)
 8001922:	2206      	movs	r2, #6
 8001924:	601a      	str	r2, [r3, #0]
						setTimer0(1, TIME_GREEN);
 8001926:	4b2a      	ldr	r3, [pc, #168]	; (80019d0 <fsm_automatic_traffic_light+0x1b4>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4619      	mov	r1, r3
 800192c:	2001      	movs	r0, #1
 800192e:	f7ff fc77 	bl	8001220 <setTimer0>
					}
					break;
 8001932:	e03c      	b.n	80019ae <fsm_automatic_traffic_light+0x192>

				case AUTO_RED2:
					traffic_light2(status2);
 8001934:	4b28      	ldr	r3, [pc, #160]	; (80019d8 <fsm_automatic_traffic_light+0x1bc>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff19 	bl	8001770 <traffic_light2>
					if(timer_flag[1] == 1){
 800193e:	4b22      	ldr	r3, [pc, #136]	; (80019c8 <fsm_automatic_traffic_light+0x1ac>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d135      	bne.n	80019b2 <fsm_automatic_traffic_light+0x196>
						status2 = AUTO_GREEN2;
 8001946:	4b24      	ldr	r3, [pc, #144]	; (80019d8 <fsm_automatic_traffic_light+0x1bc>)
 8001948:	2206      	movs	r2, #6
 800194a:	601a      	str	r2, [r3, #0]
						setTimer0(1, TIME_GREEN);
 800194c:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <fsm_automatic_traffic_light+0x1b4>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4619      	mov	r1, r3
 8001952:	2001      	movs	r0, #1
 8001954:	f7ff fc64 	bl	8001220 <setTimer0>
					}

					break;
 8001958:	e02b      	b.n	80019b2 <fsm_automatic_traffic_light+0x196>

				case AUTO_AMBER2:
					traffic_light2(status2);
 800195a:	4b1f      	ldr	r3, [pc, #124]	; (80019d8 <fsm_automatic_traffic_light+0x1bc>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff ff06 	bl	8001770 <traffic_light2>
					if(timer_flag[1] == 1){
 8001964:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <fsm_automatic_traffic_light+0x1ac>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d124      	bne.n	80019b6 <fsm_automatic_traffic_light+0x19a>
						status2 = AUTO_RED2;
 800196c:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <fsm_automatic_traffic_light+0x1bc>)
 800196e:	2205      	movs	r2, #5
 8001970:	601a      	str	r2, [r3, #0]
						setTimer0(1, TIME_RED);
 8001972:	4b16      	ldr	r3, [pc, #88]	; (80019cc <fsm_automatic_traffic_light+0x1b0>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4619      	mov	r1, r3
 8001978:	2001      	movs	r0, #1
 800197a:	f7ff fc51 	bl	8001220 <setTimer0>
					}

					break;
 800197e:	e01a      	b.n	80019b6 <fsm_automatic_traffic_light+0x19a>

				case AUTO_GREEN2:
					traffic_light2(status2);
 8001980:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <fsm_automatic_traffic_light+0x1bc>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fef3 	bl	8001770 <traffic_light2>
					if(timer_flag[1] == 1){
 800198a:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <fsm_automatic_traffic_light+0x1ac>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d113      	bne.n	80019ba <fsm_automatic_traffic_light+0x19e>
						status2 = AUTO_AMBER2;
 8001992:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <fsm_automatic_traffic_light+0x1bc>)
 8001994:	2207      	movs	r2, #7
 8001996:	601a      	str	r2, [r3, #0]
						setTimer0(1, TIME_YELLOW);
 8001998:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <fsm_automatic_traffic_light+0x1b8>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4619      	mov	r1, r3
 800199e:	2001      	movs	r0, #1
 80019a0:	f7ff fc3e 	bl	8001220 <setTimer0>
					}

					break;
 80019a4:	e009      	b.n	80019ba <fsm_automatic_traffic_light+0x19e>

				default:
					break;
			}
	}
 80019a6:	bf00      	nop
 80019a8:	e008      	b.n	80019bc <fsm_automatic_traffic_light+0x1a0>
					break;
 80019aa:	bf00      	nop
 80019ac:	e006      	b.n	80019bc <fsm_automatic_traffic_light+0x1a0>
					break;
 80019ae:	bf00      	nop
 80019b0:	e004      	b.n	80019bc <fsm_automatic_traffic_light+0x1a0>
					break;
 80019b2:	bf00      	nop
 80019b4:	e002      	b.n	80019bc <fsm_automatic_traffic_light+0x1a0>
					break;
 80019b6:	bf00      	nop
 80019b8:	e000      	b.n	80019bc <fsm_automatic_traffic_light+0x1a0>
					break;
 80019ba:	bf00      	nop
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	2000011c 	.word	0x2000011c
 80019c4:	20000120 	.word	0x20000120
 80019c8:	200002cc 	.word	0x200002cc
 80019cc:	20000058 	.word	0x20000058
 80019d0:	20000060 	.word	0x20000060
 80019d4:	2000005c 	.word	0x2000005c
 80019d8:	20000124 	.word	0x20000124

080019dc <Reset_Handler>:
 80019dc:	f7ff fe7c 	bl	80016d8 <SystemInit>
 80019e0:	480b      	ldr	r0, [pc, #44]	; (8001a10 <LoopFillZerobss+0xe>)
 80019e2:	490c      	ldr	r1, [pc, #48]	; (8001a14 <LoopFillZerobss+0x12>)
 80019e4:	4a0c      	ldr	r2, [pc, #48]	; (8001a18 <LoopFillZerobss+0x16>)
 80019e6:	2300      	movs	r3, #0
 80019e8:	e002      	b.n	80019f0 <LoopCopyDataInit>

080019ea <CopyDataInit>:
 80019ea:	58d4      	ldr	r4, [r2, r3]
 80019ec:	50c4      	str	r4, [r0, r3]
 80019ee:	3304      	adds	r3, #4

080019f0 <LoopCopyDataInit>:
 80019f0:	18c4      	adds	r4, r0, r3
 80019f2:	428c      	cmp	r4, r1
 80019f4:	d3f9      	bcc.n	80019ea <CopyDataInit>
 80019f6:	4a09      	ldr	r2, [pc, #36]	; (8001a1c <LoopFillZerobss+0x1a>)
 80019f8:	4c09      	ldr	r4, [pc, #36]	; (8001a20 <LoopFillZerobss+0x1e>)
 80019fa:	2300      	movs	r3, #0
 80019fc:	e001      	b.n	8001a02 <LoopFillZerobss>

080019fe <FillZerobss>:
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	3204      	adds	r2, #4

08001a02 <LoopFillZerobss>:
 8001a02:	42a2      	cmp	r2, r4
 8001a04:	d3fb      	bcc.n	80019fe <FillZerobss>
 8001a06:	f002 ff31 	bl	800486c <__libc_init_array>
 8001a0a:	f7ff fa6b 	bl	8000ee4 <main>
 8001a0e:	4770      	bx	lr
 8001a10:	20000000 	.word	0x20000000
 8001a14:	200000ec 	.word	0x200000ec
 8001a18:	080060d8 	.word	0x080060d8
 8001a1c:	200000ec 	.word	0x200000ec
 8001a20:	20000308 	.word	0x20000308

08001a24 <ADC1_2_IRQHandler>:
 8001a24:	e7fe      	b.n	8001a24 <ADC1_2_IRQHandler>
	...

08001a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <HAL_Init+0x28>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <HAL_Init+0x28>)
 8001a32:	f043 0310 	orr.w	r3, r3, #16
 8001a36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a38:	2003      	movs	r0, #3
 8001a3a:	f000 f947 	bl	8001ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a3e:	200f      	movs	r0, #15
 8001a40:	f000 f808 	bl	8001a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a44:	f7ff fc54 	bl	80012f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40022000 	.word	0x40022000

08001a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a5c:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <HAL_InitTick+0x54>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b12      	ldr	r3, [pc, #72]	; (8001aac <HAL_InitTick+0x58>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4619      	mov	r1, r3
 8001a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 f95f 	bl	8001d36 <HAL_SYSTICK_Config>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e00e      	b.n	8001aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b0f      	cmp	r3, #15
 8001a86:	d80a      	bhi.n	8001a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a90:	f000 f927 	bl	8001ce2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a94:	4a06      	ldr	r2, [pc, #24]	; (8001ab0 <HAL_InitTick+0x5c>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e000      	b.n	8001aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	2000007c 	.word	0x2000007c
 8001aac:	20000084 	.word	0x20000084
 8001ab0:	20000080 	.word	0x20000080

08001ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <HAL_IncTick+0x1c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <HAL_IncTick+0x20>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	4a03      	ldr	r2, [pc, #12]	; (8001ad4 <HAL_IncTick+0x20>)
 8001ac6:	6013      	str	r3, [r2, #0]
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	20000084 	.word	0x20000084
 8001ad4:	200002f4 	.word	0x200002f4

08001ad8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return uwTick;
 8001adc:	4b02      	ldr	r3, [pc, #8]	; (8001ae8 <HAL_GetTick+0x10>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	200002f4 	.word	0x200002f4

08001aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af4:	f7ff fff0 	bl	8001ad8 <HAL_GetTick>
 8001af8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b04:	d005      	beq.n	8001b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <HAL_Delay+0x44>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4413      	add	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b12:	bf00      	nop
 8001b14:	f7ff ffe0 	bl	8001ad8 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d8f7      	bhi.n	8001b14 <HAL_Delay+0x28>
  {
  }
}
 8001b24:	bf00      	nop
 8001b26:	bf00      	nop
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000084 	.word	0x20000084

08001b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <__NVIC_SetPriorityGrouping+0x44>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b50:	4013      	ands	r3, r2
 8001b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b66:	4a04      	ldr	r2, [pc, #16]	; (8001b78 <__NVIC_SetPriorityGrouping+0x44>)
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	60d3      	str	r3, [r2, #12]
}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b80:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <__NVIC_GetPriorityGrouping+0x18>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	0a1b      	lsrs	r3, r3, #8
 8001b86:	f003 0307 	and.w	r3, r3, #7
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	db0b      	blt.n	8001bc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	f003 021f 	and.w	r2, r3, #31
 8001bb0:	4906      	ldr	r1, [pc, #24]	; (8001bcc <__NVIC_EnableIRQ+0x34>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	095b      	lsrs	r3, r3, #5
 8001bb8:	2001      	movs	r0, #1
 8001bba:	fa00 f202 	lsl.w	r2, r0, r2
 8001bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr
 8001bcc:	e000e100 	.word	0xe000e100

08001bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	6039      	str	r1, [r7, #0]
 8001bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	db0a      	blt.n	8001bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	490c      	ldr	r1, [pc, #48]	; (8001c1c <__NVIC_SetPriority+0x4c>)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	0112      	lsls	r2, r2, #4
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf8:	e00a      	b.n	8001c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	4908      	ldr	r1, [pc, #32]	; (8001c20 <__NVIC_SetPriority+0x50>)
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	3b04      	subs	r3, #4
 8001c08:	0112      	lsls	r2, r2, #4
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	761a      	strb	r2, [r3, #24]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	e000e100 	.word	0xe000e100
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b089      	sub	sp, #36	; 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f1c3 0307 	rsb	r3, r3, #7
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	bf28      	it	cs
 8001c42:	2304      	movcs	r3, #4
 8001c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	2b06      	cmp	r3, #6
 8001c4c:	d902      	bls.n	8001c54 <NVIC_EncodePriority+0x30>
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3b03      	subs	r3, #3
 8001c52:	e000      	b.n	8001c56 <NVIC_EncodePriority+0x32>
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	f04f 32ff 	mov.w	r2, #4294967295
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43da      	mvns	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	401a      	ands	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	fa01 f303 	lsl.w	r3, r1, r3
 8001c76:	43d9      	mvns	r1, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7c:	4313      	orrs	r3, r2
         );
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3724      	adds	r7, #36	; 0x24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr

08001c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c98:	d301      	bcc.n	8001c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e00f      	b.n	8001cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c9e:	4a0a      	ldr	r2, [pc, #40]	; (8001cc8 <SysTick_Config+0x40>)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ca6:	210f      	movs	r1, #15
 8001ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cac:	f7ff ff90 	bl	8001bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cb0:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <SysTick_Config+0x40>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb6:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <SysTick_Config+0x40>)
 8001cb8:	2207      	movs	r2, #7
 8001cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	e000e010 	.word	0xe000e010

08001ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff ff2d 	bl	8001b34 <__NVIC_SetPriorityGrouping>
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b086      	sub	sp, #24
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	4603      	mov	r3, r0
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf4:	f7ff ff42 	bl	8001b7c <__NVIC_GetPriorityGrouping>
 8001cf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	68b9      	ldr	r1, [r7, #8]
 8001cfe:	6978      	ldr	r0, [r7, #20]
 8001d00:	f7ff ff90 	bl	8001c24 <NVIC_EncodePriority>
 8001d04:	4602      	mov	r2, r0
 8001d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff5f 	bl	8001bd0 <__NVIC_SetPriority>
}
 8001d12:	bf00      	nop
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	4603      	mov	r3, r0
 8001d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff ff35 	bl	8001b98 <__NVIC_EnableIRQ>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff ffa2 	bl	8001c88 <SysTick_Config>
 8001d44:	4603      	mov	r3, r0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b085      	sub	sp, #20
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d56:	2300      	movs	r3, #0
 8001d58:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d008      	beq.n	8001d78 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2204      	movs	r2, #4
 8001d6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e020      	b.n	8001dba <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 020e 	bic.w	r2, r2, #14
 8001d86:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0201 	bic.w	r2, r2, #1
 8001d96:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da0:	2101      	movs	r1, #1
 8001da2:	fa01 f202 	lsl.w	r2, r1, r2
 8001da6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d005      	beq.n	8001de8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2204      	movs	r2, #4
 8001de0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	73fb      	strb	r3, [r7, #15]
 8001de6:	e051      	b.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 020e 	bic.w	r2, r2, #14
 8001df6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0201 	bic.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a22      	ldr	r2, [pc, #136]	; (8001e98 <HAL_DMA_Abort_IT+0xd4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d029      	beq.n	8001e66 <HAL_DMA_Abort_IT+0xa2>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a21      	ldr	r2, [pc, #132]	; (8001e9c <HAL_DMA_Abort_IT+0xd8>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d022      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x9e>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a1f      	ldr	r2, [pc, #124]	; (8001ea0 <HAL_DMA_Abort_IT+0xdc>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d01a      	beq.n	8001e5c <HAL_DMA_Abort_IT+0x98>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a1e      	ldr	r2, [pc, #120]	; (8001ea4 <HAL_DMA_Abort_IT+0xe0>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d012      	beq.n	8001e56 <HAL_DMA_Abort_IT+0x92>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1c      	ldr	r2, [pc, #112]	; (8001ea8 <HAL_DMA_Abort_IT+0xe4>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d00a      	beq.n	8001e50 <HAL_DMA_Abort_IT+0x8c>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a1b      	ldr	r2, [pc, #108]	; (8001eac <HAL_DMA_Abort_IT+0xe8>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d102      	bne.n	8001e4a <HAL_DMA_Abort_IT+0x86>
 8001e44:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e48:	e00e      	b.n	8001e68 <HAL_DMA_Abort_IT+0xa4>
 8001e4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e4e:	e00b      	b.n	8001e68 <HAL_DMA_Abort_IT+0xa4>
 8001e50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e54:	e008      	b.n	8001e68 <HAL_DMA_Abort_IT+0xa4>
 8001e56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e5a:	e005      	b.n	8001e68 <HAL_DMA_Abort_IT+0xa4>
 8001e5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e60:	e002      	b.n	8001e68 <HAL_DMA_Abort_IT+0xa4>
 8001e62:	2310      	movs	r3, #16
 8001e64:	e000      	b.n	8001e68 <HAL_DMA_Abort_IT+0xa4>
 8001e66:	2301      	movs	r3, #1
 8001e68:	4a11      	ldr	r2, [pc, #68]	; (8001eb0 <HAL_DMA_Abort_IT+0xec>)
 8001e6a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	4798      	blx	r3
    } 
  }
  return status;
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40020008 	.word	0x40020008
 8001e9c:	4002001c 	.word	0x4002001c
 8001ea0:	40020030 	.word	0x40020030
 8001ea4:	40020044 	.word	0x40020044
 8001ea8:	40020058 	.word	0x40020058
 8001eac:	4002006c 	.word	0x4002006c
 8001eb0:	40020000 	.word	0x40020000

08001eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b08b      	sub	sp, #44	; 0x2c
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ec6:	e169      	b.n	800219c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ec8:	2201      	movs	r2, #1
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	69fa      	ldr	r2, [r7, #28]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	f040 8158 	bne.w	8002196 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	4a9a      	ldr	r2, [pc, #616]	; (8002154 <HAL_GPIO_Init+0x2a0>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d05e      	beq.n	8001fae <HAL_GPIO_Init+0xfa>
 8001ef0:	4a98      	ldr	r2, [pc, #608]	; (8002154 <HAL_GPIO_Init+0x2a0>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d875      	bhi.n	8001fe2 <HAL_GPIO_Init+0x12e>
 8001ef6:	4a98      	ldr	r2, [pc, #608]	; (8002158 <HAL_GPIO_Init+0x2a4>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d058      	beq.n	8001fae <HAL_GPIO_Init+0xfa>
 8001efc:	4a96      	ldr	r2, [pc, #600]	; (8002158 <HAL_GPIO_Init+0x2a4>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d86f      	bhi.n	8001fe2 <HAL_GPIO_Init+0x12e>
 8001f02:	4a96      	ldr	r2, [pc, #600]	; (800215c <HAL_GPIO_Init+0x2a8>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d052      	beq.n	8001fae <HAL_GPIO_Init+0xfa>
 8001f08:	4a94      	ldr	r2, [pc, #592]	; (800215c <HAL_GPIO_Init+0x2a8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d869      	bhi.n	8001fe2 <HAL_GPIO_Init+0x12e>
 8001f0e:	4a94      	ldr	r2, [pc, #592]	; (8002160 <HAL_GPIO_Init+0x2ac>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d04c      	beq.n	8001fae <HAL_GPIO_Init+0xfa>
 8001f14:	4a92      	ldr	r2, [pc, #584]	; (8002160 <HAL_GPIO_Init+0x2ac>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d863      	bhi.n	8001fe2 <HAL_GPIO_Init+0x12e>
 8001f1a:	4a92      	ldr	r2, [pc, #584]	; (8002164 <HAL_GPIO_Init+0x2b0>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d046      	beq.n	8001fae <HAL_GPIO_Init+0xfa>
 8001f20:	4a90      	ldr	r2, [pc, #576]	; (8002164 <HAL_GPIO_Init+0x2b0>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d85d      	bhi.n	8001fe2 <HAL_GPIO_Init+0x12e>
 8001f26:	2b12      	cmp	r3, #18
 8001f28:	d82a      	bhi.n	8001f80 <HAL_GPIO_Init+0xcc>
 8001f2a:	2b12      	cmp	r3, #18
 8001f2c:	d859      	bhi.n	8001fe2 <HAL_GPIO_Init+0x12e>
 8001f2e:	a201      	add	r2, pc, #4	; (adr r2, 8001f34 <HAL_GPIO_Init+0x80>)
 8001f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f34:	08001faf 	.word	0x08001faf
 8001f38:	08001f89 	.word	0x08001f89
 8001f3c:	08001f9b 	.word	0x08001f9b
 8001f40:	08001fdd 	.word	0x08001fdd
 8001f44:	08001fe3 	.word	0x08001fe3
 8001f48:	08001fe3 	.word	0x08001fe3
 8001f4c:	08001fe3 	.word	0x08001fe3
 8001f50:	08001fe3 	.word	0x08001fe3
 8001f54:	08001fe3 	.word	0x08001fe3
 8001f58:	08001fe3 	.word	0x08001fe3
 8001f5c:	08001fe3 	.word	0x08001fe3
 8001f60:	08001fe3 	.word	0x08001fe3
 8001f64:	08001fe3 	.word	0x08001fe3
 8001f68:	08001fe3 	.word	0x08001fe3
 8001f6c:	08001fe3 	.word	0x08001fe3
 8001f70:	08001fe3 	.word	0x08001fe3
 8001f74:	08001fe3 	.word	0x08001fe3
 8001f78:	08001f91 	.word	0x08001f91
 8001f7c:	08001fa5 	.word	0x08001fa5
 8001f80:	4a79      	ldr	r2, [pc, #484]	; (8002168 <HAL_GPIO_Init+0x2b4>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d013      	beq.n	8001fae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f86:	e02c      	b.n	8001fe2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	623b      	str	r3, [r7, #32]
          break;
 8001f8e:	e029      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	3304      	adds	r3, #4
 8001f96:	623b      	str	r3, [r7, #32]
          break;
 8001f98:	e024      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	3308      	adds	r3, #8
 8001fa0:	623b      	str	r3, [r7, #32]
          break;
 8001fa2:	e01f      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	330c      	adds	r3, #12
 8001faa:	623b      	str	r3, [r7, #32]
          break;
 8001fac:	e01a      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d102      	bne.n	8001fbc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fb6:	2304      	movs	r3, #4
 8001fb8:	623b      	str	r3, [r7, #32]
          break;
 8001fba:	e013      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d105      	bne.n	8001fd0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fc4:	2308      	movs	r3, #8
 8001fc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69fa      	ldr	r2, [r7, #28]
 8001fcc:	611a      	str	r2, [r3, #16]
          break;
 8001fce:	e009      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fd0:	2308      	movs	r3, #8
 8001fd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69fa      	ldr	r2, [r7, #28]
 8001fd8:	615a      	str	r2, [r3, #20]
          break;
 8001fda:	e003      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	623b      	str	r3, [r7, #32]
          break;
 8001fe0:	e000      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
          break;
 8001fe2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	2bff      	cmp	r3, #255	; 0xff
 8001fe8:	d801      	bhi.n	8001fee <HAL_GPIO_Init+0x13a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	e001      	b.n	8001ff2 <HAL_GPIO_Init+0x13e>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	2bff      	cmp	r3, #255	; 0xff
 8001ff8:	d802      	bhi.n	8002000 <HAL_GPIO_Init+0x14c>
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	e002      	b.n	8002006 <HAL_GPIO_Init+0x152>
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	3b08      	subs	r3, #8
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	210f      	movs	r1, #15
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	fa01 f303 	lsl.w	r3, r1, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	401a      	ands	r2, r3
 8002018:	6a39      	ldr	r1, [r7, #32]
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	fa01 f303 	lsl.w	r3, r1, r3
 8002020:	431a      	orrs	r2, r3
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 80b1 	beq.w	8002196 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002034:	4b4d      	ldr	r3, [pc, #308]	; (800216c <HAL_GPIO_Init+0x2b8>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	4a4c      	ldr	r2, [pc, #304]	; (800216c <HAL_GPIO_Init+0x2b8>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	6193      	str	r3, [r2, #24]
 8002040:	4b4a      	ldr	r3, [pc, #296]	; (800216c <HAL_GPIO_Init+0x2b8>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800204c:	4a48      	ldr	r2, [pc, #288]	; (8002170 <HAL_GPIO_Init+0x2bc>)
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	089b      	lsrs	r3, r3, #2
 8002052:	3302      	adds	r3, #2
 8002054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002058:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	220f      	movs	r2, #15
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	4013      	ands	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a40      	ldr	r2, [pc, #256]	; (8002174 <HAL_GPIO_Init+0x2c0>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d013      	beq.n	80020a0 <HAL_GPIO_Init+0x1ec>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a3f      	ldr	r2, [pc, #252]	; (8002178 <HAL_GPIO_Init+0x2c4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d00d      	beq.n	800209c <HAL_GPIO_Init+0x1e8>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a3e      	ldr	r2, [pc, #248]	; (800217c <HAL_GPIO_Init+0x2c8>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d007      	beq.n	8002098 <HAL_GPIO_Init+0x1e4>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a3d      	ldr	r2, [pc, #244]	; (8002180 <HAL_GPIO_Init+0x2cc>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d101      	bne.n	8002094 <HAL_GPIO_Init+0x1e0>
 8002090:	2303      	movs	r3, #3
 8002092:	e006      	b.n	80020a2 <HAL_GPIO_Init+0x1ee>
 8002094:	2304      	movs	r3, #4
 8002096:	e004      	b.n	80020a2 <HAL_GPIO_Init+0x1ee>
 8002098:	2302      	movs	r3, #2
 800209a:	e002      	b.n	80020a2 <HAL_GPIO_Init+0x1ee>
 800209c:	2301      	movs	r3, #1
 800209e:	e000      	b.n	80020a2 <HAL_GPIO_Init+0x1ee>
 80020a0:	2300      	movs	r3, #0
 80020a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a4:	f002 0203 	and.w	r2, r2, #3
 80020a8:	0092      	lsls	r2, r2, #2
 80020aa:	4093      	lsls	r3, r2
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020b2:	492f      	ldr	r1, [pc, #188]	; (8002170 <HAL_GPIO_Init+0x2bc>)
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	089b      	lsrs	r3, r3, #2
 80020b8:	3302      	adds	r3, #2
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d006      	beq.n	80020da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020cc:	4b2d      	ldr	r3, [pc, #180]	; (8002184 <HAL_GPIO_Init+0x2d0>)
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	492c      	ldr	r1, [pc, #176]	; (8002184 <HAL_GPIO_Init+0x2d0>)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	608b      	str	r3, [r1, #8]
 80020d8:	e006      	b.n	80020e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020da:	4b2a      	ldr	r3, [pc, #168]	; (8002184 <HAL_GPIO_Init+0x2d0>)
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	4928      	ldr	r1, [pc, #160]	; (8002184 <HAL_GPIO_Init+0x2d0>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d006      	beq.n	8002102 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020f4:	4b23      	ldr	r3, [pc, #140]	; (8002184 <HAL_GPIO_Init+0x2d0>)
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	4922      	ldr	r1, [pc, #136]	; (8002184 <HAL_GPIO_Init+0x2d0>)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60cb      	str	r3, [r1, #12]
 8002100:	e006      	b.n	8002110 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002102:	4b20      	ldr	r3, [pc, #128]	; (8002184 <HAL_GPIO_Init+0x2d0>)
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	43db      	mvns	r3, r3
 800210a:	491e      	ldr	r1, [pc, #120]	; (8002184 <HAL_GPIO_Init+0x2d0>)
 800210c:	4013      	ands	r3, r2
 800210e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d006      	beq.n	800212a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800211c:	4b19      	ldr	r3, [pc, #100]	; (8002184 <HAL_GPIO_Init+0x2d0>)
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	4918      	ldr	r1, [pc, #96]	; (8002184 <HAL_GPIO_Init+0x2d0>)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	604b      	str	r3, [r1, #4]
 8002128:	e006      	b.n	8002138 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800212a:	4b16      	ldr	r3, [pc, #88]	; (8002184 <HAL_GPIO_Init+0x2d0>)
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	43db      	mvns	r3, r3
 8002132:	4914      	ldr	r1, [pc, #80]	; (8002184 <HAL_GPIO_Init+0x2d0>)
 8002134:	4013      	ands	r3, r2
 8002136:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d021      	beq.n	8002188 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002144:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <HAL_GPIO_Init+0x2d0>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	490e      	ldr	r1, [pc, #56]	; (8002184 <HAL_GPIO_Init+0x2d0>)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	4313      	orrs	r3, r2
 800214e:	600b      	str	r3, [r1, #0]
 8002150:	e021      	b.n	8002196 <HAL_GPIO_Init+0x2e2>
 8002152:	bf00      	nop
 8002154:	10320000 	.word	0x10320000
 8002158:	10310000 	.word	0x10310000
 800215c:	10220000 	.word	0x10220000
 8002160:	10210000 	.word	0x10210000
 8002164:	10120000 	.word	0x10120000
 8002168:	10110000 	.word	0x10110000
 800216c:	40021000 	.word	0x40021000
 8002170:	40010000 	.word	0x40010000
 8002174:	40010800 	.word	0x40010800
 8002178:	40010c00 	.word	0x40010c00
 800217c:	40011000 	.word	0x40011000
 8002180:	40011400 	.word	0x40011400
 8002184:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_GPIO_Init+0x304>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	43db      	mvns	r3, r3
 8002190:	4909      	ldr	r1, [pc, #36]	; (80021b8 <HAL_GPIO_Init+0x304>)
 8002192:	4013      	ands	r3, r2
 8002194:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	3301      	adds	r3, #1
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	fa22 f303 	lsr.w	r3, r2, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f47f ae8e 	bne.w	8001ec8 <HAL_GPIO_Init+0x14>
  }
}
 80021ac:	bf00      	nop
 80021ae:	bf00      	nop
 80021b0:	372c      	adds	r7, #44	; 0x2c
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr
 80021b8:	40010400 	.word	0x40010400

080021bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	887b      	ldrh	r3, [r7, #2]
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d002      	beq.n	80021da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021d4:	2301      	movs	r3, #1
 80021d6:	73fb      	strb	r3, [r7, #15]
 80021d8:	e001      	b.n	80021de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021da:	2300      	movs	r3, #0
 80021dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021de:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr

080021ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	460b      	mov	r3, r1
 80021f4:	807b      	strh	r3, [r7, #2]
 80021f6:	4613      	mov	r3, r2
 80021f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021fa:	787b      	ldrb	r3, [r7, #1]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002200:	887a      	ldrh	r2, [r7, #2]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002206:	e003      	b.n	8002210 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002208:	887b      	ldrh	r3, [r7, #2]
 800220a:	041a      	lsls	r2, r3, #16
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	611a      	str	r2, [r3, #16]
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr

0800221a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800221a:	b480      	push	{r7}
 800221c:	b085      	sub	sp, #20
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	460b      	mov	r3, r1
 8002224:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800222c:	887a      	ldrh	r2, [r7, #2]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4013      	ands	r3, r2
 8002232:	041a      	lsls	r2, r3, #16
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	43d9      	mvns	r1, r3
 8002238:	887b      	ldrh	r3, [r7, #2]
 800223a:	400b      	ands	r3, r1
 800223c:	431a      	orrs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	611a      	str	r2, [r3, #16]
}
 8002242:	bf00      	nop
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr

0800224c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e12b      	b.n	80024b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d106      	bne.n	8002278 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff f86e 	bl	8001354 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2224      	movs	r2, #36	; 0x24
 800227c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0201 	bic.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800229e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022b0:	f001 f830 	bl	8003314 <HAL_RCC_GetPCLK1Freq>
 80022b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	4a81      	ldr	r2, [pc, #516]	; (80024c0 <HAL_I2C_Init+0x274>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d807      	bhi.n	80022d0 <HAL_I2C_Init+0x84>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4a80      	ldr	r2, [pc, #512]	; (80024c4 <HAL_I2C_Init+0x278>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	bf94      	ite	ls
 80022c8:	2301      	movls	r3, #1
 80022ca:	2300      	movhi	r3, #0
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	e006      	b.n	80022de <HAL_I2C_Init+0x92>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4a7d      	ldr	r2, [pc, #500]	; (80024c8 <HAL_I2C_Init+0x27c>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	bf94      	ite	ls
 80022d8:	2301      	movls	r3, #1
 80022da:	2300      	movhi	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e0e7      	b.n	80024b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	4a78      	ldr	r2, [pc, #480]	; (80024cc <HAL_I2C_Init+0x280>)
 80022ea:	fba2 2303 	umull	r2, r3, r2, r3
 80022ee:	0c9b      	lsrs	r3, r3, #18
 80022f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	430a      	orrs	r2, r1
 8002304:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	4a6a      	ldr	r2, [pc, #424]	; (80024c0 <HAL_I2C_Init+0x274>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d802      	bhi.n	8002320 <HAL_I2C_Init+0xd4>
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	3301      	adds	r3, #1
 800231e:	e009      	b.n	8002334 <HAL_I2C_Init+0xe8>
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002326:	fb02 f303 	mul.w	r3, r2, r3
 800232a:	4a69      	ldr	r2, [pc, #420]	; (80024d0 <HAL_I2C_Init+0x284>)
 800232c:	fba2 2303 	umull	r2, r3, r2, r3
 8002330:	099b      	lsrs	r3, r3, #6
 8002332:	3301      	adds	r3, #1
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6812      	ldr	r2, [r2, #0]
 8002338:	430b      	orrs	r3, r1
 800233a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002346:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	495c      	ldr	r1, [pc, #368]	; (80024c0 <HAL_I2C_Init+0x274>)
 8002350:	428b      	cmp	r3, r1
 8002352:	d819      	bhi.n	8002388 <HAL_I2C_Init+0x13c>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	1e59      	subs	r1, r3, #1
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002362:	1c59      	adds	r1, r3, #1
 8002364:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002368:	400b      	ands	r3, r1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00a      	beq.n	8002384 <HAL_I2C_Init+0x138>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	1e59      	subs	r1, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	fbb1 f3f3 	udiv	r3, r1, r3
 800237c:	3301      	adds	r3, #1
 800237e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002382:	e051      	b.n	8002428 <HAL_I2C_Init+0x1dc>
 8002384:	2304      	movs	r3, #4
 8002386:	e04f      	b.n	8002428 <HAL_I2C_Init+0x1dc>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d111      	bne.n	80023b4 <HAL_I2C_Init+0x168>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	1e58      	subs	r0, r3, #1
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6859      	ldr	r1, [r3, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	440b      	add	r3, r1
 800239e:	fbb0 f3f3 	udiv	r3, r0, r3
 80023a2:	3301      	adds	r3, #1
 80023a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	bf0c      	ite	eq
 80023ac:	2301      	moveq	r3, #1
 80023ae:	2300      	movne	r3, #0
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	e012      	b.n	80023da <HAL_I2C_Init+0x18e>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	1e58      	subs	r0, r3, #1
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6859      	ldr	r1, [r3, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	0099      	lsls	r1, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ca:	3301      	adds	r3, #1
 80023cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	bf0c      	ite	eq
 80023d4:	2301      	moveq	r3, #1
 80023d6:	2300      	movne	r3, #0
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_I2C_Init+0x196>
 80023de:	2301      	movs	r3, #1
 80023e0:	e022      	b.n	8002428 <HAL_I2C_Init+0x1dc>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10e      	bne.n	8002408 <HAL_I2C_Init+0x1bc>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	1e58      	subs	r0, r3, #1
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6859      	ldr	r1, [r3, #4]
 80023f2:	460b      	mov	r3, r1
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	440b      	add	r3, r1
 80023f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80023fc:	3301      	adds	r3, #1
 80023fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002406:	e00f      	b.n	8002428 <HAL_I2C_Init+0x1dc>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	1e58      	subs	r0, r3, #1
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6859      	ldr	r1, [r3, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	0099      	lsls	r1, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	fbb0 f3f3 	udiv	r3, r0, r3
 800241e:	3301      	adds	r3, #1
 8002420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002424:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	6809      	ldr	r1, [r1, #0]
 800242c:	4313      	orrs	r3, r2
 800242e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69da      	ldr	r2, [r3, #28]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	430a      	orrs	r2, r1
 800244a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002456:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6911      	ldr	r1, [r2, #16]
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	68d2      	ldr	r2, [r2, #12]
 8002462:	4311      	orrs	r1, r2
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6812      	ldr	r2, [r2, #0]
 8002468:	430b      	orrs	r3, r1
 800246a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695a      	ldr	r2, [r3, #20]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	430a      	orrs	r2, r1
 8002486:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0201 	orr.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2220      	movs	r2, #32
 80024a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	000186a0 	.word	0x000186a0
 80024c4:	001e847f 	.word	0x001e847f
 80024c8:	003d08ff 	.word	0x003d08ff
 80024cc:	431bde83 	.word	0x431bde83
 80024d0:	10624dd3 	.word	0x10624dd3

080024d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af02      	add	r7, sp, #8
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	607a      	str	r2, [r7, #4]
 80024de:	461a      	mov	r2, r3
 80024e0:	460b      	mov	r3, r1
 80024e2:	817b      	strh	r3, [r7, #10]
 80024e4:	4613      	mov	r3, r2
 80024e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024e8:	f7ff faf6 	bl	8001ad8 <HAL_GetTick>
 80024ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b20      	cmp	r3, #32
 80024f8:	f040 80e0 	bne.w	80026bc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	2319      	movs	r3, #25
 8002502:	2201      	movs	r2, #1
 8002504:	4970      	ldr	r1, [pc, #448]	; (80026c8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 f964 	bl	80027d4 <I2C_WaitOnFlagUntilTimeout>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002512:	2302      	movs	r3, #2
 8002514:	e0d3      	b.n	80026be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800251c:	2b01      	cmp	r3, #1
 800251e:	d101      	bne.n	8002524 <HAL_I2C_Master_Transmit+0x50>
 8002520:	2302      	movs	r3, #2
 8002522:	e0cc      	b.n	80026be <HAL_I2C_Master_Transmit+0x1ea>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b01      	cmp	r3, #1
 8002538:	d007      	beq.n	800254a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f042 0201 	orr.w	r2, r2, #1
 8002548:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002558:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2221      	movs	r2, #33	; 0x21
 800255e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2210      	movs	r2, #16
 8002566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	893a      	ldrh	r2, [r7, #8]
 800257a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	4a50      	ldr	r2, [pc, #320]	; (80026cc <HAL_I2C_Master_Transmit+0x1f8>)
 800258a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800258c:	8979      	ldrh	r1, [r7, #10]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	6a3a      	ldr	r2, [r7, #32]
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 f89c 	bl	80026d0 <I2C_MasterRequestWrite>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e08d      	b.n	80026be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025a2:	2300      	movs	r3, #0
 80025a4:	613b      	str	r3, [r7, #16]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	613b      	str	r3, [r7, #16]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025b8:	e066      	b.n	8002688 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	6a39      	ldr	r1, [r7, #32]
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 fa22 	bl	8002a08 <I2C_WaitOnTXEFlagUntilTimeout>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00d      	beq.n	80025e6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	d107      	bne.n	80025e2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e06b      	b.n	80026be <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	781a      	ldrb	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	1c5a      	adds	r2, r3, #1
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002600:	b29b      	uxth	r3, r3
 8002602:	3b01      	subs	r3, #1
 8002604:	b29a      	uxth	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260e:	3b01      	subs	r3, #1
 8002610:	b29a      	uxth	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b04      	cmp	r3, #4
 8002622:	d11b      	bne.n	800265c <HAL_I2C_Master_Transmit+0x188>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002628:	2b00      	cmp	r3, #0
 800262a:	d017      	beq.n	800265c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	781a      	ldrb	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	1c5a      	adds	r2, r3, #1
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002646:	b29b      	uxth	r3, r3
 8002648:	3b01      	subs	r3, #1
 800264a:	b29a      	uxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002654:	3b01      	subs	r3, #1
 8002656:	b29a      	uxth	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	6a39      	ldr	r1, [r7, #32]
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f000 fa19 	bl	8002a98 <I2C_WaitOnBTFFlagUntilTimeout>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00d      	beq.n	8002688 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	2b04      	cmp	r3, #4
 8002672:	d107      	bne.n	8002684 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002682:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e01a      	b.n	80026be <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268c:	2b00      	cmp	r3, #0
 800268e:	d194      	bne.n	80025ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800269e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2220      	movs	r2, #32
 80026a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	e000      	b.n	80026be <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026bc:	2302      	movs	r3, #2
  }
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	00100002 	.word	0x00100002
 80026cc:	ffff0000 	.word	0xffff0000

080026d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b088      	sub	sp, #32
 80026d4:	af02      	add	r7, sp, #8
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	607a      	str	r2, [r7, #4]
 80026da:	603b      	str	r3, [r7, #0]
 80026dc:	460b      	mov	r3, r1
 80026de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d006      	beq.n	80026fa <I2C_MasterRequestWrite+0x2a>
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d003      	beq.n	80026fa <I2C_MasterRequestWrite+0x2a>
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026f8:	d108      	bne.n	800270c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	e00b      	b.n	8002724 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002710:	2b12      	cmp	r3, #18
 8002712:	d107      	bne.n	8002724 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002722:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 f84f 	bl	80027d4 <I2C_WaitOnFlagUntilTimeout>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00d      	beq.n	8002758 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800274a:	d103      	bne.n	8002754 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002752:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e035      	b.n	80027c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002760:	d108      	bne.n	8002774 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002762:	897b      	ldrh	r3, [r7, #10]
 8002764:	b2db      	uxtb	r3, r3
 8002766:	461a      	mov	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002770:	611a      	str	r2, [r3, #16]
 8002772:	e01b      	b.n	80027ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002774:	897b      	ldrh	r3, [r7, #10]
 8002776:	11db      	asrs	r3, r3, #7
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f003 0306 	and.w	r3, r3, #6
 800277e:	b2db      	uxtb	r3, r3
 8002780:	f063 030f 	orn	r3, r3, #15
 8002784:	b2da      	uxtb	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	490e      	ldr	r1, [pc, #56]	; (80027cc <I2C_MasterRequestWrite+0xfc>)
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 f898 	bl	80028c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e010      	b.n	80027c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027a2:	897b      	ldrh	r3, [r7, #10]
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	4907      	ldr	r1, [pc, #28]	; (80027d0 <I2C_MasterRequestWrite+0x100>)
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 f888 	bl	80028c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e000      	b.n	80027c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	00010008 	.word	0x00010008
 80027d0:	00010002 	.word	0x00010002

080027d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	603b      	str	r3, [r7, #0]
 80027e0:	4613      	mov	r3, r2
 80027e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027e4:	e048      	b.n	8002878 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ec:	d044      	beq.n	8002878 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ee:	f7ff f973 	bl	8001ad8 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d302      	bcc.n	8002804 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d139      	bne.n	8002878 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	0c1b      	lsrs	r3, r3, #16
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b01      	cmp	r3, #1
 800280c:	d10d      	bne.n	800282a <I2C_WaitOnFlagUntilTimeout+0x56>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	43da      	mvns	r2, r3
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	4013      	ands	r3, r2
 800281a:	b29b      	uxth	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	bf0c      	ite	eq
 8002820:	2301      	moveq	r3, #1
 8002822:	2300      	movne	r3, #0
 8002824:	b2db      	uxtb	r3, r3
 8002826:	461a      	mov	r2, r3
 8002828:	e00c      	b.n	8002844 <I2C_WaitOnFlagUntilTimeout+0x70>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	43da      	mvns	r2, r3
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	4013      	ands	r3, r2
 8002836:	b29b      	uxth	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	bf0c      	ite	eq
 800283c:	2301      	moveq	r3, #1
 800283e:	2300      	movne	r3, #0
 8002840:	b2db      	uxtb	r3, r3
 8002842:	461a      	mov	r2, r3
 8002844:	79fb      	ldrb	r3, [r7, #7]
 8002846:	429a      	cmp	r2, r3
 8002848:	d116      	bne.n	8002878 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2220      	movs	r2, #32
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	f043 0220 	orr.w	r2, r3, #32
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e023      	b.n	80028c0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	0c1b      	lsrs	r3, r3, #16
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b01      	cmp	r3, #1
 8002880:	d10d      	bne.n	800289e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	43da      	mvns	r2, r3
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	4013      	ands	r3, r2
 800288e:	b29b      	uxth	r3, r3
 8002890:	2b00      	cmp	r3, #0
 8002892:	bf0c      	ite	eq
 8002894:	2301      	moveq	r3, #1
 8002896:	2300      	movne	r3, #0
 8002898:	b2db      	uxtb	r3, r3
 800289a:	461a      	mov	r2, r3
 800289c:	e00c      	b.n	80028b8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	43da      	mvns	r2, r3
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	4013      	ands	r3, r2
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	bf0c      	ite	eq
 80028b0:	2301      	moveq	r3, #1
 80028b2:	2300      	movne	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	461a      	mov	r2, r3
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d093      	beq.n	80027e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
 80028d4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028d6:	e071      	b.n	80029bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028e6:	d123      	bne.n	8002930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002900:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	f043 0204 	orr.w	r2, r3, #4
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e067      	b.n	8002a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002936:	d041      	beq.n	80029bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002938:	f7ff f8ce 	bl	8001ad8 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	429a      	cmp	r2, r3
 8002946:	d302      	bcc.n	800294e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d136      	bne.n	80029bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	0c1b      	lsrs	r3, r3, #16
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b01      	cmp	r3, #1
 8002956:	d10c      	bne.n	8002972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	43da      	mvns	r2, r3
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	4013      	ands	r3, r2
 8002964:	b29b      	uxth	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	bf14      	ite	ne
 800296a:	2301      	movne	r3, #1
 800296c:	2300      	moveq	r3, #0
 800296e:	b2db      	uxtb	r3, r3
 8002970:	e00b      	b.n	800298a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	43da      	mvns	r2, r3
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	4013      	ands	r3, r2
 800297e:	b29b      	uxth	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	bf14      	ite	ne
 8002984:	2301      	movne	r3, #1
 8002986:	2300      	moveq	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d016      	beq.n	80029bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	f043 0220 	orr.w	r2, r3, #32
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e021      	b.n	8002a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	0c1b      	lsrs	r3, r3, #16
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d10c      	bne.n	80029e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	43da      	mvns	r2, r3
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	4013      	ands	r3, r2
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	bf14      	ite	ne
 80029d8:	2301      	movne	r3, #1
 80029da:	2300      	moveq	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	e00b      	b.n	80029f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	43da      	mvns	r2, r3
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	4013      	ands	r3, r2
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	bf14      	ite	ne
 80029f2:	2301      	movne	r3, #1
 80029f4:	2300      	moveq	r3, #0
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f47f af6d 	bne.w	80028d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a14:	e034      	b.n	8002a80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 f886 	bl	8002b28 <I2C_IsAcknowledgeFailed>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e034      	b.n	8002a90 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2c:	d028      	beq.n	8002a80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a2e:	f7ff f853 	bl	8001ad8 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	68ba      	ldr	r2, [r7, #8]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d302      	bcc.n	8002a44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d11d      	bne.n	8002a80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4e:	2b80      	cmp	r3, #128	; 0x80
 8002a50:	d016      	beq.n	8002a80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	f043 0220 	orr.w	r2, r3, #32
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e007      	b.n	8002a90 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8a:	2b80      	cmp	r3, #128	; 0x80
 8002a8c:	d1c3      	bne.n	8002a16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002aa4:	e034      	b.n	8002b10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 f83e 	bl	8002b28 <I2C_IsAcknowledgeFailed>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e034      	b.n	8002b20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002abc:	d028      	beq.n	8002b10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002abe:	f7ff f80b 	bl	8001ad8 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d302      	bcc.n	8002ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d11d      	bne.n	8002b10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	f003 0304 	and.w	r3, r3, #4
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d016      	beq.n	8002b10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2220      	movs	r2, #32
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	f043 0220 	orr.w	r2, r3, #32
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e007      	b.n	8002b20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	f003 0304 	and.w	r3, r3, #4
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d1c3      	bne.n	8002aa6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b3e:	d11b      	bne.n	8002b78 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b48:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	f043 0204 	orr.w	r2, r3, #4
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e000      	b.n	8002b7a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e26c      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 8087 	beq.w	8002cb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ba4:	4b92      	ldr	r3, [pc, #584]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f003 030c 	and.w	r3, r3, #12
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d00c      	beq.n	8002bca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bb0:	4b8f      	ldr	r3, [pc, #572]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 030c 	and.w	r3, r3, #12
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d112      	bne.n	8002be2 <HAL_RCC_OscConfig+0x5e>
 8002bbc:	4b8c      	ldr	r3, [pc, #560]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc8:	d10b      	bne.n	8002be2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bca:	4b89      	ldr	r3, [pc, #548]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d06c      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x12c>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d168      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e246      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bea:	d106      	bne.n	8002bfa <HAL_RCC_OscConfig+0x76>
 8002bec:	4b80      	ldr	r3, [pc, #512]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a7f      	ldr	r2, [pc, #508]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	e02e      	b.n	8002c58 <HAL_RCC_OscConfig+0xd4>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10c      	bne.n	8002c1c <HAL_RCC_OscConfig+0x98>
 8002c02:	4b7b      	ldr	r3, [pc, #492]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a7a      	ldr	r2, [pc, #488]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	4b78      	ldr	r3, [pc, #480]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a77      	ldr	r2, [pc, #476]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	e01d      	b.n	8002c58 <HAL_RCC_OscConfig+0xd4>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c24:	d10c      	bne.n	8002c40 <HAL_RCC_OscConfig+0xbc>
 8002c26:	4b72      	ldr	r3, [pc, #456]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a71      	ldr	r2, [pc, #452]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	4b6f      	ldr	r3, [pc, #444]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a6e      	ldr	r2, [pc, #440]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	e00b      	b.n	8002c58 <HAL_RCC_OscConfig+0xd4>
 8002c40:	4b6b      	ldr	r3, [pc, #428]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a6a      	ldr	r2, [pc, #424]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c4a:	6013      	str	r3, [r2, #0]
 8002c4c:	4b68      	ldr	r3, [pc, #416]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a67      	ldr	r2, [pc, #412]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d013      	beq.n	8002c88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c60:	f7fe ff3a 	bl	8001ad8 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c68:	f7fe ff36 	bl	8001ad8 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b64      	cmp	r3, #100	; 0x64
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e1fa      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7a:	4b5d      	ldr	r3, [pc, #372]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0xe4>
 8002c86:	e014      	b.n	8002cb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c88:	f7fe ff26 	bl	8001ad8 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c90:	f7fe ff22 	bl	8001ad8 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	; 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e1e6      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca2:	4b53      	ldr	r3, [pc, #332]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0x10c>
 8002cae:	e000      	b.n	8002cb2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d063      	beq.n	8002d86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cbe:	4b4c      	ldr	r3, [pc, #304]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00b      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cca:	4b49      	ldr	r3, [pc, #292]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f003 030c 	and.w	r3, r3, #12
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	d11c      	bne.n	8002d10 <HAL_RCC_OscConfig+0x18c>
 8002cd6:	4b46      	ldr	r3, [pc, #280]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d116      	bne.n	8002d10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce2:	4b43      	ldr	r3, [pc, #268]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d005      	beq.n	8002cfa <HAL_RCC_OscConfig+0x176>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d001      	beq.n	8002cfa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e1ba      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfa:	4b3d      	ldr	r3, [pc, #244]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	4939      	ldr	r1, [pc, #228]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0e:	e03a      	b.n	8002d86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d020      	beq.n	8002d5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d18:	4b36      	ldr	r3, [pc, #216]	; (8002df4 <HAL_RCC_OscConfig+0x270>)
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1e:	f7fe fedb 	bl	8001ad8 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d26:	f7fe fed7 	bl	8001ad8 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e19b      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d38:	4b2d      	ldr	r3, [pc, #180]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0f0      	beq.n	8002d26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d44:	4b2a      	ldr	r3, [pc, #168]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	4927      	ldr	r1, [pc, #156]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	600b      	str	r3, [r1, #0]
 8002d58:	e015      	b.n	8002d86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d5a:	4b26      	ldr	r3, [pc, #152]	; (8002df4 <HAL_RCC_OscConfig+0x270>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d60:	f7fe feba 	bl	8001ad8 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d68:	f7fe feb6 	bl	8001ad8 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e17a      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7a:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d03a      	beq.n	8002e08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d019      	beq.n	8002dce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d9a:	4b17      	ldr	r3, [pc, #92]	; (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da0:	f7fe fe9a 	bl	8001ad8 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002da8:	f7fe fe96 	bl	8001ad8 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e15a      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dba:	4b0d      	ldr	r3, [pc, #52]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dc6:	2001      	movs	r0, #1
 8002dc8:	f000 facc 	bl	8003364 <RCC_Delay>
 8002dcc:	e01c      	b.n	8002e08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dce:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd4:	f7fe fe80 	bl	8001ad8 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dda:	e00f      	b.n	8002dfc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ddc:	f7fe fe7c 	bl	8001ad8 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d908      	bls.n	8002dfc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e140      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
 8002dee:	bf00      	nop
 8002df0:	40021000 	.word	0x40021000
 8002df4:	42420000 	.word	0x42420000
 8002df8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dfc:	4b9e      	ldr	r3, [pc, #632]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1e9      	bne.n	8002ddc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 80a6 	beq.w	8002f62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e16:	2300      	movs	r3, #0
 8002e18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e1a:	4b97      	ldr	r3, [pc, #604]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10d      	bne.n	8002e42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e26:	4b94      	ldr	r3, [pc, #592]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	4a93      	ldr	r2, [pc, #588]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e30:	61d3      	str	r3, [r2, #28]
 8002e32:	4b91      	ldr	r3, [pc, #580]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	60bb      	str	r3, [r7, #8]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e42:	4b8e      	ldr	r3, [pc, #568]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d118      	bne.n	8002e80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e4e:	4b8b      	ldr	r3, [pc, #556]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a8a      	ldr	r2, [pc, #552]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e5a:	f7fe fe3d 	bl	8001ad8 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e62:	f7fe fe39 	bl	8001ad8 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b64      	cmp	r3, #100	; 0x64
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e0fd      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e74:	4b81      	ldr	r3, [pc, #516]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0f0      	beq.n	8002e62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d106      	bne.n	8002e96 <HAL_RCC_OscConfig+0x312>
 8002e88:	4b7b      	ldr	r3, [pc, #492]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	4a7a      	ldr	r2, [pc, #488]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	6213      	str	r3, [r2, #32]
 8002e94:	e02d      	b.n	8002ef2 <HAL_RCC_OscConfig+0x36e>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10c      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x334>
 8002e9e:	4b76      	ldr	r3, [pc, #472]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	4a75      	ldr	r2, [pc, #468]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002ea4:	f023 0301 	bic.w	r3, r3, #1
 8002ea8:	6213      	str	r3, [r2, #32]
 8002eaa:	4b73      	ldr	r3, [pc, #460]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	4a72      	ldr	r2, [pc, #456]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002eb0:	f023 0304 	bic.w	r3, r3, #4
 8002eb4:	6213      	str	r3, [r2, #32]
 8002eb6:	e01c      	b.n	8002ef2 <HAL_RCC_OscConfig+0x36e>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	2b05      	cmp	r3, #5
 8002ebe:	d10c      	bne.n	8002eda <HAL_RCC_OscConfig+0x356>
 8002ec0:	4b6d      	ldr	r3, [pc, #436]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	4a6c      	ldr	r2, [pc, #432]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002ec6:	f043 0304 	orr.w	r3, r3, #4
 8002eca:	6213      	str	r3, [r2, #32]
 8002ecc:	4b6a      	ldr	r3, [pc, #424]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	4a69      	ldr	r2, [pc, #420]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	6213      	str	r3, [r2, #32]
 8002ed8:	e00b      	b.n	8002ef2 <HAL_RCC_OscConfig+0x36e>
 8002eda:	4b67      	ldr	r3, [pc, #412]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	4a66      	ldr	r2, [pc, #408]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002ee0:	f023 0301 	bic.w	r3, r3, #1
 8002ee4:	6213      	str	r3, [r2, #32]
 8002ee6:	4b64      	ldr	r3, [pc, #400]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	4a63      	ldr	r2, [pc, #396]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002eec:	f023 0304 	bic.w	r3, r3, #4
 8002ef0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d015      	beq.n	8002f26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efa:	f7fe fded 	bl	8001ad8 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f00:	e00a      	b.n	8002f18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f02:	f7fe fde9 	bl	8001ad8 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e0ab      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f18:	4b57      	ldr	r3, [pc, #348]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0ee      	beq.n	8002f02 <HAL_RCC_OscConfig+0x37e>
 8002f24:	e014      	b.n	8002f50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f26:	f7fe fdd7 	bl	8001ad8 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f2c:	e00a      	b.n	8002f44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2e:	f7fe fdd3 	bl	8001ad8 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e095      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f44:	4b4c      	ldr	r3, [pc, #304]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1ee      	bne.n	8002f2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f50:	7dfb      	ldrb	r3, [r7, #23]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d105      	bne.n	8002f62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f56:	4b48      	ldr	r3, [pc, #288]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	4a47      	ldr	r2, [pc, #284]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 8081 	beq.w	800306e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f6c:	4b42      	ldr	r3, [pc, #264]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 030c 	and.w	r3, r3, #12
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d061      	beq.n	800303c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d146      	bne.n	800300e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f80:	4b3f      	ldr	r3, [pc, #252]	; (8003080 <HAL_RCC_OscConfig+0x4fc>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f86:	f7fe fda7 	bl	8001ad8 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f8e:	f7fe fda3 	bl	8001ad8 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e067      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa0:	4b35      	ldr	r3, [pc, #212]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1f0      	bne.n	8002f8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb4:	d108      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fb6:	4b30      	ldr	r3, [pc, #192]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	492d      	ldr	r1, [pc, #180]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fc8:	4b2b      	ldr	r3, [pc, #172]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a19      	ldr	r1, [r3, #32]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	4927      	ldr	r1, [pc, #156]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe0:	4b27      	ldr	r3, [pc, #156]	; (8003080 <HAL_RCC_OscConfig+0x4fc>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe6:	f7fe fd77 	bl	8001ad8 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fee:	f7fe fd73 	bl	8001ad8 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e037      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003000:	4b1d      	ldr	r3, [pc, #116]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0f0      	beq.n	8002fee <HAL_RCC_OscConfig+0x46a>
 800300c:	e02f      	b.n	800306e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800300e:	4b1c      	ldr	r3, [pc, #112]	; (8003080 <HAL_RCC_OscConfig+0x4fc>)
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003014:	f7fe fd60 	bl	8001ad8 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800301c:	f7fe fd5c 	bl	8001ad8 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e020      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800302e:	4b12      	ldr	r3, [pc, #72]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x498>
 800303a:	e018      	b.n	800306e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e013      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	429a      	cmp	r2, r3
 800305a:	d106      	bne.n	800306a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003066:	429a      	cmp	r2, r3
 8003068:	d001      	beq.n	800306e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40021000 	.word	0x40021000
 800307c:	40007000 	.word	0x40007000
 8003080:	42420060 	.word	0x42420060

08003084 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0d0      	b.n	800323a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003098:	4b6a      	ldr	r3, [pc, #424]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d910      	bls.n	80030c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a6:	4b67      	ldr	r3, [pc, #412]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f023 0207 	bic.w	r2, r3, #7
 80030ae:	4965      	ldr	r1, [pc, #404]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b6:	4b63      	ldr	r3, [pc, #396]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0b8      	b.n	800323a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d020      	beq.n	8003116 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030e0:	4b59      	ldr	r3, [pc, #356]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	4a58      	ldr	r2, [pc, #352]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80030e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0308 	and.w	r3, r3, #8
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030f8:	4b53      	ldr	r3, [pc, #332]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	4a52      	ldr	r2, [pc, #328]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80030fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003102:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003104:	4b50      	ldr	r3, [pc, #320]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	494d      	ldr	r1, [pc, #308]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003112:	4313      	orrs	r3, r2
 8003114:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d040      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d107      	bne.n	800313a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312a:	4b47      	ldr	r3, [pc, #284]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d115      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e07f      	b.n	800323a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d107      	bne.n	8003152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003142:	4b41      	ldr	r3, [pc, #260]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d109      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e073      	b.n	800323a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003152:	4b3d      	ldr	r3, [pc, #244]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e06b      	b.n	800323a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003162:	4b39      	ldr	r3, [pc, #228]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f023 0203 	bic.w	r2, r3, #3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	4936      	ldr	r1, [pc, #216]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003170:	4313      	orrs	r3, r2
 8003172:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003174:	f7fe fcb0 	bl	8001ad8 <HAL_GetTick>
 8003178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317a:	e00a      	b.n	8003192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800317c:	f7fe fcac 	bl	8001ad8 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f241 3288 	movw	r2, #5000	; 0x1388
 800318a:	4293      	cmp	r3, r2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e053      	b.n	800323a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003192:	4b2d      	ldr	r3, [pc, #180]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 020c 	and.w	r2, r3, #12
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d1eb      	bne.n	800317c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031a4:	4b27      	ldr	r3, [pc, #156]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d210      	bcs.n	80031d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b2:	4b24      	ldr	r3, [pc, #144]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f023 0207 	bic.w	r2, r3, #7
 80031ba:	4922      	ldr	r1, [pc, #136]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	4313      	orrs	r3, r2
 80031c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c2:	4b20      	ldr	r3, [pc, #128]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d001      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e032      	b.n	800323a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d008      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e0:	4b19      	ldr	r3, [pc, #100]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	4916      	ldr	r1, [pc, #88]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d009      	beq.n	8003212 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031fe:	4b12      	ldr	r3, [pc, #72]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	490e      	ldr	r1, [pc, #56]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 800320e:	4313      	orrs	r3, r2
 8003210:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003212:	f000 f821 	bl	8003258 <HAL_RCC_GetSysClockFreq>
 8003216:	4602      	mov	r2, r0
 8003218:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	091b      	lsrs	r3, r3, #4
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	490a      	ldr	r1, [pc, #40]	; (800324c <HAL_RCC_ClockConfig+0x1c8>)
 8003224:	5ccb      	ldrb	r3, [r1, r3]
 8003226:	fa22 f303 	lsr.w	r3, r2, r3
 800322a:	4a09      	ldr	r2, [pc, #36]	; (8003250 <HAL_RCC_ClockConfig+0x1cc>)
 800322c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800322e:	4b09      	ldr	r3, [pc, #36]	; (8003254 <HAL_RCC_ClockConfig+0x1d0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f7fe fc0e 	bl	8001a54 <HAL_InitTick>

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40022000 	.word	0x40022000
 8003248:	40021000 	.word	0x40021000
 800324c:	08005e58 	.word	0x08005e58
 8003250:	2000007c 	.word	0x2000007c
 8003254:	20000080 	.word	0x20000080

08003258 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003258:	b480      	push	{r7}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800325e:	2300      	movs	r3, #0
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	2300      	movs	r3, #0
 8003264:	60bb      	str	r3, [r7, #8]
 8003266:	2300      	movs	r3, #0
 8003268:	617b      	str	r3, [r7, #20]
 800326a:	2300      	movs	r3, #0
 800326c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003272:	4b1e      	ldr	r3, [pc, #120]	; (80032ec <HAL_RCC_GetSysClockFreq+0x94>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f003 030c 	and.w	r3, r3, #12
 800327e:	2b04      	cmp	r3, #4
 8003280:	d002      	beq.n	8003288 <HAL_RCC_GetSysClockFreq+0x30>
 8003282:	2b08      	cmp	r3, #8
 8003284:	d003      	beq.n	800328e <HAL_RCC_GetSysClockFreq+0x36>
 8003286:	e027      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003288:	4b19      	ldr	r3, [pc, #100]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800328a:	613b      	str	r3, [r7, #16]
      break;
 800328c:	e027      	b.n	80032de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	0c9b      	lsrs	r3, r3, #18
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	4a17      	ldr	r2, [pc, #92]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003298:	5cd3      	ldrb	r3, [r2, r3]
 800329a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d010      	beq.n	80032c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032a6:	4b11      	ldr	r3, [pc, #68]	; (80032ec <HAL_RCC_GetSysClockFreq+0x94>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	0c5b      	lsrs	r3, r3, #17
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	4a11      	ldr	r2, [pc, #68]	; (80032f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80032b2:	5cd3      	ldrb	r3, [r2, r3]
 80032b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a0d      	ldr	r2, [pc, #52]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80032ba:	fb02 f203 	mul.w	r2, r2, r3
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c4:	617b      	str	r3, [r7, #20]
 80032c6:	e004      	b.n	80032d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a0c      	ldr	r2, [pc, #48]	; (80032fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80032cc:	fb02 f303 	mul.w	r3, r2, r3
 80032d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	613b      	str	r3, [r7, #16]
      break;
 80032d6:	e002      	b.n	80032de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032d8:	4b05      	ldr	r3, [pc, #20]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80032da:	613b      	str	r3, [r7, #16]
      break;
 80032dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032de:	693b      	ldr	r3, [r7, #16]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	371c      	adds	r7, #28
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	40021000 	.word	0x40021000
 80032f0:	007a1200 	.word	0x007a1200
 80032f4:	08005e70 	.word	0x08005e70
 80032f8:	08005e80 	.word	0x08005e80
 80032fc:	003d0900 	.word	0x003d0900

08003300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003304:	4b02      	ldr	r3, [pc, #8]	; (8003310 <HAL_RCC_GetHCLKFreq+0x10>)
 8003306:	681b      	ldr	r3, [r3, #0]
}
 8003308:	4618      	mov	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr
 8003310:	2000007c 	.word	0x2000007c

08003314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003318:	f7ff fff2 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 800331c:	4602      	mov	r2, r0
 800331e:	4b05      	ldr	r3, [pc, #20]	; (8003334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	0a1b      	lsrs	r3, r3, #8
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	4903      	ldr	r1, [pc, #12]	; (8003338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800332a:	5ccb      	ldrb	r3, [r1, r3]
 800332c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003330:	4618      	mov	r0, r3
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40021000 	.word	0x40021000
 8003338:	08005e68 	.word	0x08005e68

0800333c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003340:	f7ff ffde 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 8003344:	4602      	mov	r2, r0
 8003346:	4b05      	ldr	r3, [pc, #20]	; (800335c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	0adb      	lsrs	r3, r3, #11
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	4903      	ldr	r1, [pc, #12]	; (8003360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003352:	5ccb      	ldrb	r3, [r1, r3]
 8003354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003358:	4618      	mov	r0, r3
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40021000 	.word	0x40021000
 8003360:	08005e68 	.word	0x08005e68

08003364 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800336c:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <RCC_Delay+0x34>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a0a      	ldr	r2, [pc, #40]	; (800339c <RCC_Delay+0x38>)
 8003372:	fba2 2303 	umull	r2, r3, r2, r3
 8003376:	0a5b      	lsrs	r3, r3, #9
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	fb02 f303 	mul.w	r3, r2, r3
 800337e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003380:	bf00      	nop
  }
  while (Delay --);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	1e5a      	subs	r2, r3, #1
 8003386:	60fa      	str	r2, [r7, #12]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1f9      	bne.n	8003380 <RCC_Delay+0x1c>
}
 800338c:	bf00      	nop
 800338e:	bf00      	nop
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr
 8003398:	2000007c 	.word	0x2000007c
 800339c:	10624dd3 	.word	0x10624dd3

080033a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e041      	b.n	8003436 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d106      	bne.n	80033cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7fe f814 	bl	80013f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2202      	movs	r2, #2
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3304      	adds	r3, #4
 80033dc:	4619      	mov	r1, r3
 80033de:	4610      	mov	r0, r2
 80033e0:	f000 fa5c 	bl	800389c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
	...

08003440 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b01      	cmp	r3, #1
 8003452:	d001      	beq.n	8003458 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e03a      	b.n	80034ce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2202      	movs	r2, #2
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68da      	ldr	r2, [r3, #12]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0201 	orr.w	r2, r2, #1
 800346e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a18      	ldr	r2, [pc, #96]	; (80034d8 <HAL_TIM_Base_Start_IT+0x98>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d00e      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0x58>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003482:	d009      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0x58>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a14      	ldr	r2, [pc, #80]	; (80034dc <HAL_TIM_Base_Start_IT+0x9c>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d004      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0x58>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a13      	ldr	r2, [pc, #76]	; (80034e0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d111      	bne.n	80034bc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2b06      	cmp	r3, #6
 80034a8:	d010      	beq.n	80034cc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f042 0201 	orr.w	r2, r2, #1
 80034b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ba:	e007      	b.n	80034cc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0201 	orr.w	r2, r2, #1
 80034ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bc80      	pop	{r7}
 80034d6:	4770      	bx	lr
 80034d8:	40012c00 	.word	0x40012c00
 80034dc:	40000400 	.word	0x40000400
 80034e0:	40000800 	.word	0x40000800

080034e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d020      	beq.n	8003548 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d01b      	beq.n	8003548 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f06f 0202 	mvn.w	r2, #2
 8003518:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f998 	bl	8003864 <HAL_TIM_IC_CaptureCallback>
 8003534:	e005      	b.n	8003542 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f98b 	bl	8003852 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f99a 	bl	8003876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f003 0304 	and.w	r3, r3, #4
 800354e:	2b00      	cmp	r3, #0
 8003550:	d020      	beq.n	8003594 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d01b      	beq.n	8003594 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f06f 0204 	mvn.w	r2, #4
 8003564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2202      	movs	r2, #2
 800356a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f972 	bl	8003864 <HAL_TIM_IC_CaptureCallback>
 8003580:	e005      	b.n	800358e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f965 	bl	8003852 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f974 	bl	8003876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b00      	cmp	r3, #0
 800359c:	d020      	beq.n	80035e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f003 0308 	and.w	r3, r3, #8
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d01b      	beq.n	80035e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f06f 0208 	mvn.w	r2, #8
 80035b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2204      	movs	r2, #4
 80035b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f94c 	bl	8003864 <HAL_TIM_IC_CaptureCallback>
 80035cc:	e005      	b.n	80035da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f93f 	bl	8003852 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f94e 	bl	8003876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d020      	beq.n	800362c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f003 0310 	and.w	r3, r3, #16
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d01b      	beq.n	800362c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f06f 0210 	mvn.w	r2, #16
 80035fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2208      	movs	r2, #8
 8003602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f926 	bl	8003864 <HAL_TIM_IC_CaptureCallback>
 8003618:	e005      	b.n	8003626 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f919 	bl	8003852 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f928 	bl	8003876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00c      	beq.n	8003650 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d007      	beq.n	8003650 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f06f 0201 	mvn.w	r2, #1
 8003648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7fd fdd6 	bl	80011fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00c      	beq.n	8003674 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003660:	2b00      	cmp	r3, #0
 8003662:	d007      	beq.n	8003674 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800366c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 fa7f 	bl	8003b72 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00c      	beq.n	8003698 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003684:	2b00      	cmp	r3, #0
 8003686:	d007      	beq.n	8003698 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f8f8 	bl	8003888 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f003 0320 	and.w	r3, r3, #32
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00c      	beq.n	80036bc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f003 0320 	and.w	r3, r3, #32
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d007      	beq.n	80036bc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f06f 0220 	mvn.w	r2, #32
 80036b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 fa52 	bl	8003b60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036bc:	bf00      	nop
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_TIM_ConfigClockSource+0x1c>
 80036dc:	2302      	movs	r3, #2
 80036de:	e0b4      	b.n	800384a <HAL_TIM_ConfigClockSource+0x186>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003706:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003718:	d03e      	beq.n	8003798 <HAL_TIM_ConfigClockSource+0xd4>
 800371a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800371e:	f200 8087 	bhi.w	8003830 <HAL_TIM_ConfigClockSource+0x16c>
 8003722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003726:	f000 8086 	beq.w	8003836 <HAL_TIM_ConfigClockSource+0x172>
 800372a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800372e:	d87f      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x16c>
 8003730:	2b70      	cmp	r3, #112	; 0x70
 8003732:	d01a      	beq.n	800376a <HAL_TIM_ConfigClockSource+0xa6>
 8003734:	2b70      	cmp	r3, #112	; 0x70
 8003736:	d87b      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x16c>
 8003738:	2b60      	cmp	r3, #96	; 0x60
 800373a:	d050      	beq.n	80037de <HAL_TIM_ConfigClockSource+0x11a>
 800373c:	2b60      	cmp	r3, #96	; 0x60
 800373e:	d877      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x16c>
 8003740:	2b50      	cmp	r3, #80	; 0x50
 8003742:	d03c      	beq.n	80037be <HAL_TIM_ConfigClockSource+0xfa>
 8003744:	2b50      	cmp	r3, #80	; 0x50
 8003746:	d873      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x16c>
 8003748:	2b40      	cmp	r3, #64	; 0x40
 800374a:	d058      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0x13a>
 800374c:	2b40      	cmp	r3, #64	; 0x40
 800374e:	d86f      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x16c>
 8003750:	2b30      	cmp	r3, #48	; 0x30
 8003752:	d064      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x15a>
 8003754:	2b30      	cmp	r3, #48	; 0x30
 8003756:	d86b      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x16c>
 8003758:	2b20      	cmp	r3, #32
 800375a:	d060      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x15a>
 800375c:	2b20      	cmp	r3, #32
 800375e:	d867      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x16c>
 8003760:	2b00      	cmp	r3, #0
 8003762:	d05c      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x15a>
 8003764:	2b10      	cmp	r3, #16
 8003766:	d05a      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x15a>
 8003768:	e062      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	6899      	ldr	r1, [r3, #8]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f000 f974 	bl	8003a66 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800378c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	609a      	str	r2, [r3, #8]
      break;
 8003796:	e04f      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6818      	ldr	r0, [r3, #0]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	6899      	ldr	r1, [r3, #8]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f000 f95d 	bl	8003a66 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037ba:	609a      	str	r2, [r3, #8]
      break;
 80037bc:	e03c      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6818      	ldr	r0, [r3, #0]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	6859      	ldr	r1, [r3, #4]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	461a      	mov	r2, r3
 80037cc:	f000 f8d4 	bl	8003978 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2150      	movs	r1, #80	; 0x50
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 f92b 	bl	8003a32 <TIM_ITRx_SetConfig>
      break;
 80037dc:	e02c      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6818      	ldr	r0, [r3, #0]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	6859      	ldr	r1, [r3, #4]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	461a      	mov	r2, r3
 80037ec:	f000 f8f2 	bl	80039d4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2160      	movs	r1, #96	; 0x60
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 f91b 	bl	8003a32 <TIM_ITRx_SetConfig>
      break;
 80037fc:	e01c      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	6859      	ldr	r1, [r3, #4]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	461a      	mov	r2, r3
 800380c:	f000 f8b4 	bl	8003978 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2140      	movs	r1, #64	; 0x40
 8003816:	4618      	mov	r0, r3
 8003818:	f000 f90b 	bl	8003a32 <TIM_ITRx_SetConfig>
      break;
 800381c:	e00c      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4619      	mov	r1, r3
 8003828:	4610      	mov	r0, r2
 800382a:	f000 f902 	bl	8003a32 <TIM_ITRx_SetConfig>
      break;
 800382e:	e003      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	73fb      	strb	r3, [r7, #15]
      break;
 8003834:	e000      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003836:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003848:	7bfb      	ldrb	r3, [r7, #15]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	bc80      	pop	{r7}
 8003862:	4770      	bx	lr

08003864 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	bc80      	pop	{r7}
 8003874:	4770      	bx	lr

08003876 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr

08003888 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	bc80      	pop	{r7}
 8003898:	4770      	bx	lr
	...

0800389c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a2f      	ldr	r2, [pc, #188]	; (800396c <TIM_Base_SetConfig+0xd0>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d00b      	beq.n	80038cc <TIM_Base_SetConfig+0x30>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ba:	d007      	beq.n	80038cc <TIM_Base_SetConfig+0x30>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a2c      	ldr	r2, [pc, #176]	; (8003970 <TIM_Base_SetConfig+0xd4>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d003      	beq.n	80038cc <TIM_Base_SetConfig+0x30>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a2b      	ldr	r2, [pc, #172]	; (8003974 <TIM_Base_SetConfig+0xd8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d108      	bne.n	80038de <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	4313      	orrs	r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a22      	ldr	r2, [pc, #136]	; (800396c <TIM_Base_SetConfig+0xd0>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d00b      	beq.n	80038fe <TIM_Base_SetConfig+0x62>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ec:	d007      	beq.n	80038fe <TIM_Base_SetConfig+0x62>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a1f      	ldr	r2, [pc, #124]	; (8003970 <TIM_Base_SetConfig+0xd4>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d003      	beq.n	80038fe <TIM_Base_SetConfig+0x62>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a1e      	ldr	r2, [pc, #120]	; (8003974 <TIM_Base_SetConfig+0xd8>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d108      	bne.n	8003910 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	4313      	orrs	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	4313      	orrs	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a0d      	ldr	r2, [pc, #52]	; (800396c <TIM_Base_SetConfig+0xd0>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d103      	bne.n	8003944 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	691a      	ldr	r2, [r3, #16]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d005      	beq.n	8003962 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	f023 0201 	bic.w	r2, r3, #1
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	611a      	str	r2, [r3, #16]
  }
}
 8003962:	bf00      	nop
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr
 800396c:	40012c00 	.word	0x40012c00
 8003970:	40000400 	.word	0x40000400
 8003974:	40000800 	.word	0x40000800

08003978 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003978:	b480      	push	{r7}
 800397a:	b087      	sub	sp, #28
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	f023 0201 	bic.w	r2, r3, #1
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f023 030a 	bic.w	r3, r3, #10
 80039b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	621a      	str	r2, [r3, #32]
}
 80039ca:	bf00      	nop
 80039cc:	371c      	adds	r7, #28
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bc80      	pop	{r7}
 80039d2:	4770      	bx	lr

080039d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	f023 0210 	bic.w	r2, r3, #16
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	031b      	lsls	r3, r3, #12
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a10:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	621a      	str	r2, [r3, #32]
}
 8003a28:	bf00      	nop
 8003a2a:	371c      	adds	r7, #28
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc80      	pop	{r7}
 8003a30:	4770      	bx	lr

08003a32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b085      	sub	sp, #20
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
 8003a3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	f043 0307 	orr.w	r3, r3, #7
 8003a54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	609a      	str	r2, [r3, #8]
}
 8003a5c:	bf00      	nop
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bc80      	pop	{r7}
 8003a64:	4770      	bx	lr

08003a66 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b087      	sub	sp, #28
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	60f8      	str	r0, [r7, #12]
 8003a6e:	60b9      	str	r1, [r7, #8]
 8003a70:	607a      	str	r2, [r7, #4]
 8003a72:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a80:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	021a      	lsls	r2, r3, #8
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	609a      	str	r2, [r3, #8]
}
 8003a9a:	bf00      	nop
 8003a9c:	371c      	adds	r7, #28
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e046      	b.n	8003b4a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a16      	ldr	r2, [pc, #88]	; (8003b54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d00e      	beq.n	8003b1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b08:	d009      	beq.n	8003b1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a12      	ldr	r2, [pc, #72]	; (8003b58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d004      	beq.n	8003b1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a10      	ldr	r2, [pc, #64]	; (8003b5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d10c      	bne.n	8003b38 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bc80      	pop	{r7}
 8003b52:	4770      	bx	lr
 8003b54:	40012c00 	.word	0x40012c00
 8003b58:	40000400 	.word	0x40000400
 8003b5c:	40000800 	.word	0x40000800

08003b60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bc80      	pop	{r7}
 8003b70:	4770      	bx	lr

08003b72 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bc80      	pop	{r7}
 8003b82:	4770      	bx	lr

08003b84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e042      	b.n	8003c1c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d106      	bne.n	8003bb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7fd fc46 	bl	800143c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2224      	movs	r2, #36	; 0x24
 8003bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 fdb7 	bl	800473c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	691a      	ldr	r2, [r3, #16]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695a      	ldr	r2, [r3, #20]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b08a      	sub	sp, #40	; 0x28
 8003c28:	af02      	add	r7, sp, #8
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	603b      	str	r3, [r7, #0]
 8003c30:	4613      	mov	r3, r2
 8003c32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b20      	cmp	r3, #32
 8003c42:	d175      	bne.n	8003d30 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <HAL_UART_Transmit+0x2c>
 8003c4a:	88fb      	ldrh	r3, [r7, #6]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d101      	bne.n	8003c54 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e06e      	b.n	8003d32 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2221      	movs	r2, #33	; 0x21
 8003c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c62:	f7fd ff39 	bl	8001ad8 <HAL_GetTick>
 8003c66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	88fa      	ldrh	r2, [r7, #6]
 8003c6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	88fa      	ldrh	r2, [r7, #6]
 8003c72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c7c:	d108      	bne.n	8003c90 <HAL_UART_Transmit+0x6c>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d104      	bne.n	8003c90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c86:	2300      	movs	r3, #0
 8003c88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	61bb      	str	r3, [r7, #24]
 8003c8e:	e003      	b.n	8003c98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c94:	2300      	movs	r3, #0
 8003c96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c98:	e02e      	b.n	8003cf8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	2180      	movs	r1, #128	; 0x80
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f000 fb1c 	bl	80042e2 <UART_WaitOnFlagUntilTimeout>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d005      	beq.n	8003cbc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e03a      	b.n	8003d32 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10b      	bne.n	8003cda <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	881b      	ldrh	r3, [r3, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	3302      	adds	r3, #2
 8003cd6:	61bb      	str	r3, [r7, #24]
 8003cd8:	e007      	b.n	8003cea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	781a      	ldrb	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1cb      	bne.n	8003c9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	2140      	movs	r1, #64	; 0x40
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 fae8 	bl	80042e2 <UART_WaitOnFlagUntilTimeout>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d005      	beq.n	8003d24 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e006      	b.n	8003d32 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	e000      	b.n	8003d32 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003d30:	2302      	movs	r3, #2
  }
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3720      	adds	r7, #32
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b084      	sub	sp, #16
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	60f8      	str	r0, [r7, #12]
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	4613      	mov	r3, r2
 8003d46:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b20      	cmp	r3, #32
 8003d52:	d112      	bne.n	8003d7a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <HAL_UART_Receive_IT+0x26>
 8003d5a:	88fb      	ldrh	r3, [r7, #6]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e00b      	b.n	8003d7c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d6a:	88fb      	ldrh	r3, [r7, #6]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	68b9      	ldr	r1, [r7, #8]
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 fb0f 	bl	8004394 <UART_Start_Receive_IT>
 8003d76:	4603      	mov	r3, r0
 8003d78:	e000      	b.n	8003d7c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003d7a:	2302      	movs	r3, #2
  }
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b0ba      	sub	sp, #232	; 0xe8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003dc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10f      	bne.n	8003dea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d009      	beq.n	8003dea <HAL_UART_IRQHandler+0x66>
 8003dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dda:	f003 0320 	and.w	r3, r3, #32
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 fbec 	bl	80045c0 <UART_Receive_IT>
      return;
 8003de8:	e25b      	b.n	80042a2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003dea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 80de 	beq.w	8003fb0 <HAL_UART_IRQHandler+0x22c>
 8003df4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d106      	bne.n	8003e0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e04:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 80d1 	beq.w	8003fb0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00b      	beq.n	8003e32 <HAL_UART_IRQHandler+0xae>
 8003e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d005      	beq.n	8003e32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2a:	f043 0201 	orr.w	r2, r3, #1
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e36:	f003 0304 	and.w	r3, r3, #4
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00b      	beq.n	8003e56 <HAL_UART_IRQHandler+0xd2>
 8003e3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d005      	beq.n	8003e56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4e:	f043 0202 	orr.w	r2, r3, #2
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00b      	beq.n	8003e7a <HAL_UART_IRQHandler+0xf6>
 8003e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d005      	beq.n	8003e7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e72:	f043 0204 	orr.w	r2, r3, #4
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d011      	beq.n	8003eaa <HAL_UART_IRQHandler+0x126>
 8003e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e8a:	f003 0320 	and.w	r3, r3, #32
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d105      	bne.n	8003e9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d005      	beq.n	8003eaa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea2:	f043 0208 	orr.w	r2, r3, #8
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 81f2 	beq.w	8004298 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eb8:	f003 0320 	and.w	r3, r3, #32
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d008      	beq.n	8003ed2 <HAL_UART_IRQHandler+0x14e>
 8003ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ec4:	f003 0320 	and.w	r3, r3, #32
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 fb77 	bl	80045c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	bf14      	ite	ne
 8003ee0:	2301      	movne	r3, #1
 8003ee2:	2300      	moveq	r3, #0
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d103      	bne.n	8003efe <HAL_UART_IRQHandler+0x17a>
 8003ef6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d04f      	beq.n	8003f9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 fa81 	bl	8004406 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d041      	beq.n	8003f96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	3314      	adds	r3, #20
 8003f18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f20:	e853 3f00 	ldrex	r3, [r3]
 8003f24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	3314      	adds	r3, #20
 8003f3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f4e:	e841 2300 	strex	r3, r2, [r1]
 8003f52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1d9      	bne.n	8003f12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d013      	beq.n	8003f8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6a:	4a7e      	ldr	r2, [pc, #504]	; (8004164 <HAL_UART_IRQHandler+0x3e0>)
 8003f6c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fd ff26 	bl	8001dc4 <HAL_DMA_Abort_IT>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d016      	beq.n	8003fac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f88:	4610      	mov	r0, r2
 8003f8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f8c:	e00e      	b.n	8003fac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f993 	bl	80042ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f94:	e00a      	b.n	8003fac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f98f 	bl	80042ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f9c:	e006      	b.n	8003fac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f98b 	bl	80042ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003faa:	e175      	b.n	8004298 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fac:	bf00      	nop
    return;
 8003fae:	e173      	b.n	8004298 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	f040 814f 	bne.w	8004258 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fbe:	f003 0310 	and.w	r3, r3, #16
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 8148 	beq.w	8004258 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fcc:	f003 0310 	and.w	r3, r3, #16
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 8141 	beq.w	8004258 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60bb      	str	r3, [r7, #8]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	60bb      	str	r3, [r7, #8]
 8003fea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 80b6 	beq.w	8004168 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004008:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 8145 	beq.w	800429c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004016:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800401a:	429a      	cmp	r2, r3
 800401c:	f080 813e 	bcs.w	800429c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004026:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	2b20      	cmp	r3, #32
 8004030:	f000 8088 	beq.w	8004144 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	330c      	adds	r3, #12
 800403a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004042:	e853 3f00 	ldrex	r3, [r3]
 8004046:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800404a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800404e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004052:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	330c      	adds	r3, #12
 800405c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004060:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004064:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004068:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800406c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004070:	e841 2300 	strex	r3, r2, [r1]
 8004074:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004078:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1d9      	bne.n	8004034 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3314      	adds	r3, #20
 8004086:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004088:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800408a:	e853 3f00 	ldrex	r3, [r3]
 800408e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004090:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004092:	f023 0301 	bic.w	r3, r3, #1
 8004096:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	3314      	adds	r3, #20
 80040a0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040a4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80040a8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040aa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80040ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80040b0:	e841 2300 	strex	r3, r2, [r1]
 80040b4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80040b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1e1      	bne.n	8004080 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3314      	adds	r3, #20
 80040c2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040c6:	e853 3f00 	ldrex	r3, [r3]
 80040ca:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80040cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3314      	adds	r3, #20
 80040dc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80040e0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80040e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040e8:	e841 2300 	strex	r3, r2, [r1]
 80040ec:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80040ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1e3      	bne.n	80040bc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	330c      	adds	r3, #12
 8004108:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800410c:	e853 3f00 	ldrex	r3, [r3]
 8004110:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004114:	f023 0310 	bic.w	r3, r3, #16
 8004118:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	330c      	adds	r3, #12
 8004122:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004126:	65ba      	str	r2, [r7, #88]	; 0x58
 8004128:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800412c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800412e:	e841 2300 	strex	r3, r2, [r1]
 8004132:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1e3      	bne.n	8004102 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413e:	4618      	mov	r0, r3
 8004140:	f7fd fe05 	bl	8001d4e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004152:	b29b      	uxth	r3, r3
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	b29b      	uxth	r3, r3
 8004158:	4619      	mov	r1, r3
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f8b6 	bl	80042cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004160:	e09c      	b.n	800429c <HAL_UART_IRQHandler+0x518>
 8004162:	bf00      	nop
 8004164:	080044cb 	.word	0x080044cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004170:	b29b      	uxth	r3, r3
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800417c:	b29b      	uxth	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 808e 	beq.w	80042a0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004184:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 8089 	beq.w	80042a0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	330c      	adds	r3, #12
 8004194:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004198:	e853 3f00 	ldrex	r3, [r3]
 800419c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800419e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	330c      	adds	r3, #12
 80041ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80041b2:	647a      	str	r2, [r7, #68]	; 0x44
 80041b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041ba:	e841 2300 	strex	r3, r2, [r1]
 80041be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1e3      	bne.n	800418e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	3314      	adds	r3, #20
 80041cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	e853 3f00 	ldrex	r3, [r3]
 80041d4:	623b      	str	r3, [r7, #32]
   return(result);
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	f023 0301 	bic.w	r3, r3, #1
 80041dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3314      	adds	r3, #20
 80041e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80041ea:	633a      	str	r2, [r7, #48]	; 0x30
 80041ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041f2:	e841 2300 	strex	r3, r2, [r1]
 80041f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1e3      	bne.n	80041c6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2220      	movs	r2, #32
 8004202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	330c      	adds	r3, #12
 8004212:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	e853 3f00 	ldrex	r3, [r3]
 800421a:	60fb      	str	r3, [r7, #12]
   return(result);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f023 0310 	bic.w	r3, r3, #16
 8004222:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	330c      	adds	r3, #12
 800422c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004230:	61fa      	str	r2, [r7, #28]
 8004232:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004234:	69b9      	ldr	r1, [r7, #24]
 8004236:	69fa      	ldr	r2, [r7, #28]
 8004238:	e841 2300 	strex	r3, r2, [r1]
 800423c:	617b      	str	r3, [r7, #20]
   return(result);
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1e3      	bne.n	800420c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800424a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800424e:	4619      	mov	r1, r3
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 f83b 	bl	80042cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004256:	e023      	b.n	80042a0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800425c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004260:	2b00      	cmp	r3, #0
 8004262:	d009      	beq.n	8004278 <HAL_UART_IRQHandler+0x4f4>
 8004264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f93e 	bl	80044f2 <UART_Transmit_IT>
    return;
 8004276:	e014      	b.n	80042a2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800427c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00e      	beq.n	80042a2 <HAL_UART_IRQHandler+0x51e>
 8004284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428c:	2b00      	cmp	r3, #0
 800428e:	d008      	beq.n	80042a2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 f97d 	bl	8004590 <UART_EndTransmit_IT>
    return;
 8004296:	e004      	b.n	80042a2 <HAL_UART_IRQHandler+0x51e>
    return;
 8004298:	bf00      	nop
 800429a:	e002      	b.n	80042a2 <HAL_UART_IRQHandler+0x51e>
      return;
 800429c:	bf00      	nop
 800429e:	e000      	b.n	80042a2 <HAL_UART_IRQHandler+0x51e>
      return;
 80042a0:	bf00      	nop
  }
}
 80042a2:	37e8      	adds	r7, #232	; 0xe8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr

080042ba <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr

080042cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	460b      	mov	r3, r1
 80042d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	bc80      	pop	{r7}
 80042e0:	4770      	bx	lr

080042e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b086      	sub	sp, #24
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	60f8      	str	r0, [r7, #12]
 80042ea:	60b9      	str	r1, [r7, #8]
 80042ec:	603b      	str	r3, [r7, #0]
 80042ee:	4613      	mov	r3, r2
 80042f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042f2:	e03b      	b.n	800436c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fa:	d037      	beq.n	800436c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042fc:	f7fd fbec 	bl	8001ad8 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	6a3a      	ldr	r2, [r7, #32]
 8004308:	429a      	cmp	r2, r3
 800430a:	d302      	bcc.n	8004312 <UART_WaitOnFlagUntilTimeout+0x30>
 800430c:	6a3b      	ldr	r3, [r7, #32]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e03a      	b.n	800438c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	d023      	beq.n	800436c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2b80      	cmp	r3, #128	; 0x80
 8004328:	d020      	beq.n	800436c <UART_WaitOnFlagUntilTimeout+0x8a>
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2b40      	cmp	r3, #64	; 0x40
 800432e:	d01d      	beq.n	800436c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b08      	cmp	r3, #8
 800433c:	d116      	bne.n	800436c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800433e:	2300      	movs	r3, #0
 8004340:	617b      	str	r3, [r7, #20]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	617b      	str	r3, [r7, #20]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	617b      	str	r3, [r7, #20]
 8004352:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f000 f856 	bl	8004406 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2208      	movs	r2, #8
 800435e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e00f      	b.n	800438c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	4013      	ands	r3, r2
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	429a      	cmp	r2, r3
 800437a:	bf0c      	ite	eq
 800437c:	2301      	moveq	r3, #1
 800437e:	2300      	movne	r3, #0
 8004380:	b2db      	uxtb	r3, r3
 8004382:	461a      	mov	r2, r3
 8004384:	79fb      	ldrb	r3, [r7, #7]
 8004386:	429a      	cmp	r2, r3
 8004388:	d0b4      	beq.n	80042f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	4613      	mov	r3, r2
 80043a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	88fa      	ldrh	r2, [r7, #6]
 80043ac:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	88fa      	ldrh	r2, [r7, #6]
 80043b2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2222      	movs	r2, #34	; 0x22
 80043be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d007      	beq.n	80043da <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68da      	ldr	r2, [r3, #12]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043d8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695a      	ldr	r2, [r3, #20]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f042 0201 	orr.w	r2, r2, #1
 80043e8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68da      	ldr	r2, [r3, #12]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f042 0220 	orr.w	r2, r2, #32
 80043f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	bc80      	pop	{r7}
 8004404:	4770      	bx	lr

08004406 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004406:	b480      	push	{r7}
 8004408:	b095      	sub	sp, #84	; 0x54
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	330c      	adds	r3, #12
 8004414:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004418:	e853 3f00 	ldrex	r3, [r3]
 800441c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800441e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004420:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004424:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	330c      	adds	r3, #12
 800442c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800442e:	643a      	str	r2, [r7, #64]	; 0x40
 8004430:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004432:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004434:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004436:	e841 2300 	strex	r3, r2, [r1]
 800443a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800443c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1e5      	bne.n	800440e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	3314      	adds	r3, #20
 8004448:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444a:	6a3b      	ldr	r3, [r7, #32]
 800444c:	e853 3f00 	ldrex	r3, [r3]
 8004450:	61fb      	str	r3, [r7, #28]
   return(result);
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	f023 0301 	bic.w	r3, r3, #1
 8004458:	64bb      	str	r3, [r7, #72]	; 0x48
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	3314      	adds	r3, #20
 8004460:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004462:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004464:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004466:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800446a:	e841 2300 	strex	r3, r2, [r1]
 800446e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1e5      	bne.n	8004442 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447a:	2b01      	cmp	r3, #1
 800447c:	d119      	bne.n	80044b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	330c      	adds	r3, #12
 8004484:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	e853 3f00 	ldrex	r3, [r3]
 800448c:	60bb      	str	r3, [r7, #8]
   return(result);
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	f023 0310 	bic.w	r3, r3, #16
 8004494:	647b      	str	r3, [r7, #68]	; 0x44
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	330c      	adds	r3, #12
 800449c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800449e:	61ba      	str	r2, [r7, #24]
 80044a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a2:	6979      	ldr	r1, [r7, #20]
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	e841 2300 	strex	r3, r2, [r1]
 80044aa:	613b      	str	r3, [r7, #16]
   return(result);
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1e5      	bne.n	800447e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2220      	movs	r2, #32
 80044b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	631a      	str	r2, [r3, #48]	; 0x30
}
 80044c0:	bf00      	nop
 80044c2:	3754      	adds	r7, #84	; 0x54
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bc80      	pop	{r7}
 80044c8:	4770      	bx	lr

080044ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f7ff fee8 	bl	80042ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044ea:	bf00      	nop
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b085      	sub	sp, #20
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b21      	cmp	r3, #33	; 0x21
 8004504:	d13e      	bne.n	8004584 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800450e:	d114      	bne.n	800453a <UART_Transmit_IT+0x48>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d110      	bne.n	800453a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	881b      	ldrh	r3, [r3, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800452c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	1c9a      	adds	r2, r3, #2
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	621a      	str	r2, [r3, #32]
 8004538:	e008      	b.n	800454c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	1c59      	adds	r1, r3, #1
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6211      	str	r1, [r2, #32]
 8004544:	781a      	ldrb	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004550:	b29b      	uxth	r3, r3
 8004552:	3b01      	subs	r3, #1
 8004554:	b29b      	uxth	r3, r3
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	4619      	mov	r1, r3
 800455a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10f      	bne.n	8004580 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68da      	ldr	r2, [r3, #12]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800456e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800457e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004580:	2300      	movs	r3, #0
 8004582:	e000      	b.n	8004586 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004584:	2302      	movs	r3, #2
  }
}
 8004586:	4618      	mov	r0, r3
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	bc80      	pop	{r7}
 800458e:	4770      	bx	lr

08004590 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68da      	ldr	r2, [r3, #12]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f7ff fe79 	bl	80042a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3708      	adds	r7, #8
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08c      	sub	sp, #48	; 0x30
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b22      	cmp	r3, #34	; 0x22
 80045d2:	f040 80ae 	bne.w	8004732 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045de:	d117      	bne.n	8004610 <UART_Receive_IT+0x50>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d113      	bne.n	8004610 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80045e8:	2300      	movs	r3, #0
 80045ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045fe:	b29a      	uxth	r2, r3
 8004600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004602:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004608:	1c9a      	adds	r2, r3, #2
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	629a      	str	r2, [r3, #40]	; 0x28
 800460e:	e026      	b.n	800465e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004614:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004616:	2300      	movs	r3, #0
 8004618:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004622:	d007      	beq.n	8004634 <UART_Receive_IT+0x74>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10a      	bne.n	8004642 <UART_Receive_IT+0x82>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d106      	bne.n	8004642 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	b2da      	uxtb	r2, r3
 800463c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463e:	701a      	strb	r2, [r3, #0]
 8004640:	e008      	b.n	8004654 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	b2db      	uxtb	r3, r3
 800464a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800464e:	b2da      	uxtb	r2, r3
 8004650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004652:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004662:	b29b      	uxth	r3, r3
 8004664:	3b01      	subs	r3, #1
 8004666:	b29b      	uxth	r3, r3
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	4619      	mov	r1, r3
 800466c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800466e:	2b00      	cmp	r3, #0
 8004670:	d15d      	bne.n	800472e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 0220 	bic.w	r2, r2, #32
 8004680:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68da      	ldr	r2, [r3, #12]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004690:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	695a      	ldr	r2, [r3, #20]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 0201 	bic.w	r2, r2, #1
 80046a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2220      	movs	r2, #32
 80046a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d135      	bne.n	8004724 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	330c      	adds	r3, #12
 80046c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	e853 3f00 	ldrex	r3, [r3]
 80046cc:	613b      	str	r3, [r7, #16]
   return(result);
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f023 0310 	bic.w	r3, r3, #16
 80046d4:	627b      	str	r3, [r7, #36]	; 0x24
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	330c      	adds	r3, #12
 80046dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046de:	623a      	str	r2, [r7, #32]
 80046e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e2:	69f9      	ldr	r1, [r7, #28]
 80046e4:	6a3a      	ldr	r2, [r7, #32]
 80046e6:	e841 2300 	strex	r3, r2, [r1]
 80046ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1e5      	bne.n	80046be <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0310 	and.w	r3, r3, #16
 80046fc:	2b10      	cmp	r3, #16
 80046fe:	d10a      	bne.n	8004716 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004700:	2300      	movs	r3, #0
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800471a:	4619      	mov	r1, r3
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f7ff fdd5 	bl	80042cc <HAL_UARTEx_RxEventCallback>
 8004722:	e002      	b.n	800472a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7fc fa5b 	bl	8000be0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800472a:	2300      	movs	r3, #0
 800472c:	e002      	b.n	8004734 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800472e:	2300      	movs	r3, #0
 8004730:	e000      	b.n	8004734 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004732:	2302      	movs	r3, #2
  }
}
 8004734:	4618      	mov	r0, r3
 8004736:	3730      	adds	r7, #48	; 0x30
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68da      	ldr	r2, [r3, #12]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	4313      	orrs	r3, r2
 800476a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004776:	f023 030c 	bic.w	r3, r3, #12
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	6812      	ldr	r2, [r2, #0]
 800477e:	68b9      	ldr	r1, [r7, #8]
 8004780:	430b      	orrs	r3, r1
 8004782:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	699a      	ldr	r2, [r3, #24]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a2c      	ldr	r2, [pc, #176]	; (8004850 <UART_SetConfig+0x114>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d103      	bne.n	80047ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80047a4:	f7fe fdca 	bl	800333c <HAL_RCC_GetPCLK2Freq>
 80047a8:	60f8      	str	r0, [r7, #12]
 80047aa:	e002      	b.n	80047b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80047ac:	f7fe fdb2 	bl	8003314 <HAL_RCC_GetPCLK1Freq>
 80047b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	4613      	mov	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	009a      	lsls	r2, r3, #2
 80047bc:	441a      	add	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c8:	4a22      	ldr	r2, [pc, #136]	; (8004854 <UART_SetConfig+0x118>)
 80047ca:	fba2 2303 	umull	r2, r3, r2, r3
 80047ce:	095b      	lsrs	r3, r3, #5
 80047d0:	0119      	lsls	r1, r3, #4
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	4613      	mov	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	009a      	lsls	r2, r3, #2
 80047dc:	441a      	add	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80047e8:	4b1a      	ldr	r3, [pc, #104]	; (8004854 <UART_SetConfig+0x118>)
 80047ea:	fba3 0302 	umull	r0, r3, r3, r2
 80047ee:	095b      	lsrs	r3, r3, #5
 80047f0:	2064      	movs	r0, #100	; 0x64
 80047f2:	fb00 f303 	mul.w	r3, r0, r3
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	011b      	lsls	r3, r3, #4
 80047fa:	3332      	adds	r3, #50	; 0x32
 80047fc:	4a15      	ldr	r2, [pc, #84]	; (8004854 <UART_SetConfig+0x118>)
 80047fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004802:	095b      	lsrs	r3, r3, #5
 8004804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004808:	4419      	add	r1, r3
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	4613      	mov	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	009a      	lsls	r2, r3, #2
 8004814:	441a      	add	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004820:	4b0c      	ldr	r3, [pc, #48]	; (8004854 <UART_SetConfig+0x118>)
 8004822:	fba3 0302 	umull	r0, r3, r3, r2
 8004826:	095b      	lsrs	r3, r3, #5
 8004828:	2064      	movs	r0, #100	; 0x64
 800482a:	fb00 f303 	mul.w	r3, r0, r3
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	011b      	lsls	r3, r3, #4
 8004832:	3332      	adds	r3, #50	; 0x32
 8004834:	4a07      	ldr	r2, [pc, #28]	; (8004854 <UART_SetConfig+0x118>)
 8004836:	fba2 2303 	umull	r2, r3, r2, r3
 800483a:	095b      	lsrs	r3, r3, #5
 800483c:	f003 020f 	and.w	r2, r3, #15
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	440a      	add	r2, r1
 8004846:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004848:	bf00      	nop
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	40013800 	.word	0x40013800
 8004854:	51eb851f 	.word	0x51eb851f

08004858 <atoi>:
 8004858:	220a      	movs	r2, #10
 800485a:	2100      	movs	r1, #0
 800485c:	f000 b946 	b.w	8004aec <strtol>

08004860 <__errno>:
 8004860:	4b01      	ldr	r3, [pc, #4]	; (8004868 <__errno+0x8>)
 8004862:	6818      	ldr	r0, [r3, #0]
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	20000088 	.word	0x20000088

0800486c <__libc_init_array>:
 800486c:	b570      	push	{r4, r5, r6, lr}
 800486e:	2600      	movs	r6, #0
 8004870:	4d0c      	ldr	r5, [pc, #48]	; (80048a4 <__libc_init_array+0x38>)
 8004872:	4c0d      	ldr	r4, [pc, #52]	; (80048a8 <__libc_init_array+0x3c>)
 8004874:	1b64      	subs	r4, r4, r5
 8004876:	10a4      	asrs	r4, r4, #2
 8004878:	42a6      	cmp	r6, r4
 800487a:	d109      	bne.n	8004890 <__libc_init_array+0x24>
 800487c:	f001 fabe 	bl	8005dfc <_init>
 8004880:	2600      	movs	r6, #0
 8004882:	4d0a      	ldr	r5, [pc, #40]	; (80048ac <__libc_init_array+0x40>)
 8004884:	4c0a      	ldr	r4, [pc, #40]	; (80048b0 <__libc_init_array+0x44>)
 8004886:	1b64      	subs	r4, r4, r5
 8004888:	10a4      	asrs	r4, r4, #2
 800488a:	42a6      	cmp	r6, r4
 800488c:	d105      	bne.n	800489a <__libc_init_array+0x2e>
 800488e:	bd70      	pop	{r4, r5, r6, pc}
 8004890:	f855 3b04 	ldr.w	r3, [r5], #4
 8004894:	4798      	blx	r3
 8004896:	3601      	adds	r6, #1
 8004898:	e7ee      	b.n	8004878 <__libc_init_array+0xc>
 800489a:	f855 3b04 	ldr.w	r3, [r5], #4
 800489e:	4798      	blx	r3
 80048a0:	3601      	adds	r6, #1
 80048a2:	e7f2      	b.n	800488a <__libc_init_array+0x1e>
 80048a4:	080060d0 	.word	0x080060d0
 80048a8:	080060d0 	.word	0x080060d0
 80048ac:	080060d0 	.word	0x080060d0
 80048b0:	080060d4 	.word	0x080060d4

080048b4 <memset>:
 80048b4:	4603      	mov	r3, r0
 80048b6:	4402      	add	r2, r0
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d100      	bne.n	80048be <memset+0xa>
 80048bc:	4770      	bx	lr
 80048be:	f803 1b01 	strb.w	r1, [r3], #1
 80048c2:	e7f9      	b.n	80048b8 <memset+0x4>

080048c4 <siprintf>:
 80048c4:	b40e      	push	{r1, r2, r3}
 80048c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80048ca:	b500      	push	{lr}
 80048cc:	b09c      	sub	sp, #112	; 0x70
 80048ce:	ab1d      	add	r3, sp, #116	; 0x74
 80048d0:	9002      	str	r0, [sp, #8]
 80048d2:	9006      	str	r0, [sp, #24]
 80048d4:	9107      	str	r1, [sp, #28]
 80048d6:	9104      	str	r1, [sp, #16]
 80048d8:	4808      	ldr	r0, [pc, #32]	; (80048fc <siprintf+0x38>)
 80048da:	4909      	ldr	r1, [pc, #36]	; (8004900 <siprintf+0x3c>)
 80048dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80048e0:	9105      	str	r1, [sp, #20]
 80048e2:	6800      	ldr	r0, [r0, #0]
 80048e4:	a902      	add	r1, sp, #8
 80048e6:	9301      	str	r3, [sp, #4]
 80048e8:	f000 fa44 	bl	8004d74 <_svfiprintf_r>
 80048ec:	2200      	movs	r2, #0
 80048ee:	9b02      	ldr	r3, [sp, #8]
 80048f0:	701a      	strb	r2, [r3, #0]
 80048f2:	b01c      	add	sp, #112	; 0x70
 80048f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80048f8:	b003      	add	sp, #12
 80048fa:	4770      	bx	lr
 80048fc:	20000088 	.word	0x20000088
 8004900:	ffff0208 	.word	0xffff0208

08004904 <strncmp>:
 8004904:	b510      	push	{r4, lr}
 8004906:	b16a      	cbz	r2, 8004924 <strncmp+0x20>
 8004908:	3901      	subs	r1, #1
 800490a:	1884      	adds	r4, r0, r2
 800490c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004910:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004914:	4293      	cmp	r3, r2
 8004916:	d103      	bne.n	8004920 <strncmp+0x1c>
 8004918:	42a0      	cmp	r0, r4
 800491a:	d001      	beq.n	8004920 <strncmp+0x1c>
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1f5      	bne.n	800490c <strncmp+0x8>
 8004920:	1a98      	subs	r0, r3, r2
 8004922:	bd10      	pop	{r4, pc}
 8004924:	4610      	mov	r0, r2
 8004926:	e7fc      	b.n	8004922 <strncmp+0x1e>

08004928 <strtok>:
 8004928:	4b16      	ldr	r3, [pc, #88]	; (8004984 <strtok+0x5c>)
 800492a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800492e:	681f      	ldr	r7, [r3, #0]
 8004930:	4605      	mov	r5, r0
 8004932:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8004934:	460e      	mov	r6, r1
 8004936:	b9ec      	cbnz	r4, 8004974 <strtok+0x4c>
 8004938:	2050      	movs	r0, #80	; 0x50
 800493a:	f000 f911 	bl	8004b60 <malloc>
 800493e:	4602      	mov	r2, r0
 8004940:	65b8      	str	r0, [r7, #88]	; 0x58
 8004942:	b920      	cbnz	r0, 800494e <strtok+0x26>
 8004944:	2157      	movs	r1, #87	; 0x57
 8004946:	4b10      	ldr	r3, [pc, #64]	; (8004988 <strtok+0x60>)
 8004948:	4810      	ldr	r0, [pc, #64]	; (800498c <strtok+0x64>)
 800494a:	f000 f8d9 	bl	8004b00 <__assert_func>
 800494e:	e9c0 4400 	strd	r4, r4, [r0]
 8004952:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004956:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800495a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800495e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004962:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004966:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800496a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800496e:	6184      	str	r4, [r0, #24]
 8004970:	7704      	strb	r4, [r0, #28]
 8004972:	6244      	str	r4, [r0, #36]	; 0x24
 8004974:	4631      	mov	r1, r6
 8004976:	4628      	mov	r0, r5
 8004978:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800497a:	2301      	movs	r3, #1
 800497c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004980:	f000 b806 	b.w	8004990 <__strtok_r>
 8004984:	20000088 	.word	0x20000088
 8004988:	08005e88 	.word	0x08005e88
 800498c:	08005e9f 	.word	0x08005e9f

08004990 <__strtok_r>:
 8004990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004992:	b908      	cbnz	r0, 8004998 <__strtok_r+0x8>
 8004994:	6810      	ldr	r0, [r2, #0]
 8004996:	b188      	cbz	r0, 80049bc <__strtok_r+0x2c>
 8004998:	4604      	mov	r4, r0
 800499a:	460f      	mov	r7, r1
 800499c:	4620      	mov	r0, r4
 800499e:	f814 5b01 	ldrb.w	r5, [r4], #1
 80049a2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80049a6:	b91e      	cbnz	r6, 80049b0 <__strtok_r+0x20>
 80049a8:	b965      	cbnz	r5, 80049c4 <__strtok_r+0x34>
 80049aa:	4628      	mov	r0, r5
 80049ac:	6015      	str	r5, [r2, #0]
 80049ae:	e005      	b.n	80049bc <__strtok_r+0x2c>
 80049b0:	42b5      	cmp	r5, r6
 80049b2:	d1f6      	bne.n	80049a2 <__strtok_r+0x12>
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1f0      	bne.n	800499a <__strtok_r+0xa>
 80049b8:	6014      	str	r4, [r2, #0]
 80049ba:	7003      	strb	r3, [r0, #0]
 80049bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049be:	461c      	mov	r4, r3
 80049c0:	e00c      	b.n	80049dc <__strtok_r+0x4c>
 80049c2:	b915      	cbnz	r5, 80049ca <__strtok_r+0x3a>
 80049c4:	460e      	mov	r6, r1
 80049c6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80049ca:	f816 5b01 	ldrb.w	r5, [r6], #1
 80049ce:	42ab      	cmp	r3, r5
 80049d0:	d1f7      	bne.n	80049c2 <__strtok_r+0x32>
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d0f3      	beq.n	80049be <__strtok_r+0x2e>
 80049d6:	2300      	movs	r3, #0
 80049d8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80049dc:	6014      	str	r4, [r2, #0]
 80049de:	e7ed      	b.n	80049bc <__strtok_r+0x2c>

080049e0 <_strtol_l.isra.0>:
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049e6:	4686      	mov	lr, r0
 80049e8:	d001      	beq.n	80049ee <_strtol_l.isra.0+0xe>
 80049ea:	2b24      	cmp	r3, #36	; 0x24
 80049ec:	d906      	bls.n	80049fc <_strtol_l.isra.0+0x1c>
 80049ee:	f7ff ff37 	bl	8004860 <__errno>
 80049f2:	2316      	movs	r3, #22
 80049f4:	6003      	str	r3, [r0, #0]
 80049f6:	2000      	movs	r0, #0
 80049f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049fc:	468c      	mov	ip, r1
 80049fe:	4e3a      	ldr	r6, [pc, #232]	; (8004ae8 <_strtol_l.isra.0+0x108>)
 8004a00:	4660      	mov	r0, ip
 8004a02:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004a06:	5da5      	ldrb	r5, [r4, r6]
 8004a08:	f015 0508 	ands.w	r5, r5, #8
 8004a0c:	d1f8      	bne.n	8004a00 <_strtol_l.isra.0+0x20>
 8004a0e:	2c2d      	cmp	r4, #45	; 0x2d
 8004a10:	d133      	bne.n	8004a7a <_strtol_l.isra.0+0x9a>
 8004a12:	f04f 0801 	mov.w	r8, #1
 8004a16:	f89c 4000 	ldrb.w	r4, [ip]
 8004a1a:	f100 0c02 	add.w	ip, r0, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d05d      	beq.n	8004ade <_strtol_l.isra.0+0xfe>
 8004a22:	2b10      	cmp	r3, #16
 8004a24:	d10c      	bne.n	8004a40 <_strtol_l.isra.0+0x60>
 8004a26:	2c30      	cmp	r4, #48	; 0x30
 8004a28:	d10a      	bne.n	8004a40 <_strtol_l.isra.0+0x60>
 8004a2a:	f89c 0000 	ldrb.w	r0, [ip]
 8004a2e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004a32:	2858      	cmp	r0, #88	; 0x58
 8004a34:	d14e      	bne.n	8004ad4 <_strtol_l.isra.0+0xf4>
 8004a36:	2310      	movs	r3, #16
 8004a38:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8004a3c:	f10c 0c02 	add.w	ip, ip, #2
 8004a40:	2500      	movs	r5, #0
 8004a42:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8004a46:	3f01      	subs	r7, #1
 8004a48:	fbb7 f9f3 	udiv	r9, r7, r3
 8004a4c:	4628      	mov	r0, r5
 8004a4e:	fb03 7a19 	mls	sl, r3, r9, r7
 8004a52:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8004a56:	2e09      	cmp	r6, #9
 8004a58:	d818      	bhi.n	8004a8c <_strtol_l.isra.0+0xac>
 8004a5a:	4634      	mov	r4, r6
 8004a5c:	42a3      	cmp	r3, r4
 8004a5e:	dd24      	ble.n	8004aaa <_strtol_l.isra.0+0xca>
 8004a60:	2d00      	cmp	r5, #0
 8004a62:	db1f      	blt.n	8004aa4 <_strtol_l.isra.0+0xc4>
 8004a64:	4581      	cmp	r9, r0
 8004a66:	d31d      	bcc.n	8004aa4 <_strtol_l.isra.0+0xc4>
 8004a68:	d101      	bne.n	8004a6e <_strtol_l.isra.0+0x8e>
 8004a6a:	45a2      	cmp	sl, r4
 8004a6c:	db1a      	blt.n	8004aa4 <_strtol_l.isra.0+0xc4>
 8004a6e:	2501      	movs	r5, #1
 8004a70:	fb00 4003 	mla	r0, r0, r3, r4
 8004a74:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004a78:	e7eb      	b.n	8004a52 <_strtol_l.isra.0+0x72>
 8004a7a:	2c2b      	cmp	r4, #43	; 0x2b
 8004a7c:	bf08      	it	eq
 8004a7e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8004a82:	46a8      	mov	r8, r5
 8004a84:	bf08      	it	eq
 8004a86:	f100 0c02 	addeq.w	ip, r0, #2
 8004a8a:	e7c8      	b.n	8004a1e <_strtol_l.isra.0+0x3e>
 8004a8c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8004a90:	2e19      	cmp	r6, #25
 8004a92:	d801      	bhi.n	8004a98 <_strtol_l.isra.0+0xb8>
 8004a94:	3c37      	subs	r4, #55	; 0x37
 8004a96:	e7e1      	b.n	8004a5c <_strtol_l.isra.0+0x7c>
 8004a98:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8004a9c:	2e19      	cmp	r6, #25
 8004a9e:	d804      	bhi.n	8004aaa <_strtol_l.isra.0+0xca>
 8004aa0:	3c57      	subs	r4, #87	; 0x57
 8004aa2:	e7db      	b.n	8004a5c <_strtol_l.isra.0+0x7c>
 8004aa4:	f04f 35ff 	mov.w	r5, #4294967295
 8004aa8:	e7e4      	b.n	8004a74 <_strtol_l.isra.0+0x94>
 8004aaa:	2d00      	cmp	r5, #0
 8004aac:	da08      	bge.n	8004ac0 <_strtol_l.isra.0+0xe0>
 8004aae:	2322      	movs	r3, #34	; 0x22
 8004ab0:	4638      	mov	r0, r7
 8004ab2:	f8ce 3000 	str.w	r3, [lr]
 8004ab6:	2a00      	cmp	r2, #0
 8004ab8:	d09e      	beq.n	80049f8 <_strtol_l.isra.0+0x18>
 8004aba:	f10c 31ff 	add.w	r1, ip, #4294967295
 8004abe:	e007      	b.n	8004ad0 <_strtol_l.isra.0+0xf0>
 8004ac0:	f1b8 0f00 	cmp.w	r8, #0
 8004ac4:	d000      	beq.n	8004ac8 <_strtol_l.isra.0+0xe8>
 8004ac6:	4240      	negs	r0, r0
 8004ac8:	2a00      	cmp	r2, #0
 8004aca:	d095      	beq.n	80049f8 <_strtol_l.isra.0+0x18>
 8004acc:	2d00      	cmp	r5, #0
 8004ace:	d1f4      	bne.n	8004aba <_strtol_l.isra.0+0xda>
 8004ad0:	6011      	str	r1, [r2, #0]
 8004ad2:	e791      	b.n	80049f8 <_strtol_l.isra.0+0x18>
 8004ad4:	2430      	movs	r4, #48	; 0x30
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1b2      	bne.n	8004a40 <_strtol_l.isra.0+0x60>
 8004ada:	2308      	movs	r3, #8
 8004adc:	e7b0      	b.n	8004a40 <_strtol_l.isra.0+0x60>
 8004ade:	2c30      	cmp	r4, #48	; 0x30
 8004ae0:	d0a3      	beq.n	8004a2a <_strtol_l.isra.0+0x4a>
 8004ae2:	230a      	movs	r3, #10
 8004ae4:	e7ac      	b.n	8004a40 <_strtol_l.isra.0+0x60>
 8004ae6:	bf00      	nop
 8004ae8:	08005f3d 	.word	0x08005f3d

08004aec <strtol>:
 8004aec:	4613      	mov	r3, r2
 8004aee:	460a      	mov	r2, r1
 8004af0:	4601      	mov	r1, r0
 8004af2:	4802      	ldr	r0, [pc, #8]	; (8004afc <strtol+0x10>)
 8004af4:	6800      	ldr	r0, [r0, #0]
 8004af6:	f7ff bf73 	b.w	80049e0 <_strtol_l.isra.0>
 8004afa:	bf00      	nop
 8004afc:	20000088 	.word	0x20000088

08004b00 <__assert_func>:
 8004b00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004b02:	4614      	mov	r4, r2
 8004b04:	461a      	mov	r2, r3
 8004b06:	4b09      	ldr	r3, [pc, #36]	; (8004b2c <__assert_func+0x2c>)
 8004b08:	4605      	mov	r5, r0
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68d8      	ldr	r0, [r3, #12]
 8004b0e:	b14c      	cbz	r4, 8004b24 <__assert_func+0x24>
 8004b10:	4b07      	ldr	r3, [pc, #28]	; (8004b30 <__assert_func+0x30>)
 8004b12:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004b16:	9100      	str	r1, [sp, #0]
 8004b18:	462b      	mov	r3, r5
 8004b1a:	4906      	ldr	r1, [pc, #24]	; (8004b34 <__assert_func+0x34>)
 8004b1c:	f000 f80e 	bl	8004b3c <fiprintf>
 8004b20:	f000 fde6 	bl	80056f0 <abort>
 8004b24:	4b04      	ldr	r3, [pc, #16]	; (8004b38 <__assert_func+0x38>)
 8004b26:	461c      	mov	r4, r3
 8004b28:	e7f3      	b.n	8004b12 <__assert_func+0x12>
 8004b2a:	bf00      	nop
 8004b2c:	20000088 	.word	0x20000088
 8004b30:	08005f00 	.word	0x08005f00
 8004b34:	08005f0d 	.word	0x08005f0d
 8004b38:	08005f3b 	.word	0x08005f3b

08004b3c <fiprintf>:
 8004b3c:	b40e      	push	{r1, r2, r3}
 8004b3e:	b503      	push	{r0, r1, lr}
 8004b40:	4601      	mov	r1, r0
 8004b42:	ab03      	add	r3, sp, #12
 8004b44:	4805      	ldr	r0, [pc, #20]	; (8004b5c <fiprintf+0x20>)
 8004b46:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b4a:	6800      	ldr	r0, [r0, #0]
 8004b4c:	9301      	str	r3, [sp, #4]
 8004b4e:	f000 fa39 	bl	8004fc4 <_vfiprintf_r>
 8004b52:	b002      	add	sp, #8
 8004b54:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b58:	b003      	add	sp, #12
 8004b5a:	4770      	bx	lr
 8004b5c:	20000088 	.word	0x20000088

08004b60 <malloc>:
 8004b60:	4b02      	ldr	r3, [pc, #8]	; (8004b6c <malloc+0xc>)
 8004b62:	4601      	mov	r1, r0
 8004b64:	6818      	ldr	r0, [r3, #0]
 8004b66:	f000 b84f 	b.w	8004c08 <_malloc_r>
 8004b6a:	bf00      	nop
 8004b6c:	20000088 	.word	0x20000088

08004b70 <_free_r>:
 8004b70:	b538      	push	{r3, r4, r5, lr}
 8004b72:	4605      	mov	r5, r0
 8004b74:	2900      	cmp	r1, #0
 8004b76:	d043      	beq.n	8004c00 <_free_r+0x90>
 8004b78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b7c:	1f0c      	subs	r4, r1, #4
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	bfb8      	it	lt
 8004b82:	18e4      	addlt	r4, r4, r3
 8004b84:	f001 f810 	bl	8005ba8 <__malloc_lock>
 8004b88:	4a1e      	ldr	r2, [pc, #120]	; (8004c04 <_free_r+0x94>)
 8004b8a:	6813      	ldr	r3, [r2, #0]
 8004b8c:	4610      	mov	r0, r2
 8004b8e:	b933      	cbnz	r3, 8004b9e <_free_r+0x2e>
 8004b90:	6063      	str	r3, [r4, #4]
 8004b92:	6014      	str	r4, [r2, #0]
 8004b94:	4628      	mov	r0, r5
 8004b96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b9a:	f001 b80b 	b.w	8005bb4 <__malloc_unlock>
 8004b9e:	42a3      	cmp	r3, r4
 8004ba0:	d90a      	bls.n	8004bb8 <_free_r+0x48>
 8004ba2:	6821      	ldr	r1, [r4, #0]
 8004ba4:	1862      	adds	r2, r4, r1
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	bf01      	itttt	eq
 8004baa:	681a      	ldreq	r2, [r3, #0]
 8004bac:	685b      	ldreq	r3, [r3, #4]
 8004bae:	1852      	addeq	r2, r2, r1
 8004bb0:	6022      	streq	r2, [r4, #0]
 8004bb2:	6063      	str	r3, [r4, #4]
 8004bb4:	6004      	str	r4, [r0, #0]
 8004bb6:	e7ed      	b.n	8004b94 <_free_r+0x24>
 8004bb8:	461a      	mov	r2, r3
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	b10b      	cbz	r3, 8004bc2 <_free_r+0x52>
 8004bbe:	42a3      	cmp	r3, r4
 8004bc0:	d9fa      	bls.n	8004bb8 <_free_r+0x48>
 8004bc2:	6811      	ldr	r1, [r2, #0]
 8004bc4:	1850      	adds	r0, r2, r1
 8004bc6:	42a0      	cmp	r0, r4
 8004bc8:	d10b      	bne.n	8004be2 <_free_r+0x72>
 8004bca:	6820      	ldr	r0, [r4, #0]
 8004bcc:	4401      	add	r1, r0
 8004bce:	1850      	adds	r0, r2, r1
 8004bd0:	4283      	cmp	r3, r0
 8004bd2:	6011      	str	r1, [r2, #0]
 8004bd4:	d1de      	bne.n	8004b94 <_free_r+0x24>
 8004bd6:	6818      	ldr	r0, [r3, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	4401      	add	r1, r0
 8004bdc:	6011      	str	r1, [r2, #0]
 8004bde:	6053      	str	r3, [r2, #4]
 8004be0:	e7d8      	b.n	8004b94 <_free_r+0x24>
 8004be2:	d902      	bls.n	8004bea <_free_r+0x7a>
 8004be4:	230c      	movs	r3, #12
 8004be6:	602b      	str	r3, [r5, #0]
 8004be8:	e7d4      	b.n	8004b94 <_free_r+0x24>
 8004bea:	6820      	ldr	r0, [r4, #0]
 8004bec:	1821      	adds	r1, r4, r0
 8004bee:	428b      	cmp	r3, r1
 8004bf0:	bf01      	itttt	eq
 8004bf2:	6819      	ldreq	r1, [r3, #0]
 8004bf4:	685b      	ldreq	r3, [r3, #4]
 8004bf6:	1809      	addeq	r1, r1, r0
 8004bf8:	6021      	streq	r1, [r4, #0]
 8004bfa:	6063      	str	r3, [r4, #4]
 8004bfc:	6054      	str	r4, [r2, #4]
 8004bfe:	e7c9      	b.n	8004b94 <_free_r+0x24>
 8004c00:	bd38      	pop	{r3, r4, r5, pc}
 8004c02:	bf00      	nop
 8004c04:	20000140 	.word	0x20000140

08004c08 <_malloc_r>:
 8004c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c0a:	1ccd      	adds	r5, r1, #3
 8004c0c:	f025 0503 	bic.w	r5, r5, #3
 8004c10:	3508      	adds	r5, #8
 8004c12:	2d0c      	cmp	r5, #12
 8004c14:	bf38      	it	cc
 8004c16:	250c      	movcc	r5, #12
 8004c18:	2d00      	cmp	r5, #0
 8004c1a:	4606      	mov	r6, r0
 8004c1c:	db01      	blt.n	8004c22 <_malloc_r+0x1a>
 8004c1e:	42a9      	cmp	r1, r5
 8004c20:	d903      	bls.n	8004c2a <_malloc_r+0x22>
 8004c22:	230c      	movs	r3, #12
 8004c24:	6033      	str	r3, [r6, #0]
 8004c26:	2000      	movs	r0, #0
 8004c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c2a:	f000 ffbd 	bl	8005ba8 <__malloc_lock>
 8004c2e:	4921      	ldr	r1, [pc, #132]	; (8004cb4 <_malloc_r+0xac>)
 8004c30:	680a      	ldr	r2, [r1, #0]
 8004c32:	4614      	mov	r4, r2
 8004c34:	b99c      	cbnz	r4, 8004c5e <_malloc_r+0x56>
 8004c36:	4f20      	ldr	r7, [pc, #128]	; (8004cb8 <_malloc_r+0xb0>)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	b923      	cbnz	r3, 8004c46 <_malloc_r+0x3e>
 8004c3c:	4621      	mov	r1, r4
 8004c3e:	4630      	mov	r0, r6
 8004c40:	f000 fc86 	bl	8005550 <_sbrk_r>
 8004c44:	6038      	str	r0, [r7, #0]
 8004c46:	4629      	mov	r1, r5
 8004c48:	4630      	mov	r0, r6
 8004c4a:	f000 fc81 	bl	8005550 <_sbrk_r>
 8004c4e:	1c43      	adds	r3, r0, #1
 8004c50:	d123      	bne.n	8004c9a <_malloc_r+0x92>
 8004c52:	230c      	movs	r3, #12
 8004c54:	4630      	mov	r0, r6
 8004c56:	6033      	str	r3, [r6, #0]
 8004c58:	f000 ffac 	bl	8005bb4 <__malloc_unlock>
 8004c5c:	e7e3      	b.n	8004c26 <_malloc_r+0x1e>
 8004c5e:	6823      	ldr	r3, [r4, #0]
 8004c60:	1b5b      	subs	r3, r3, r5
 8004c62:	d417      	bmi.n	8004c94 <_malloc_r+0x8c>
 8004c64:	2b0b      	cmp	r3, #11
 8004c66:	d903      	bls.n	8004c70 <_malloc_r+0x68>
 8004c68:	6023      	str	r3, [r4, #0]
 8004c6a:	441c      	add	r4, r3
 8004c6c:	6025      	str	r5, [r4, #0]
 8004c6e:	e004      	b.n	8004c7a <_malloc_r+0x72>
 8004c70:	6863      	ldr	r3, [r4, #4]
 8004c72:	42a2      	cmp	r2, r4
 8004c74:	bf0c      	ite	eq
 8004c76:	600b      	streq	r3, [r1, #0]
 8004c78:	6053      	strne	r3, [r2, #4]
 8004c7a:	4630      	mov	r0, r6
 8004c7c:	f000 ff9a 	bl	8005bb4 <__malloc_unlock>
 8004c80:	f104 000b 	add.w	r0, r4, #11
 8004c84:	1d23      	adds	r3, r4, #4
 8004c86:	f020 0007 	bic.w	r0, r0, #7
 8004c8a:	1ac2      	subs	r2, r0, r3
 8004c8c:	d0cc      	beq.n	8004c28 <_malloc_r+0x20>
 8004c8e:	1a1b      	subs	r3, r3, r0
 8004c90:	50a3      	str	r3, [r4, r2]
 8004c92:	e7c9      	b.n	8004c28 <_malloc_r+0x20>
 8004c94:	4622      	mov	r2, r4
 8004c96:	6864      	ldr	r4, [r4, #4]
 8004c98:	e7cc      	b.n	8004c34 <_malloc_r+0x2c>
 8004c9a:	1cc4      	adds	r4, r0, #3
 8004c9c:	f024 0403 	bic.w	r4, r4, #3
 8004ca0:	42a0      	cmp	r0, r4
 8004ca2:	d0e3      	beq.n	8004c6c <_malloc_r+0x64>
 8004ca4:	1a21      	subs	r1, r4, r0
 8004ca6:	4630      	mov	r0, r6
 8004ca8:	f000 fc52 	bl	8005550 <_sbrk_r>
 8004cac:	3001      	adds	r0, #1
 8004cae:	d1dd      	bne.n	8004c6c <_malloc_r+0x64>
 8004cb0:	e7cf      	b.n	8004c52 <_malloc_r+0x4a>
 8004cb2:	bf00      	nop
 8004cb4:	20000140 	.word	0x20000140
 8004cb8:	20000144 	.word	0x20000144

08004cbc <__ssputs_r>:
 8004cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cc0:	688e      	ldr	r6, [r1, #8]
 8004cc2:	4682      	mov	sl, r0
 8004cc4:	429e      	cmp	r6, r3
 8004cc6:	460c      	mov	r4, r1
 8004cc8:	4690      	mov	r8, r2
 8004cca:	461f      	mov	r7, r3
 8004ccc:	d838      	bhi.n	8004d40 <__ssputs_r+0x84>
 8004cce:	898a      	ldrh	r2, [r1, #12]
 8004cd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004cd4:	d032      	beq.n	8004d3c <__ssputs_r+0x80>
 8004cd6:	6825      	ldr	r5, [r4, #0]
 8004cd8:	6909      	ldr	r1, [r1, #16]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	eba5 0901 	sub.w	r9, r5, r1
 8004ce0:	6965      	ldr	r5, [r4, #20]
 8004ce2:	444b      	add	r3, r9
 8004ce4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ce8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004cec:	106d      	asrs	r5, r5, #1
 8004cee:	429d      	cmp	r5, r3
 8004cf0:	bf38      	it	cc
 8004cf2:	461d      	movcc	r5, r3
 8004cf4:	0553      	lsls	r3, r2, #21
 8004cf6:	d531      	bpl.n	8004d5c <__ssputs_r+0xa0>
 8004cf8:	4629      	mov	r1, r5
 8004cfa:	f7ff ff85 	bl	8004c08 <_malloc_r>
 8004cfe:	4606      	mov	r6, r0
 8004d00:	b950      	cbnz	r0, 8004d18 <__ssputs_r+0x5c>
 8004d02:	230c      	movs	r3, #12
 8004d04:	f04f 30ff 	mov.w	r0, #4294967295
 8004d08:	f8ca 3000 	str.w	r3, [sl]
 8004d0c:	89a3      	ldrh	r3, [r4, #12]
 8004d0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d12:	81a3      	strh	r3, [r4, #12]
 8004d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d18:	464a      	mov	r2, r9
 8004d1a:	6921      	ldr	r1, [r4, #16]
 8004d1c:	f000 ff1c 	bl	8005b58 <memcpy>
 8004d20:	89a3      	ldrh	r3, [r4, #12]
 8004d22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d2a:	81a3      	strh	r3, [r4, #12]
 8004d2c:	6126      	str	r6, [r4, #16]
 8004d2e:	444e      	add	r6, r9
 8004d30:	6026      	str	r6, [r4, #0]
 8004d32:	463e      	mov	r6, r7
 8004d34:	6165      	str	r5, [r4, #20]
 8004d36:	eba5 0509 	sub.w	r5, r5, r9
 8004d3a:	60a5      	str	r5, [r4, #8]
 8004d3c:	42be      	cmp	r6, r7
 8004d3e:	d900      	bls.n	8004d42 <__ssputs_r+0x86>
 8004d40:	463e      	mov	r6, r7
 8004d42:	4632      	mov	r2, r6
 8004d44:	4641      	mov	r1, r8
 8004d46:	6820      	ldr	r0, [r4, #0]
 8004d48:	f000 ff14 	bl	8005b74 <memmove>
 8004d4c:	68a3      	ldr	r3, [r4, #8]
 8004d4e:	6822      	ldr	r2, [r4, #0]
 8004d50:	1b9b      	subs	r3, r3, r6
 8004d52:	4432      	add	r2, r6
 8004d54:	2000      	movs	r0, #0
 8004d56:	60a3      	str	r3, [r4, #8]
 8004d58:	6022      	str	r2, [r4, #0]
 8004d5a:	e7db      	b.n	8004d14 <__ssputs_r+0x58>
 8004d5c:	462a      	mov	r2, r5
 8004d5e:	f000 ff2f 	bl	8005bc0 <_realloc_r>
 8004d62:	4606      	mov	r6, r0
 8004d64:	2800      	cmp	r0, #0
 8004d66:	d1e1      	bne.n	8004d2c <__ssputs_r+0x70>
 8004d68:	4650      	mov	r0, sl
 8004d6a:	6921      	ldr	r1, [r4, #16]
 8004d6c:	f7ff ff00 	bl	8004b70 <_free_r>
 8004d70:	e7c7      	b.n	8004d02 <__ssputs_r+0x46>
	...

08004d74 <_svfiprintf_r>:
 8004d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d78:	4698      	mov	r8, r3
 8004d7a:	898b      	ldrh	r3, [r1, #12]
 8004d7c:	4607      	mov	r7, r0
 8004d7e:	061b      	lsls	r3, r3, #24
 8004d80:	460d      	mov	r5, r1
 8004d82:	4614      	mov	r4, r2
 8004d84:	b09d      	sub	sp, #116	; 0x74
 8004d86:	d50e      	bpl.n	8004da6 <_svfiprintf_r+0x32>
 8004d88:	690b      	ldr	r3, [r1, #16]
 8004d8a:	b963      	cbnz	r3, 8004da6 <_svfiprintf_r+0x32>
 8004d8c:	2140      	movs	r1, #64	; 0x40
 8004d8e:	f7ff ff3b 	bl	8004c08 <_malloc_r>
 8004d92:	6028      	str	r0, [r5, #0]
 8004d94:	6128      	str	r0, [r5, #16]
 8004d96:	b920      	cbnz	r0, 8004da2 <_svfiprintf_r+0x2e>
 8004d98:	230c      	movs	r3, #12
 8004d9a:	603b      	str	r3, [r7, #0]
 8004d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004da0:	e0d1      	b.n	8004f46 <_svfiprintf_r+0x1d2>
 8004da2:	2340      	movs	r3, #64	; 0x40
 8004da4:	616b      	str	r3, [r5, #20]
 8004da6:	2300      	movs	r3, #0
 8004da8:	9309      	str	r3, [sp, #36]	; 0x24
 8004daa:	2320      	movs	r3, #32
 8004dac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004db0:	2330      	movs	r3, #48	; 0x30
 8004db2:	f04f 0901 	mov.w	r9, #1
 8004db6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004f60 <_svfiprintf_r+0x1ec>
 8004dbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004dc2:	4623      	mov	r3, r4
 8004dc4:	469a      	mov	sl, r3
 8004dc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dca:	b10a      	cbz	r2, 8004dd0 <_svfiprintf_r+0x5c>
 8004dcc:	2a25      	cmp	r2, #37	; 0x25
 8004dce:	d1f9      	bne.n	8004dc4 <_svfiprintf_r+0x50>
 8004dd0:	ebba 0b04 	subs.w	fp, sl, r4
 8004dd4:	d00b      	beq.n	8004dee <_svfiprintf_r+0x7a>
 8004dd6:	465b      	mov	r3, fp
 8004dd8:	4622      	mov	r2, r4
 8004dda:	4629      	mov	r1, r5
 8004ddc:	4638      	mov	r0, r7
 8004dde:	f7ff ff6d 	bl	8004cbc <__ssputs_r>
 8004de2:	3001      	adds	r0, #1
 8004de4:	f000 80aa 	beq.w	8004f3c <_svfiprintf_r+0x1c8>
 8004de8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004dea:	445a      	add	r2, fp
 8004dec:	9209      	str	r2, [sp, #36]	; 0x24
 8004dee:	f89a 3000 	ldrb.w	r3, [sl]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f000 80a2 	beq.w	8004f3c <_svfiprintf_r+0x1c8>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8004dfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e02:	f10a 0a01 	add.w	sl, sl, #1
 8004e06:	9304      	str	r3, [sp, #16]
 8004e08:	9307      	str	r3, [sp, #28]
 8004e0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e0e:	931a      	str	r3, [sp, #104]	; 0x68
 8004e10:	4654      	mov	r4, sl
 8004e12:	2205      	movs	r2, #5
 8004e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e18:	4851      	ldr	r0, [pc, #324]	; (8004f60 <_svfiprintf_r+0x1ec>)
 8004e1a:	f000 fe8f 	bl	8005b3c <memchr>
 8004e1e:	9a04      	ldr	r2, [sp, #16]
 8004e20:	b9d8      	cbnz	r0, 8004e5a <_svfiprintf_r+0xe6>
 8004e22:	06d0      	lsls	r0, r2, #27
 8004e24:	bf44      	itt	mi
 8004e26:	2320      	movmi	r3, #32
 8004e28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e2c:	0711      	lsls	r1, r2, #28
 8004e2e:	bf44      	itt	mi
 8004e30:	232b      	movmi	r3, #43	; 0x2b
 8004e32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e36:	f89a 3000 	ldrb.w	r3, [sl]
 8004e3a:	2b2a      	cmp	r3, #42	; 0x2a
 8004e3c:	d015      	beq.n	8004e6a <_svfiprintf_r+0xf6>
 8004e3e:	4654      	mov	r4, sl
 8004e40:	2000      	movs	r0, #0
 8004e42:	f04f 0c0a 	mov.w	ip, #10
 8004e46:	9a07      	ldr	r2, [sp, #28]
 8004e48:	4621      	mov	r1, r4
 8004e4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e4e:	3b30      	subs	r3, #48	; 0x30
 8004e50:	2b09      	cmp	r3, #9
 8004e52:	d94e      	bls.n	8004ef2 <_svfiprintf_r+0x17e>
 8004e54:	b1b0      	cbz	r0, 8004e84 <_svfiprintf_r+0x110>
 8004e56:	9207      	str	r2, [sp, #28]
 8004e58:	e014      	b.n	8004e84 <_svfiprintf_r+0x110>
 8004e5a:	eba0 0308 	sub.w	r3, r0, r8
 8004e5e:	fa09 f303 	lsl.w	r3, r9, r3
 8004e62:	4313      	orrs	r3, r2
 8004e64:	46a2      	mov	sl, r4
 8004e66:	9304      	str	r3, [sp, #16]
 8004e68:	e7d2      	b.n	8004e10 <_svfiprintf_r+0x9c>
 8004e6a:	9b03      	ldr	r3, [sp, #12]
 8004e6c:	1d19      	adds	r1, r3, #4
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	9103      	str	r1, [sp, #12]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	bfbb      	ittet	lt
 8004e76:	425b      	neglt	r3, r3
 8004e78:	f042 0202 	orrlt.w	r2, r2, #2
 8004e7c:	9307      	strge	r3, [sp, #28]
 8004e7e:	9307      	strlt	r3, [sp, #28]
 8004e80:	bfb8      	it	lt
 8004e82:	9204      	strlt	r2, [sp, #16]
 8004e84:	7823      	ldrb	r3, [r4, #0]
 8004e86:	2b2e      	cmp	r3, #46	; 0x2e
 8004e88:	d10c      	bne.n	8004ea4 <_svfiprintf_r+0x130>
 8004e8a:	7863      	ldrb	r3, [r4, #1]
 8004e8c:	2b2a      	cmp	r3, #42	; 0x2a
 8004e8e:	d135      	bne.n	8004efc <_svfiprintf_r+0x188>
 8004e90:	9b03      	ldr	r3, [sp, #12]
 8004e92:	3402      	adds	r4, #2
 8004e94:	1d1a      	adds	r2, r3, #4
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	9203      	str	r2, [sp, #12]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	bfb8      	it	lt
 8004e9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ea2:	9305      	str	r3, [sp, #20]
 8004ea4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004f70 <_svfiprintf_r+0x1fc>
 8004ea8:	2203      	movs	r2, #3
 8004eaa:	4650      	mov	r0, sl
 8004eac:	7821      	ldrb	r1, [r4, #0]
 8004eae:	f000 fe45 	bl	8005b3c <memchr>
 8004eb2:	b140      	cbz	r0, 8004ec6 <_svfiprintf_r+0x152>
 8004eb4:	2340      	movs	r3, #64	; 0x40
 8004eb6:	eba0 000a 	sub.w	r0, r0, sl
 8004eba:	fa03 f000 	lsl.w	r0, r3, r0
 8004ebe:	9b04      	ldr	r3, [sp, #16]
 8004ec0:	3401      	adds	r4, #1
 8004ec2:	4303      	orrs	r3, r0
 8004ec4:	9304      	str	r3, [sp, #16]
 8004ec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004eca:	2206      	movs	r2, #6
 8004ecc:	4825      	ldr	r0, [pc, #148]	; (8004f64 <_svfiprintf_r+0x1f0>)
 8004ece:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ed2:	f000 fe33 	bl	8005b3c <memchr>
 8004ed6:	2800      	cmp	r0, #0
 8004ed8:	d038      	beq.n	8004f4c <_svfiprintf_r+0x1d8>
 8004eda:	4b23      	ldr	r3, [pc, #140]	; (8004f68 <_svfiprintf_r+0x1f4>)
 8004edc:	bb1b      	cbnz	r3, 8004f26 <_svfiprintf_r+0x1b2>
 8004ede:	9b03      	ldr	r3, [sp, #12]
 8004ee0:	3307      	adds	r3, #7
 8004ee2:	f023 0307 	bic.w	r3, r3, #7
 8004ee6:	3308      	adds	r3, #8
 8004ee8:	9303      	str	r3, [sp, #12]
 8004eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eec:	4433      	add	r3, r6
 8004eee:	9309      	str	r3, [sp, #36]	; 0x24
 8004ef0:	e767      	b.n	8004dc2 <_svfiprintf_r+0x4e>
 8004ef2:	460c      	mov	r4, r1
 8004ef4:	2001      	movs	r0, #1
 8004ef6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004efa:	e7a5      	b.n	8004e48 <_svfiprintf_r+0xd4>
 8004efc:	2300      	movs	r3, #0
 8004efe:	f04f 0c0a 	mov.w	ip, #10
 8004f02:	4619      	mov	r1, r3
 8004f04:	3401      	adds	r4, #1
 8004f06:	9305      	str	r3, [sp, #20]
 8004f08:	4620      	mov	r0, r4
 8004f0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f0e:	3a30      	subs	r2, #48	; 0x30
 8004f10:	2a09      	cmp	r2, #9
 8004f12:	d903      	bls.n	8004f1c <_svfiprintf_r+0x1a8>
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0c5      	beq.n	8004ea4 <_svfiprintf_r+0x130>
 8004f18:	9105      	str	r1, [sp, #20]
 8004f1a:	e7c3      	b.n	8004ea4 <_svfiprintf_r+0x130>
 8004f1c:	4604      	mov	r4, r0
 8004f1e:	2301      	movs	r3, #1
 8004f20:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f24:	e7f0      	b.n	8004f08 <_svfiprintf_r+0x194>
 8004f26:	ab03      	add	r3, sp, #12
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	462a      	mov	r2, r5
 8004f2c:	4638      	mov	r0, r7
 8004f2e:	4b0f      	ldr	r3, [pc, #60]	; (8004f6c <_svfiprintf_r+0x1f8>)
 8004f30:	a904      	add	r1, sp, #16
 8004f32:	f3af 8000 	nop.w
 8004f36:	1c42      	adds	r2, r0, #1
 8004f38:	4606      	mov	r6, r0
 8004f3a:	d1d6      	bne.n	8004eea <_svfiprintf_r+0x176>
 8004f3c:	89ab      	ldrh	r3, [r5, #12]
 8004f3e:	065b      	lsls	r3, r3, #25
 8004f40:	f53f af2c 	bmi.w	8004d9c <_svfiprintf_r+0x28>
 8004f44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f46:	b01d      	add	sp, #116	; 0x74
 8004f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f4c:	ab03      	add	r3, sp, #12
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	462a      	mov	r2, r5
 8004f52:	4638      	mov	r0, r7
 8004f54:	4b05      	ldr	r3, [pc, #20]	; (8004f6c <_svfiprintf_r+0x1f8>)
 8004f56:	a904      	add	r1, sp, #16
 8004f58:	f000 f9d4 	bl	8005304 <_printf_i>
 8004f5c:	e7eb      	b.n	8004f36 <_svfiprintf_r+0x1c2>
 8004f5e:	bf00      	nop
 8004f60:	0800603d 	.word	0x0800603d
 8004f64:	08006047 	.word	0x08006047
 8004f68:	00000000 	.word	0x00000000
 8004f6c:	08004cbd 	.word	0x08004cbd
 8004f70:	08006043 	.word	0x08006043

08004f74 <__sfputc_r>:
 8004f74:	6893      	ldr	r3, [r2, #8]
 8004f76:	b410      	push	{r4}
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	6093      	str	r3, [r2, #8]
 8004f7e:	da07      	bge.n	8004f90 <__sfputc_r+0x1c>
 8004f80:	6994      	ldr	r4, [r2, #24]
 8004f82:	42a3      	cmp	r3, r4
 8004f84:	db01      	blt.n	8004f8a <__sfputc_r+0x16>
 8004f86:	290a      	cmp	r1, #10
 8004f88:	d102      	bne.n	8004f90 <__sfputc_r+0x1c>
 8004f8a:	bc10      	pop	{r4}
 8004f8c:	f000 baf0 	b.w	8005570 <__swbuf_r>
 8004f90:	6813      	ldr	r3, [r2, #0]
 8004f92:	1c58      	adds	r0, r3, #1
 8004f94:	6010      	str	r0, [r2, #0]
 8004f96:	7019      	strb	r1, [r3, #0]
 8004f98:	4608      	mov	r0, r1
 8004f9a:	bc10      	pop	{r4}
 8004f9c:	4770      	bx	lr

08004f9e <__sfputs_r>:
 8004f9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa0:	4606      	mov	r6, r0
 8004fa2:	460f      	mov	r7, r1
 8004fa4:	4614      	mov	r4, r2
 8004fa6:	18d5      	adds	r5, r2, r3
 8004fa8:	42ac      	cmp	r4, r5
 8004faa:	d101      	bne.n	8004fb0 <__sfputs_r+0x12>
 8004fac:	2000      	movs	r0, #0
 8004fae:	e007      	b.n	8004fc0 <__sfputs_r+0x22>
 8004fb0:	463a      	mov	r2, r7
 8004fb2:	4630      	mov	r0, r6
 8004fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fb8:	f7ff ffdc 	bl	8004f74 <__sfputc_r>
 8004fbc:	1c43      	adds	r3, r0, #1
 8004fbe:	d1f3      	bne.n	8004fa8 <__sfputs_r+0xa>
 8004fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004fc4 <_vfiprintf_r>:
 8004fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fc8:	460d      	mov	r5, r1
 8004fca:	4614      	mov	r4, r2
 8004fcc:	4698      	mov	r8, r3
 8004fce:	4606      	mov	r6, r0
 8004fd0:	b09d      	sub	sp, #116	; 0x74
 8004fd2:	b118      	cbz	r0, 8004fdc <_vfiprintf_r+0x18>
 8004fd4:	6983      	ldr	r3, [r0, #24]
 8004fd6:	b90b      	cbnz	r3, 8004fdc <_vfiprintf_r+0x18>
 8004fd8:	f000 fcac 	bl	8005934 <__sinit>
 8004fdc:	4b89      	ldr	r3, [pc, #548]	; (8005204 <_vfiprintf_r+0x240>)
 8004fde:	429d      	cmp	r5, r3
 8004fe0:	d11b      	bne.n	800501a <_vfiprintf_r+0x56>
 8004fe2:	6875      	ldr	r5, [r6, #4]
 8004fe4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fe6:	07d9      	lsls	r1, r3, #31
 8004fe8:	d405      	bmi.n	8004ff6 <_vfiprintf_r+0x32>
 8004fea:	89ab      	ldrh	r3, [r5, #12]
 8004fec:	059a      	lsls	r2, r3, #22
 8004fee:	d402      	bmi.n	8004ff6 <_vfiprintf_r+0x32>
 8004ff0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ff2:	f000 fd3d 	bl	8005a70 <__retarget_lock_acquire_recursive>
 8004ff6:	89ab      	ldrh	r3, [r5, #12]
 8004ff8:	071b      	lsls	r3, r3, #28
 8004ffa:	d501      	bpl.n	8005000 <_vfiprintf_r+0x3c>
 8004ffc:	692b      	ldr	r3, [r5, #16]
 8004ffe:	b9eb      	cbnz	r3, 800503c <_vfiprintf_r+0x78>
 8005000:	4629      	mov	r1, r5
 8005002:	4630      	mov	r0, r6
 8005004:	f000 fb06 	bl	8005614 <__swsetup_r>
 8005008:	b1c0      	cbz	r0, 800503c <_vfiprintf_r+0x78>
 800500a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800500c:	07dc      	lsls	r4, r3, #31
 800500e:	d50e      	bpl.n	800502e <_vfiprintf_r+0x6a>
 8005010:	f04f 30ff 	mov.w	r0, #4294967295
 8005014:	b01d      	add	sp, #116	; 0x74
 8005016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800501a:	4b7b      	ldr	r3, [pc, #492]	; (8005208 <_vfiprintf_r+0x244>)
 800501c:	429d      	cmp	r5, r3
 800501e:	d101      	bne.n	8005024 <_vfiprintf_r+0x60>
 8005020:	68b5      	ldr	r5, [r6, #8]
 8005022:	e7df      	b.n	8004fe4 <_vfiprintf_r+0x20>
 8005024:	4b79      	ldr	r3, [pc, #484]	; (800520c <_vfiprintf_r+0x248>)
 8005026:	429d      	cmp	r5, r3
 8005028:	bf08      	it	eq
 800502a:	68f5      	ldreq	r5, [r6, #12]
 800502c:	e7da      	b.n	8004fe4 <_vfiprintf_r+0x20>
 800502e:	89ab      	ldrh	r3, [r5, #12]
 8005030:	0598      	lsls	r0, r3, #22
 8005032:	d4ed      	bmi.n	8005010 <_vfiprintf_r+0x4c>
 8005034:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005036:	f000 fd1c 	bl	8005a72 <__retarget_lock_release_recursive>
 800503a:	e7e9      	b.n	8005010 <_vfiprintf_r+0x4c>
 800503c:	2300      	movs	r3, #0
 800503e:	9309      	str	r3, [sp, #36]	; 0x24
 8005040:	2320      	movs	r3, #32
 8005042:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005046:	2330      	movs	r3, #48	; 0x30
 8005048:	f04f 0901 	mov.w	r9, #1
 800504c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005050:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005210 <_vfiprintf_r+0x24c>
 8005054:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005058:	4623      	mov	r3, r4
 800505a:	469a      	mov	sl, r3
 800505c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005060:	b10a      	cbz	r2, 8005066 <_vfiprintf_r+0xa2>
 8005062:	2a25      	cmp	r2, #37	; 0x25
 8005064:	d1f9      	bne.n	800505a <_vfiprintf_r+0x96>
 8005066:	ebba 0b04 	subs.w	fp, sl, r4
 800506a:	d00b      	beq.n	8005084 <_vfiprintf_r+0xc0>
 800506c:	465b      	mov	r3, fp
 800506e:	4622      	mov	r2, r4
 8005070:	4629      	mov	r1, r5
 8005072:	4630      	mov	r0, r6
 8005074:	f7ff ff93 	bl	8004f9e <__sfputs_r>
 8005078:	3001      	adds	r0, #1
 800507a:	f000 80aa 	beq.w	80051d2 <_vfiprintf_r+0x20e>
 800507e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005080:	445a      	add	r2, fp
 8005082:	9209      	str	r2, [sp, #36]	; 0x24
 8005084:	f89a 3000 	ldrb.w	r3, [sl]
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 80a2 	beq.w	80051d2 <_vfiprintf_r+0x20e>
 800508e:	2300      	movs	r3, #0
 8005090:	f04f 32ff 	mov.w	r2, #4294967295
 8005094:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005098:	f10a 0a01 	add.w	sl, sl, #1
 800509c:	9304      	str	r3, [sp, #16]
 800509e:	9307      	str	r3, [sp, #28]
 80050a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050a4:	931a      	str	r3, [sp, #104]	; 0x68
 80050a6:	4654      	mov	r4, sl
 80050a8:	2205      	movs	r2, #5
 80050aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050ae:	4858      	ldr	r0, [pc, #352]	; (8005210 <_vfiprintf_r+0x24c>)
 80050b0:	f000 fd44 	bl	8005b3c <memchr>
 80050b4:	9a04      	ldr	r2, [sp, #16]
 80050b6:	b9d8      	cbnz	r0, 80050f0 <_vfiprintf_r+0x12c>
 80050b8:	06d1      	lsls	r1, r2, #27
 80050ba:	bf44      	itt	mi
 80050bc:	2320      	movmi	r3, #32
 80050be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050c2:	0713      	lsls	r3, r2, #28
 80050c4:	bf44      	itt	mi
 80050c6:	232b      	movmi	r3, #43	; 0x2b
 80050c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050cc:	f89a 3000 	ldrb.w	r3, [sl]
 80050d0:	2b2a      	cmp	r3, #42	; 0x2a
 80050d2:	d015      	beq.n	8005100 <_vfiprintf_r+0x13c>
 80050d4:	4654      	mov	r4, sl
 80050d6:	2000      	movs	r0, #0
 80050d8:	f04f 0c0a 	mov.w	ip, #10
 80050dc:	9a07      	ldr	r2, [sp, #28]
 80050de:	4621      	mov	r1, r4
 80050e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050e4:	3b30      	subs	r3, #48	; 0x30
 80050e6:	2b09      	cmp	r3, #9
 80050e8:	d94e      	bls.n	8005188 <_vfiprintf_r+0x1c4>
 80050ea:	b1b0      	cbz	r0, 800511a <_vfiprintf_r+0x156>
 80050ec:	9207      	str	r2, [sp, #28]
 80050ee:	e014      	b.n	800511a <_vfiprintf_r+0x156>
 80050f0:	eba0 0308 	sub.w	r3, r0, r8
 80050f4:	fa09 f303 	lsl.w	r3, r9, r3
 80050f8:	4313      	orrs	r3, r2
 80050fa:	46a2      	mov	sl, r4
 80050fc:	9304      	str	r3, [sp, #16]
 80050fe:	e7d2      	b.n	80050a6 <_vfiprintf_r+0xe2>
 8005100:	9b03      	ldr	r3, [sp, #12]
 8005102:	1d19      	adds	r1, r3, #4
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	9103      	str	r1, [sp, #12]
 8005108:	2b00      	cmp	r3, #0
 800510a:	bfbb      	ittet	lt
 800510c:	425b      	neglt	r3, r3
 800510e:	f042 0202 	orrlt.w	r2, r2, #2
 8005112:	9307      	strge	r3, [sp, #28]
 8005114:	9307      	strlt	r3, [sp, #28]
 8005116:	bfb8      	it	lt
 8005118:	9204      	strlt	r2, [sp, #16]
 800511a:	7823      	ldrb	r3, [r4, #0]
 800511c:	2b2e      	cmp	r3, #46	; 0x2e
 800511e:	d10c      	bne.n	800513a <_vfiprintf_r+0x176>
 8005120:	7863      	ldrb	r3, [r4, #1]
 8005122:	2b2a      	cmp	r3, #42	; 0x2a
 8005124:	d135      	bne.n	8005192 <_vfiprintf_r+0x1ce>
 8005126:	9b03      	ldr	r3, [sp, #12]
 8005128:	3402      	adds	r4, #2
 800512a:	1d1a      	adds	r2, r3, #4
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	9203      	str	r2, [sp, #12]
 8005130:	2b00      	cmp	r3, #0
 8005132:	bfb8      	it	lt
 8005134:	f04f 33ff 	movlt.w	r3, #4294967295
 8005138:	9305      	str	r3, [sp, #20]
 800513a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005220 <_vfiprintf_r+0x25c>
 800513e:	2203      	movs	r2, #3
 8005140:	4650      	mov	r0, sl
 8005142:	7821      	ldrb	r1, [r4, #0]
 8005144:	f000 fcfa 	bl	8005b3c <memchr>
 8005148:	b140      	cbz	r0, 800515c <_vfiprintf_r+0x198>
 800514a:	2340      	movs	r3, #64	; 0x40
 800514c:	eba0 000a 	sub.w	r0, r0, sl
 8005150:	fa03 f000 	lsl.w	r0, r3, r0
 8005154:	9b04      	ldr	r3, [sp, #16]
 8005156:	3401      	adds	r4, #1
 8005158:	4303      	orrs	r3, r0
 800515a:	9304      	str	r3, [sp, #16]
 800515c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005160:	2206      	movs	r2, #6
 8005162:	482c      	ldr	r0, [pc, #176]	; (8005214 <_vfiprintf_r+0x250>)
 8005164:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005168:	f000 fce8 	bl	8005b3c <memchr>
 800516c:	2800      	cmp	r0, #0
 800516e:	d03f      	beq.n	80051f0 <_vfiprintf_r+0x22c>
 8005170:	4b29      	ldr	r3, [pc, #164]	; (8005218 <_vfiprintf_r+0x254>)
 8005172:	bb1b      	cbnz	r3, 80051bc <_vfiprintf_r+0x1f8>
 8005174:	9b03      	ldr	r3, [sp, #12]
 8005176:	3307      	adds	r3, #7
 8005178:	f023 0307 	bic.w	r3, r3, #7
 800517c:	3308      	adds	r3, #8
 800517e:	9303      	str	r3, [sp, #12]
 8005180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005182:	443b      	add	r3, r7
 8005184:	9309      	str	r3, [sp, #36]	; 0x24
 8005186:	e767      	b.n	8005058 <_vfiprintf_r+0x94>
 8005188:	460c      	mov	r4, r1
 800518a:	2001      	movs	r0, #1
 800518c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005190:	e7a5      	b.n	80050de <_vfiprintf_r+0x11a>
 8005192:	2300      	movs	r3, #0
 8005194:	f04f 0c0a 	mov.w	ip, #10
 8005198:	4619      	mov	r1, r3
 800519a:	3401      	adds	r4, #1
 800519c:	9305      	str	r3, [sp, #20]
 800519e:	4620      	mov	r0, r4
 80051a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051a4:	3a30      	subs	r2, #48	; 0x30
 80051a6:	2a09      	cmp	r2, #9
 80051a8:	d903      	bls.n	80051b2 <_vfiprintf_r+0x1ee>
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d0c5      	beq.n	800513a <_vfiprintf_r+0x176>
 80051ae:	9105      	str	r1, [sp, #20]
 80051b0:	e7c3      	b.n	800513a <_vfiprintf_r+0x176>
 80051b2:	4604      	mov	r4, r0
 80051b4:	2301      	movs	r3, #1
 80051b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80051ba:	e7f0      	b.n	800519e <_vfiprintf_r+0x1da>
 80051bc:	ab03      	add	r3, sp, #12
 80051be:	9300      	str	r3, [sp, #0]
 80051c0:	462a      	mov	r2, r5
 80051c2:	4630      	mov	r0, r6
 80051c4:	4b15      	ldr	r3, [pc, #84]	; (800521c <_vfiprintf_r+0x258>)
 80051c6:	a904      	add	r1, sp, #16
 80051c8:	f3af 8000 	nop.w
 80051cc:	4607      	mov	r7, r0
 80051ce:	1c78      	adds	r0, r7, #1
 80051d0:	d1d6      	bne.n	8005180 <_vfiprintf_r+0x1bc>
 80051d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051d4:	07d9      	lsls	r1, r3, #31
 80051d6:	d405      	bmi.n	80051e4 <_vfiprintf_r+0x220>
 80051d8:	89ab      	ldrh	r3, [r5, #12]
 80051da:	059a      	lsls	r2, r3, #22
 80051dc:	d402      	bmi.n	80051e4 <_vfiprintf_r+0x220>
 80051de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051e0:	f000 fc47 	bl	8005a72 <__retarget_lock_release_recursive>
 80051e4:	89ab      	ldrh	r3, [r5, #12]
 80051e6:	065b      	lsls	r3, r3, #25
 80051e8:	f53f af12 	bmi.w	8005010 <_vfiprintf_r+0x4c>
 80051ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051ee:	e711      	b.n	8005014 <_vfiprintf_r+0x50>
 80051f0:	ab03      	add	r3, sp, #12
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	462a      	mov	r2, r5
 80051f6:	4630      	mov	r0, r6
 80051f8:	4b08      	ldr	r3, [pc, #32]	; (800521c <_vfiprintf_r+0x258>)
 80051fa:	a904      	add	r1, sp, #16
 80051fc:	f000 f882 	bl	8005304 <_printf_i>
 8005200:	e7e4      	b.n	80051cc <_vfiprintf_r+0x208>
 8005202:	bf00      	nop
 8005204:	08006090 	.word	0x08006090
 8005208:	080060b0 	.word	0x080060b0
 800520c:	08006070 	.word	0x08006070
 8005210:	0800603d 	.word	0x0800603d
 8005214:	08006047 	.word	0x08006047
 8005218:	00000000 	.word	0x00000000
 800521c:	08004f9f 	.word	0x08004f9f
 8005220:	08006043 	.word	0x08006043

08005224 <_printf_common>:
 8005224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005228:	4616      	mov	r6, r2
 800522a:	4699      	mov	r9, r3
 800522c:	688a      	ldr	r2, [r1, #8]
 800522e:	690b      	ldr	r3, [r1, #16]
 8005230:	4607      	mov	r7, r0
 8005232:	4293      	cmp	r3, r2
 8005234:	bfb8      	it	lt
 8005236:	4613      	movlt	r3, r2
 8005238:	6033      	str	r3, [r6, #0]
 800523a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800523e:	460c      	mov	r4, r1
 8005240:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005244:	b10a      	cbz	r2, 800524a <_printf_common+0x26>
 8005246:	3301      	adds	r3, #1
 8005248:	6033      	str	r3, [r6, #0]
 800524a:	6823      	ldr	r3, [r4, #0]
 800524c:	0699      	lsls	r1, r3, #26
 800524e:	bf42      	ittt	mi
 8005250:	6833      	ldrmi	r3, [r6, #0]
 8005252:	3302      	addmi	r3, #2
 8005254:	6033      	strmi	r3, [r6, #0]
 8005256:	6825      	ldr	r5, [r4, #0]
 8005258:	f015 0506 	ands.w	r5, r5, #6
 800525c:	d106      	bne.n	800526c <_printf_common+0x48>
 800525e:	f104 0a19 	add.w	sl, r4, #25
 8005262:	68e3      	ldr	r3, [r4, #12]
 8005264:	6832      	ldr	r2, [r6, #0]
 8005266:	1a9b      	subs	r3, r3, r2
 8005268:	42ab      	cmp	r3, r5
 800526a:	dc28      	bgt.n	80052be <_printf_common+0x9a>
 800526c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005270:	1e13      	subs	r3, r2, #0
 8005272:	6822      	ldr	r2, [r4, #0]
 8005274:	bf18      	it	ne
 8005276:	2301      	movne	r3, #1
 8005278:	0692      	lsls	r2, r2, #26
 800527a:	d42d      	bmi.n	80052d8 <_printf_common+0xb4>
 800527c:	4649      	mov	r1, r9
 800527e:	4638      	mov	r0, r7
 8005280:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005284:	47c0      	blx	r8
 8005286:	3001      	adds	r0, #1
 8005288:	d020      	beq.n	80052cc <_printf_common+0xa8>
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	68e5      	ldr	r5, [r4, #12]
 800528e:	f003 0306 	and.w	r3, r3, #6
 8005292:	2b04      	cmp	r3, #4
 8005294:	bf18      	it	ne
 8005296:	2500      	movne	r5, #0
 8005298:	6832      	ldr	r2, [r6, #0]
 800529a:	f04f 0600 	mov.w	r6, #0
 800529e:	68a3      	ldr	r3, [r4, #8]
 80052a0:	bf08      	it	eq
 80052a2:	1aad      	subeq	r5, r5, r2
 80052a4:	6922      	ldr	r2, [r4, #16]
 80052a6:	bf08      	it	eq
 80052a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052ac:	4293      	cmp	r3, r2
 80052ae:	bfc4      	itt	gt
 80052b0:	1a9b      	subgt	r3, r3, r2
 80052b2:	18ed      	addgt	r5, r5, r3
 80052b4:	341a      	adds	r4, #26
 80052b6:	42b5      	cmp	r5, r6
 80052b8:	d11a      	bne.n	80052f0 <_printf_common+0xcc>
 80052ba:	2000      	movs	r0, #0
 80052bc:	e008      	b.n	80052d0 <_printf_common+0xac>
 80052be:	2301      	movs	r3, #1
 80052c0:	4652      	mov	r2, sl
 80052c2:	4649      	mov	r1, r9
 80052c4:	4638      	mov	r0, r7
 80052c6:	47c0      	blx	r8
 80052c8:	3001      	adds	r0, #1
 80052ca:	d103      	bne.n	80052d4 <_printf_common+0xb0>
 80052cc:	f04f 30ff 	mov.w	r0, #4294967295
 80052d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052d4:	3501      	adds	r5, #1
 80052d6:	e7c4      	b.n	8005262 <_printf_common+0x3e>
 80052d8:	2030      	movs	r0, #48	; 0x30
 80052da:	18e1      	adds	r1, r4, r3
 80052dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052e0:	1c5a      	adds	r2, r3, #1
 80052e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052e6:	4422      	add	r2, r4
 80052e8:	3302      	adds	r3, #2
 80052ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052ee:	e7c5      	b.n	800527c <_printf_common+0x58>
 80052f0:	2301      	movs	r3, #1
 80052f2:	4622      	mov	r2, r4
 80052f4:	4649      	mov	r1, r9
 80052f6:	4638      	mov	r0, r7
 80052f8:	47c0      	blx	r8
 80052fa:	3001      	adds	r0, #1
 80052fc:	d0e6      	beq.n	80052cc <_printf_common+0xa8>
 80052fe:	3601      	adds	r6, #1
 8005300:	e7d9      	b.n	80052b6 <_printf_common+0x92>
	...

08005304 <_printf_i>:
 8005304:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005308:	460c      	mov	r4, r1
 800530a:	7e27      	ldrb	r7, [r4, #24]
 800530c:	4691      	mov	r9, r2
 800530e:	2f78      	cmp	r7, #120	; 0x78
 8005310:	4680      	mov	r8, r0
 8005312:	469a      	mov	sl, r3
 8005314:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005316:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800531a:	d807      	bhi.n	800532c <_printf_i+0x28>
 800531c:	2f62      	cmp	r7, #98	; 0x62
 800531e:	d80a      	bhi.n	8005336 <_printf_i+0x32>
 8005320:	2f00      	cmp	r7, #0
 8005322:	f000 80d9 	beq.w	80054d8 <_printf_i+0x1d4>
 8005326:	2f58      	cmp	r7, #88	; 0x58
 8005328:	f000 80a4 	beq.w	8005474 <_printf_i+0x170>
 800532c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005330:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005334:	e03a      	b.n	80053ac <_printf_i+0xa8>
 8005336:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800533a:	2b15      	cmp	r3, #21
 800533c:	d8f6      	bhi.n	800532c <_printf_i+0x28>
 800533e:	a001      	add	r0, pc, #4	; (adr r0, 8005344 <_printf_i+0x40>)
 8005340:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005344:	0800539d 	.word	0x0800539d
 8005348:	080053b1 	.word	0x080053b1
 800534c:	0800532d 	.word	0x0800532d
 8005350:	0800532d 	.word	0x0800532d
 8005354:	0800532d 	.word	0x0800532d
 8005358:	0800532d 	.word	0x0800532d
 800535c:	080053b1 	.word	0x080053b1
 8005360:	0800532d 	.word	0x0800532d
 8005364:	0800532d 	.word	0x0800532d
 8005368:	0800532d 	.word	0x0800532d
 800536c:	0800532d 	.word	0x0800532d
 8005370:	080054bf 	.word	0x080054bf
 8005374:	080053e1 	.word	0x080053e1
 8005378:	080054a1 	.word	0x080054a1
 800537c:	0800532d 	.word	0x0800532d
 8005380:	0800532d 	.word	0x0800532d
 8005384:	080054e1 	.word	0x080054e1
 8005388:	0800532d 	.word	0x0800532d
 800538c:	080053e1 	.word	0x080053e1
 8005390:	0800532d 	.word	0x0800532d
 8005394:	0800532d 	.word	0x0800532d
 8005398:	080054a9 	.word	0x080054a9
 800539c:	680b      	ldr	r3, [r1, #0]
 800539e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80053a2:	1d1a      	adds	r2, r3, #4
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	600a      	str	r2, [r1, #0]
 80053a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053ac:	2301      	movs	r3, #1
 80053ae:	e0a4      	b.n	80054fa <_printf_i+0x1f6>
 80053b0:	6825      	ldr	r5, [r4, #0]
 80053b2:	6808      	ldr	r0, [r1, #0]
 80053b4:	062e      	lsls	r6, r5, #24
 80053b6:	f100 0304 	add.w	r3, r0, #4
 80053ba:	d50a      	bpl.n	80053d2 <_printf_i+0xce>
 80053bc:	6805      	ldr	r5, [r0, #0]
 80053be:	600b      	str	r3, [r1, #0]
 80053c0:	2d00      	cmp	r5, #0
 80053c2:	da03      	bge.n	80053cc <_printf_i+0xc8>
 80053c4:	232d      	movs	r3, #45	; 0x2d
 80053c6:	426d      	negs	r5, r5
 80053c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053cc:	230a      	movs	r3, #10
 80053ce:	485e      	ldr	r0, [pc, #376]	; (8005548 <_printf_i+0x244>)
 80053d0:	e019      	b.n	8005406 <_printf_i+0x102>
 80053d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80053d6:	6805      	ldr	r5, [r0, #0]
 80053d8:	600b      	str	r3, [r1, #0]
 80053da:	bf18      	it	ne
 80053dc:	b22d      	sxthne	r5, r5
 80053de:	e7ef      	b.n	80053c0 <_printf_i+0xbc>
 80053e0:	680b      	ldr	r3, [r1, #0]
 80053e2:	6825      	ldr	r5, [r4, #0]
 80053e4:	1d18      	adds	r0, r3, #4
 80053e6:	6008      	str	r0, [r1, #0]
 80053e8:	0628      	lsls	r0, r5, #24
 80053ea:	d501      	bpl.n	80053f0 <_printf_i+0xec>
 80053ec:	681d      	ldr	r5, [r3, #0]
 80053ee:	e002      	b.n	80053f6 <_printf_i+0xf2>
 80053f0:	0669      	lsls	r1, r5, #25
 80053f2:	d5fb      	bpl.n	80053ec <_printf_i+0xe8>
 80053f4:	881d      	ldrh	r5, [r3, #0]
 80053f6:	2f6f      	cmp	r7, #111	; 0x6f
 80053f8:	bf0c      	ite	eq
 80053fa:	2308      	moveq	r3, #8
 80053fc:	230a      	movne	r3, #10
 80053fe:	4852      	ldr	r0, [pc, #328]	; (8005548 <_printf_i+0x244>)
 8005400:	2100      	movs	r1, #0
 8005402:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005406:	6866      	ldr	r6, [r4, #4]
 8005408:	2e00      	cmp	r6, #0
 800540a:	bfa8      	it	ge
 800540c:	6821      	ldrge	r1, [r4, #0]
 800540e:	60a6      	str	r6, [r4, #8]
 8005410:	bfa4      	itt	ge
 8005412:	f021 0104 	bicge.w	r1, r1, #4
 8005416:	6021      	strge	r1, [r4, #0]
 8005418:	b90d      	cbnz	r5, 800541e <_printf_i+0x11a>
 800541a:	2e00      	cmp	r6, #0
 800541c:	d04d      	beq.n	80054ba <_printf_i+0x1b6>
 800541e:	4616      	mov	r6, r2
 8005420:	fbb5 f1f3 	udiv	r1, r5, r3
 8005424:	fb03 5711 	mls	r7, r3, r1, r5
 8005428:	5dc7      	ldrb	r7, [r0, r7]
 800542a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800542e:	462f      	mov	r7, r5
 8005430:	42bb      	cmp	r3, r7
 8005432:	460d      	mov	r5, r1
 8005434:	d9f4      	bls.n	8005420 <_printf_i+0x11c>
 8005436:	2b08      	cmp	r3, #8
 8005438:	d10b      	bne.n	8005452 <_printf_i+0x14e>
 800543a:	6823      	ldr	r3, [r4, #0]
 800543c:	07df      	lsls	r7, r3, #31
 800543e:	d508      	bpl.n	8005452 <_printf_i+0x14e>
 8005440:	6923      	ldr	r3, [r4, #16]
 8005442:	6861      	ldr	r1, [r4, #4]
 8005444:	4299      	cmp	r1, r3
 8005446:	bfde      	ittt	le
 8005448:	2330      	movle	r3, #48	; 0x30
 800544a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800544e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005452:	1b92      	subs	r2, r2, r6
 8005454:	6122      	str	r2, [r4, #16]
 8005456:	464b      	mov	r3, r9
 8005458:	4621      	mov	r1, r4
 800545a:	4640      	mov	r0, r8
 800545c:	f8cd a000 	str.w	sl, [sp]
 8005460:	aa03      	add	r2, sp, #12
 8005462:	f7ff fedf 	bl	8005224 <_printf_common>
 8005466:	3001      	adds	r0, #1
 8005468:	d14c      	bne.n	8005504 <_printf_i+0x200>
 800546a:	f04f 30ff 	mov.w	r0, #4294967295
 800546e:	b004      	add	sp, #16
 8005470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005474:	4834      	ldr	r0, [pc, #208]	; (8005548 <_printf_i+0x244>)
 8005476:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800547a:	680e      	ldr	r6, [r1, #0]
 800547c:	6823      	ldr	r3, [r4, #0]
 800547e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005482:	061f      	lsls	r7, r3, #24
 8005484:	600e      	str	r6, [r1, #0]
 8005486:	d514      	bpl.n	80054b2 <_printf_i+0x1ae>
 8005488:	07d9      	lsls	r1, r3, #31
 800548a:	bf44      	itt	mi
 800548c:	f043 0320 	orrmi.w	r3, r3, #32
 8005490:	6023      	strmi	r3, [r4, #0]
 8005492:	b91d      	cbnz	r5, 800549c <_printf_i+0x198>
 8005494:	6823      	ldr	r3, [r4, #0]
 8005496:	f023 0320 	bic.w	r3, r3, #32
 800549a:	6023      	str	r3, [r4, #0]
 800549c:	2310      	movs	r3, #16
 800549e:	e7af      	b.n	8005400 <_printf_i+0xfc>
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	f043 0320 	orr.w	r3, r3, #32
 80054a6:	6023      	str	r3, [r4, #0]
 80054a8:	2378      	movs	r3, #120	; 0x78
 80054aa:	4828      	ldr	r0, [pc, #160]	; (800554c <_printf_i+0x248>)
 80054ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054b0:	e7e3      	b.n	800547a <_printf_i+0x176>
 80054b2:	065e      	lsls	r6, r3, #25
 80054b4:	bf48      	it	mi
 80054b6:	b2ad      	uxthmi	r5, r5
 80054b8:	e7e6      	b.n	8005488 <_printf_i+0x184>
 80054ba:	4616      	mov	r6, r2
 80054bc:	e7bb      	b.n	8005436 <_printf_i+0x132>
 80054be:	680b      	ldr	r3, [r1, #0]
 80054c0:	6826      	ldr	r6, [r4, #0]
 80054c2:	1d1d      	adds	r5, r3, #4
 80054c4:	6960      	ldr	r0, [r4, #20]
 80054c6:	600d      	str	r5, [r1, #0]
 80054c8:	0635      	lsls	r5, r6, #24
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	d501      	bpl.n	80054d2 <_printf_i+0x1ce>
 80054ce:	6018      	str	r0, [r3, #0]
 80054d0:	e002      	b.n	80054d8 <_printf_i+0x1d4>
 80054d2:	0671      	lsls	r1, r6, #25
 80054d4:	d5fb      	bpl.n	80054ce <_printf_i+0x1ca>
 80054d6:	8018      	strh	r0, [r3, #0]
 80054d8:	2300      	movs	r3, #0
 80054da:	4616      	mov	r6, r2
 80054dc:	6123      	str	r3, [r4, #16]
 80054de:	e7ba      	b.n	8005456 <_printf_i+0x152>
 80054e0:	680b      	ldr	r3, [r1, #0]
 80054e2:	1d1a      	adds	r2, r3, #4
 80054e4:	600a      	str	r2, [r1, #0]
 80054e6:	681e      	ldr	r6, [r3, #0]
 80054e8:	2100      	movs	r1, #0
 80054ea:	4630      	mov	r0, r6
 80054ec:	6862      	ldr	r2, [r4, #4]
 80054ee:	f000 fb25 	bl	8005b3c <memchr>
 80054f2:	b108      	cbz	r0, 80054f8 <_printf_i+0x1f4>
 80054f4:	1b80      	subs	r0, r0, r6
 80054f6:	6060      	str	r0, [r4, #4]
 80054f8:	6863      	ldr	r3, [r4, #4]
 80054fa:	6123      	str	r3, [r4, #16]
 80054fc:	2300      	movs	r3, #0
 80054fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005502:	e7a8      	b.n	8005456 <_printf_i+0x152>
 8005504:	4632      	mov	r2, r6
 8005506:	4649      	mov	r1, r9
 8005508:	4640      	mov	r0, r8
 800550a:	6923      	ldr	r3, [r4, #16]
 800550c:	47d0      	blx	sl
 800550e:	3001      	adds	r0, #1
 8005510:	d0ab      	beq.n	800546a <_printf_i+0x166>
 8005512:	6823      	ldr	r3, [r4, #0]
 8005514:	079b      	lsls	r3, r3, #30
 8005516:	d413      	bmi.n	8005540 <_printf_i+0x23c>
 8005518:	68e0      	ldr	r0, [r4, #12]
 800551a:	9b03      	ldr	r3, [sp, #12]
 800551c:	4298      	cmp	r0, r3
 800551e:	bfb8      	it	lt
 8005520:	4618      	movlt	r0, r3
 8005522:	e7a4      	b.n	800546e <_printf_i+0x16a>
 8005524:	2301      	movs	r3, #1
 8005526:	4632      	mov	r2, r6
 8005528:	4649      	mov	r1, r9
 800552a:	4640      	mov	r0, r8
 800552c:	47d0      	blx	sl
 800552e:	3001      	adds	r0, #1
 8005530:	d09b      	beq.n	800546a <_printf_i+0x166>
 8005532:	3501      	adds	r5, #1
 8005534:	68e3      	ldr	r3, [r4, #12]
 8005536:	9903      	ldr	r1, [sp, #12]
 8005538:	1a5b      	subs	r3, r3, r1
 800553a:	42ab      	cmp	r3, r5
 800553c:	dcf2      	bgt.n	8005524 <_printf_i+0x220>
 800553e:	e7eb      	b.n	8005518 <_printf_i+0x214>
 8005540:	2500      	movs	r5, #0
 8005542:	f104 0619 	add.w	r6, r4, #25
 8005546:	e7f5      	b.n	8005534 <_printf_i+0x230>
 8005548:	0800604e 	.word	0x0800604e
 800554c:	0800605f 	.word	0x0800605f

08005550 <_sbrk_r>:
 8005550:	b538      	push	{r3, r4, r5, lr}
 8005552:	2300      	movs	r3, #0
 8005554:	4d05      	ldr	r5, [pc, #20]	; (800556c <_sbrk_r+0x1c>)
 8005556:	4604      	mov	r4, r0
 8005558:	4608      	mov	r0, r1
 800555a:	602b      	str	r3, [r5, #0]
 800555c:	f7fc f886 	bl	800166c <_sbrk>
 8005560:	1c43      	adds	r3, r0, #1
 8005562:	d102      	bne.n	800556a <_sbrk_r+0x1a>
 8005564:	682b      	ldr	r3, [r5, #0]
 8005566:	b103      	cbz	r3, 800556a <_sbrk_r+0x1a>
 8005568:	6023      	str	r3, [r4, #0]
 800556a:	bd38      	pop	{r3, r4, r5, pc}
 800556c:	20000304 	.word	0x20000304

08005570 <__swbuf_r>:
 8005570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005572:	460e      	mov	r6, r1
 8005574:	4614      	mov	r4, r2
 8005576:	4605      	mov	r5, r0
 8005578:	b118      	cbz	r0, 8005582 <__swbuf_r+0x12>
 800557a:	6983      	ldr	r3, [r0, #24]
 800557c:	b90b      	cbnz	r3, 8005582 <__swbuf_r+0x12>
 800557e:	f000 f9d9 	bl	8005934 <__sinit>
 8005582:	4b21      	ldr	r3, [pc, #132]	; (8005608 <__swbuf_r+0x98>)
 8005584:	429c      	cmp	r4, r3
 8005586:	d12b      	bne.n	80055e0 <__swbuf_r+0x70>
 8005588:	686c      	ldr	r4, [r5, #4]
 800558a:	69a3      	ldr	r3, [r4, #24]
 800558c:	60a3      	str	r3, [r4, #8]
 800558e:	89a3      	ldrh	r3, [r4, #12]
 8005590:	071a      	lsls	r2, r3, #28
 8005592:	d52f      	bpl.n	80055f4 <__swbuf_r+0x84>
 8005594:	6923      	ldr	r3, [r4, #16]
 8005596:	b36b      	cbz	r3, 80055f4 <__swbuf_r+0x84>
 8005598:	6923      	ldr	r3, [r4, #16]
 800559a:	6820      	ldr	r0, [r4, #0]
 800559c:	b2f6      	uxtb	r6, r6
 800559e:	1ac0      	subs	r0, r0, r3
 80055a0:	6963      	ldr	r3, [r4, #20]
 80055a2:	4637      	mov	r7, r6
 80055a4:	4283      	cmp	r3, r0
 80055a6:	dc04      	bgt.n	80055b2 <__swbuf_r+0x42>
 80055a8:	4621      	mov	r1, r4
 80055aa:	4628      	mov	r0, r5
 80055ac:	f000 f92e 	bl	800580c <_fflush_r>
 80055b0:	bb30      	cbnz	r0, 8005600 <__swbuf_r+0x90>
 80055b2:	68a3      	ldr	r3, [r4, #8]
 80055b4:	3001      	adds	r0, #1
 80055b6:	3b01      	subs	r3, #1
 80055b8:	60a3      	str	r3, [r4, #8]
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	1c5a      	adds	r2, r3, #1
 80055be:	6022      	str	r2, [r4, #0]
 80055c0:	701e      	strb	r6, [r3, #0]
 80055c2:	6963      	ldr	r3, [r4, #20]
 80055c4:	4283      	cmp	r3, r0
 80055c6:	d004      	beq.n	80055d2 <__swbuf_r+0x62>
 80055c8:	89a3      	ldrh	r3, [r4, #12]
 80055ca:	07db      	lsls	r3, r3, #31
 80055cc:	d506      	bpl.n	80055dc <__swbuf_r+0x6c>
 80055ce:	2e0a      	cmp	r6, #10
 80055d0:	d104      	bne.n	80055dc <__swbuf_r+0x6c>
 80055d2:	4621      	mov	r1, r4
 80055d4:	4628      	mov	r0, r5
 80055d6:	f000 f919 	bl	800580c <_fflush_r>
 80055da:	b988      	cbnz	r0, 8005600 <__swbuf_r+0x90>
 80055dc:	4638      	mov	r0, r7
 80055de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055e0:	4b0a      	ldr	r3, [pc, #40]	; (800560c <__swbuf_r+0x9c>)
 80055e2:	429c      	cmp	r4, r3
 80055e4:	d101      	bne.n	80055ea <__swbuf_r+0x7a>
 80055e6:	68ac      	ldr	r4, [r5, #8]
 80055e8:	e7cf      	b.n	800558a <__swbuf_r+0x1a>
 80055ea:	4b09      	ldr	r3, [pc, #36]	; (8005610 <__swbuf_r+0xa0>)
 80055ec:	429c      	cmp	r4, r3
 80055ee:	bf08      	it	eq
 80055f0:	68ec      	ldreq	r4, [r5, #12]
 80055f2:	e7ca      	b.n	800558a <__swbuf_r+0x1a>
 80055f4:	4621      	mov	r1, r4
 80055f6:	4628      	mov	r0, r5
 80055f8:	f000 f80c 	bl	8005614 <__swsetup_r>
 80055fc:	2800      	cmp	r0, #0
 80055fe:	d0cb      	beq.n	8005598 <__swbuf_r+0x28>
 8005600:	f04f 37ff 	mov.w	r7, #4294967295
 8005604:	e7ea      	b.n	80055dc <__swbuf_r+0x6c>
 8005606:	bf00      	nop
 8005608:	08006090 	.word	0x08006090
 800560c:	080060b0 	.word	0x080060b0
 8005610:	08006070 	.word	0x08006070

08005614 <__swsetup_r>:
 8005614:	4b32      	ldr	r3, [pc, #200]	; (80056e0 <__swsetup_r+0xcc>)
 8005616:	b570      	push	{r4, r5, r6, lr}
 8005618:	681d      	ldr	r5, [r3, #0]
 800561a:	4606      	mov	r6, r0
 800561c:	460c      	mov	r4, r1
 800561e:	b125      	cbz	r5, 800562a <__swsetup_r+0x16>
 8005620:	69ab      	ldr	r3, [r5, #24]
 8005622:	b913      	cbnz	r3, 800562a <__swsetup_r+0x16>
 8005624:	4628      	mov	r0, r5
 8005626:	f000 f985 	bl	8005934 <__sinit>
 800562a:	4b2e      	ldr	r3, [pc, #184]	; (80056e4 <__swsetup_r+0xd0>)
 800562c:	429c      	cmp	r4, r3
 800562e:	d10f      	bne.n	8005650 <__swsetup_r+0x3c>
 8005630:	686c      	ldr	r4, [r5, #4]
 8005632:	89a3      	ldrh	r3, [r4, #12]
 8005634:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005638:	0719      	lsls	r1, r3, #28
 800563a:	d42c      	bmi.n	8005696 <__swsetup_r+0x82>
 800563c:	06dd      	lsls	r5, r3, #27
 800563e:	d411      	bmi.n	8005664 <__swsetup_r+0x50>
 8005640:	2309      	movs	r3, #9
 8005642:	6033      	str	r3, [r6, #0]
 8005644:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005648:	f04f 30ff 	mov.w	r0, #4294967295
 800564c:	81a3      	strh	r3, [r4, #12]
 800564e:	e03e      	b.n	80056ce <__swsetup_r+0xba>
 8005650:	4b25      	ldr	r3, [pc, #148]	; (80056e8 <__swsetup_r+0xd4>)
 8005652:	429c      	cmp	r4, r3
 8005654:	d101      	bne.n	800565a <__swsetup_r+0x46>
 8005656:	68ac      	ldr	r4, [r5, #8]
 8005658:	e7eb      	b.n	8005632 <__swsetup_r+0x1e>
 800565a:	4b24      	ldr	r3, [pc, #144]	; (80056ec <__swsetup_r+0xd8>)
 800565c:	429c      	cmp	r4, r3
 800565e:	bf08      	it	eq
 8005660:	68ec      	ldreq	r4, [r5, #12]
 8005662:	e7e6      	b.n	8005632 <__swsetup_r+0x1e>
 8005664:	0758      	lsls	r0, r3, #29
 8005666:	d512      	bpl.n	800568e <__swsetup_r+0x7a>
 8005668:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800566a:	b141      	cbz	r1, 800567e <__swsetup_r+0x6a>
 800566c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005670:	4299      	cmp	r1, r3
 8005672:	d002      	beq.n	800567a <__swsetup_r+0x66>
 8005674:	4630      	mov	r0, r6
 8005676:	f7ff fa7b 	bl	8004b70 <_free_r>
 800567a:	2300      	movs	r3, #0
 800567c:	6363      	str	r3, [r4, #52]	; 0x34
 800567e:	89a3      	ldrh	r3, [r4, #12]
 8005680:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005684:	81a3      	strh	r3, [r4, #12]
 8005686:	2300      	movs	r3, #0
 8005688:	6063      	str	r3, [r4, #4]
 800568a:	6923      	ldr	r3, [r4, #16]
 800568c:	6023      	str	r3, [r4, #0]
 800568e:	89a3      	ldrh	r3, [r4, #12]
 8005690:	f043 0308 	orr.w	r3, r3, #8
 8005694:	81a3      	strh	r3, [r4, #12]
 8005696:	6923      	ldr	r3, [r4, #16]
 8005698:	b94b      	cbnz	r3, 80056ae <__swsetup_r+0x9a>
 800569a:	89a3      	ldrh	r3, [r4, #12]
 800569c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80056a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056a4:	d003      	beq.n	80056ae <__swsetup_r+0x9a>
 80056a6:	4621      	mov	r1, r4
 80056a8:	4630      	mov	r0, r6
 80056aa:	f000 fa07 	bl	8005abc <__smakebuf_r>
 80056ae:	89a0      	ldrh	r0, [r4, #12]
 80056b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056b4:	f010 0301 	ands.w	r3, r0, #1
 80056b8:	d00a      	beq.n	80056d0 <__swsetup_r+0xbc>
 80056ba:	2300      	movs	r3, #0
 80056bc:	60a3      	str	r3, [r4, #8]
 80056be:	6963      	ldr	r3, [r4, #20]
 80056c0:	425b      	negs	r3, r3
 80056c2:	61a3      	str	r3, [r4, #24]
 80056c4:	6923      	ldr	r3, [r4, #16]
 80056c6:	b943      	cbnz	r3, 80056da <__swsetup_r+0xc6>
 80056c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80056cc:	d1ba      	bne.n	8005644 <__swsetup_r+0x30>
 80056ce:	bd70      	pop	{r4, r5, r6, pc}
 80056d0:	0781      	lsls	r1, r0, #30
 80056d2:	bf58      	it	pl
 80056d4:	6963      	ldrpl	r3, [r4, #20]
 80056d6:	60a3      	str	r3, [r4, #8]
 80056d8:	e7f4      	b.n	80056c4 <__swsetup_r+0xb0>
 80056da:	2000      	movs	r0, #0
 80056dc:	e7f7      	b.n	80056ce <__swsetup_r+0xba>
 80056de:	bf00      	nop
 80056e0:	20000088 	.word	0x20000088
 80056e4:	08006090 	.word	0x08006090
 80056e8:	080060b0 	.word	0x080060b0
 80056ec:	08006070 	.word	0x08006070

080056f0 <abort>:
 80056f0:	2006      	movs	r0, #6
 80056f2:	b508      	push	{r3, lr}
 80056f4:	f000 fab2 	bl	8005c5c <raise>
 80056f8:	2001      	movs	r0, #1
 80056fa:	f7fb ff44 	bl	8001586 <_exit>
	...

08005700 <__sflush_r>:
 8005700:	898a      	ldrh	r2, [r1, #12]
 8005702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005706:	4605      	mov	r5, r0
 8005708:	0710      	lsls	r0, r2, #28
 800570a:	460c      	mov	r4, r1
 800570c:	d458      	bmi.n	80057c0 <__sflush_r+0xc0>
 800570e:	684b      	ldr	r3, [r1, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	dc05      	bgt.n	8005720 <__sflush_r+0x20>
 8005714:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005716:	2b00      	cmp	r3, #0
 8005718:	dc02      	bgt.n	8005720 <__sflush_r+0x20>
 800571a:	2000      	movs	r0, #0
 800571c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005720:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005722:	2e00      	cmp	r6, #0
 8005724:	d0f9      	beq.n	800571a <__sflush_r+0x1a>
 8005726:	2300      	movs	r3, #0
 8005728:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800572c:	682f      	ldr	r7, [r5, #0]
 800572e:	602b      	str	r3, [r5, #0]
 8005730:	d032      	beq.n	8005798 <__sflush_r+0x98>
 8005732:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005734:	89a3      	ldrh	r3, [r4, #12]
 8005736:	075a      	lsls	r2, r3, #29
 8005738:	d505      	bpl.n	8005746 <__sflush_r+0x46>
 800573a:	6863      	ldr	r3, [r4, #4]
 800573c:	1ac0      	subs	r0, r0, r3
 800573e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005740:	b10b      	cbz	r3, 8005746 <__sflush_r+0x46>
 8005742:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005744:	1ac0      	subs	r0, r0, r3
 8005746:	2300      	movs	r3, #0
 8005748:	4602      	mov	r2, r0
 800574a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800574c:	4628      	mov	r0, r5
 800574e:	6a21      	ldr	r1, [r4, #32]
 8005750:	47b0      	blx	r6
 8005752:	1c43      	adds	r3, r0, #1
 8005754:	89a3      	ldrh	r3, [r4, #12]
 8005756:	d106      	bne.n	8005766 <__sflush_r+0x66>
 8005758:	6829      	ldr	r1, [r5, #0]
 800575a:	291d      	cmp	r1, #29
 800575c:	d82c      	bhi.n	80057b8 <__sflush_r+0xb8>
 800575e:	4a2a      	ldr	r2, [pc, #168]	; (8005808 <__sflush_r+0x108>)
 8005760:	40ca      	lsrs	r2, r1
 8005762:	07d6      	lsls	r6, r2, #31
 8005764:	d528      	bpl.n	80057b8 <__sflush_r+0xb8>
 8005766:	2200      	movs	r2, #0
 8005768:	6062      	str	r2, [r4, #4]
 800576a:	6922      	ldr	r2, [r4, #16]
 800576c:	04d9      	lsls	r1, r3, #19
 800576e:	6022      	str	r2, [r4, #0]
 8005770:	d504      	bpl.n	800577c <__sflush_r+0x7c>
 8005772:	1c42      	adds	r2, r0, #1
 8005774:	d101      	bne.n	800577a <__sflush_r+0x7a>
 8005776:	682b      	ldr	r3, [r5, #0]
 8005778:	b903      	cbnz	r3, 800577c <__sflush_r+0x7c>
 800577a:	6560      	str	r0, [r4, #84]	; 0x54
 800577c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800577e:	602f      	str	r7, [r5, #0]
 8005780:	2900      	cmp	r1, #0
 8005782:	d0ca      	beq.n	800571a <__sflush_r+0x1a>
 8005784:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005788:	4299      	cmp	r1, r3
 800578a:	d002      	beq.n	8005792 <__sflush_r+0x92>
 800578c:	4628      	mov	r0, r5
 800578e:	f7ff f9ef 	bl	8004b70 <_free_r>
 8005792:	2000      	movs	r0, #0
 8005794:	6360      	str	r0, [r4, #52]	; 0x34
 8005796:	e7c1      	b.n	800571c <__sflush_r+0x1c>
 8005798:	6a21      	ldr	r1, [r4, #32]
 800579a:	2301      	movs	r3, #1
 800579c:	4628      	mov	r0, r5
 800579e:	47b0      	blx	r6
 80057a0:	1c41      	adds	r1, r0, #1
 80057a2:	d1c7      	bne.n	8005734 <__sflush_r+0x34>
 80057a4:	682b      	ldr	r3, [r5, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d0c4      	beq.n	8005734 <__sflush_r+0x34>
 80057aa:	2b1d      	cmp	r3, #29
 80057ac:	d001      	beq.n	80057b2 <__sflush_r+0xb2>
 80057ae:	2b16      	cmp	r3, #22
 80057b0:	d101      	bne.n	80057b6 <__sflush_r+0xb6>
 80057b2:	602f      	str	r7, [r5, #0]
 80057b4:	e7b1      	b.n	800571a <__sflush_r+0x1a>
 80057b6:	89a3      	ldrh	r3, [r4, #12]
 80057b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057bc:	81a3      	strh	r3, [r4, #12]
 80057be:	e7ad      	b.n	800571c <__sflush_r+0x1c>
 80057c0:	690f      	ldr	r7, [r1, #16]
 80057c2:	2f00      	cmp	r7, #0
 80057c4:	d0a9      	beq.n	800571a <__sflush_r+0x1a>
 80057c6:	0793      	lsls	r3, r2, #30
 80057c8:	bf18      	it	ne
 80057ca:	2300      	movne	r3, #0
 80057cc:	680e      	ldr	r6, [r1, #0]
 80057ce:	bf08      	it	eq
 80057d0:	694b      	ldreq	r3, [r1, #20]
 80057d2:	eba6 0807 	sub.w	r8, r6, r7
 80057d6:	600f      	str	r7, [r1, #0]
 80057d8:	608b      	str	r3, [r1, #8]
 80057da:	f1b8 0f00 	cmp.w	r8, #0
 80057de:	dd9c      	ble.n	800571a <__sflush_r+0x1a>
 80057e0:	4643      	mov	r3, r8
 80057e2:	463a      	mov	r2, r7
 80057e4:	4628      	mov	r0, r5
 80057e6:	6a21      	ldr	r1, [r4, #32]
 80057e8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80057ea:	47b0      	blx	r6
 80057ec:	2800      	cmp	r0, #0
 80057ee:	dc06      	bgt.n	80057fe <__sflush_r+0xfe>
 80057f0:	89a3      	ldrh	r3, [r4, #12]
 80057f2:	f04f 30ff 	mov.w	r0, #4294967295
 80057f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057fa:	81a3      	strh	r3, [r4, #12]
 80057fc:	e78e      	b.n	800571c <__sflush_r+0x1c>
 80057fe:	4407      	add	r7, r0
 8005800:	eba8 0800 	sub.w	r8, r8, r0
 8005804:	e7e9      	b.n	80057da <__sflush_r+0xda>
 8005806:	bf00      	nop
 8005808:	20400001 	.word	0x20400001

0800580c <_fflush_r>:
 800580c:	b538      	push	{r3, r4, r5, lr}
 800580e:	690b      	ldr	r3, [r1, #16]
 8005810:	4605      	mov	r5, r0
 8005812:	460c      	mov	r4, r1
 8005814:	b913      	cbnz	r3, 800581c <_fflush_r+0x10>
 8005816:	2500      	movs	r5, #0
 8005818:	4628      	mov	r0, r5
 800581a:	bd38      	pop	{r3, r4, r5, pc}
 800581c:	b118      	cbz	r0, 8005826 <_fflush_r+0x1a>
 800581e:	6983      	ldr	r3, [r0, #24]
 8005820:	b90b      	cbnz	r3, 8005826 <_fflush_r+0x1a>
 8005822:	f000 f887 	bl	8005934 <__sinit>
 8005826:	4b14      	ldr	r3, [pc, #80]	; (8005878 <_fflush_r+0x6c>)
 8005828:	429c      	cmp	r4, r3
 800582a:	d11b      	bne.n	8005864 <_fflush_r+0x58>
 800582c:	686c      	ldr	r4, [r5, #4]
 800582e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d0ef      	beq.n	8005816 <_fflush_r+0xa>
 8005836:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005838:	07d0      	lsls	r0, r2, #31
 800583a:	d404      	bmi.n	8005846 <_fflush_r+0x3a>
 800583c:	0599      	lsls	r1, r3, #22
 800583e:	d402      	bmi.n	8005846 <_fflush_r+0x3a>
 8005840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005842:	f000 f915 	bl	8005a70 <__retarget_lock_acquire_recursive>
 8005846:	4628      	mov	r0, r5
 8005848:	4621      	mov	r1, r4
 800584a:	f7ff ff59 	bl	8005700 <__sflush_r>
 800584e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005850:	4605      	mov	r5, r0
 8005852:	07da      	lsls	r2, r3, #31
 8005854:	d4e0      	bmi.n	8005818 <_fflush_r+0xc>
 8005856:	89a3      	ldrh	r3, [r4, #12]
 8005858:	059b      	lsls	r3, r3, #22
 800585a:	d4dd      	bmi.n	8005818 <_fflush_r+0xc>
 800585c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800585e:	f000 f908 	bl	8005a72 <__retarget_lock_release_recursive>
 8005862:	e7d9      	b.n	8005818 <_fflush_r+0xc>
 8005864:	4b05      	ldr	r3, [pc, #20]	; (800587c <_fflush_r+0x70>)
 8005866:	429c      	cmp	r4, r3
 8005868:	d101      	bne.n	800586e <_fflush_r+0x62>
 800586a:	68ac      	ldr	r4, [r5, #8]
 800586c:	e7df      	b.n	800582e <_fflush_r+0x22>
 800586e:	4b04      	ldr	r3, [pc, #16]	; (8005880 <_fflush_r+0x74>)
 8005870:	429c      	cmp	r4, r3
 8005872:	bf08      	it	eq
 8005874:	68ec      	ldreq	r4, [r5, #12]
 8005876:	e7da      	b.n	800582e <_fflush_r+0x22>
 8005878:	08006090 	.word	0x08006090
 800587c:	080060b0 	.word	0x080060b0
 8005880:	08006070 	.word	0x08006070

08005884 <std>:
 8005884:	2300      	movs	r3, #0
 8005886:	b510      	push	{r4, lr}
 8005888:	4604      	mov	r4, r0
 800588a:	e9c0 3300 	strd	r3, r3, [r0]
 800588e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005892:	6083      	str	r3, [r0, #8]
 8005894:	8181      	strh	r1, [r0, #12]
 8005896:	6643      	str	r3, [r0, #100]	; 0x64
 8005898:	81c2      	strh	r2, [r0, #14]
 800589a:	6183      	str	r3, [r0, #24]
 800589c:	4619      	mov	r1, r3
 800589e:	2208      	movs	r2, #8
 80058a0:	305c      	adds	r0, #92	; 0x5c
 80058a2:	f7ff f807 	bl	80048b4 <memset>
 80058a6:	4b05      	ldr	r3, [pc, #20]	; (80058bc <std+0x38>)
 80058a8:	6224      	str	r4, [r4, #32]
 80058aa:	6263      	str	r3, [r4, #36]	; 0x24
 80058ac:	4b04      	ldr	r3, [pc, #16]	; (80058c0 <std+0x3c>)
 80058ae:	62a3      	str	r3, [r4, #40]	; 0x28
 80058b0:	4b04      	ldr	r3, [pc, #16]	; (80058c4 <std+0x40>)
 80058b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80058b4:	4b04      	ldr	r3, [pc, #16]	; (80058c8 <std+0x44>)
 80058b6:	6323      	str	r3, [r4, #48]	; 0x30
 80058b8:	bd10      	pop	{r4, pc}
 80058ba:	bf00      	nop
 80058bc:	08005c95 	.word	0x08005c95
 80058c0:	08005cb7 	.word	0x08005cb7
 80058c4:	08005cef 	.word	0x08005cef
 80058c8:	08005d13 	.word	0x08005d13

080058cc <_cleanup_r>:
 80058cc:	4901      	ldr	r1, [pc, #4]	; (80058d4 <_cleanup_r+0x8>)
 80058ce:	f000 b8af 	b.w	8005a30 <_fwalk_reent>
 80058d2:	bf00      	nop
 80058d4:	0800580d 	.word	0x0800580d

080058d8 <__sfmoreglue>:
 80058d8:	b570      	push	{r4, r5, r6, lr}
 80058da:	2568      	movs	r5, #104	; 0x68
 80058dc:	1e4a      	subs	r2, r1, #1
 80058de:	4355      	muls	r5, r2
 80058e0:	460e      	mov	r6, r1
 80058e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80058e6:	f7ff f98f 	bl	8004c08 <_malloc_r>
 80058ea:	4604      	mov	r4, r0
 80058ec:	b140      	cbz	r0, 8005900 <__sfmoreglue+0x28>
 80058ee:	2100      	movs	r1, #0
 80058f0:	e9c0 1600 	strd	r1, r6, [r0]
 80058f4:	300c      	adds	r0, #12
 80058f6:	60a0      	str	r0, [r4, #8]
 80058f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80058fc:	f7fe ffda 	bl	80048b4 <memset>
 8005900:	4620      	mov	r0, r4
 8005902:	bd70      	pop	{r4, r5, r6, pc}

08005904 <__sfp_lock_acquire>:
 8005904:	4801      	ldr	r0, [pc, #4]	; (800590c <__sfp_lock_acquire+0x8>)
 8005906:	f000 b8b3 	b.w	8005a70 <__retarget_lock_acquire_recursive>
 800590a:	bf00      	nop
 800590c:	20000300 	.word	0x20000300

08005910 <__sfp_lock_release>:
 8005910:	4801      	ldr	r0, [pc, #4]	; (8005918 <__sfp_lock_release+0x8>)
 8005912:	f000 b8ae 	b.w	8005a72 <__retarget_lock_release_recursive>
 8005916:	bf00      	nop
 8005918:	20000300 	.word	0x20000300

0800591c <__sinit_lock_acquire>:
 800591c:	4801      	ldr	r0, [pc, #4]	; (8005924 <__sinit_lock_acquire+0x8>)
 800591e:	f000 b8a7 	b.w	8005a70 <__retarget_lock_acquire_recursive>
 8005922:	bf00      	nop
 8005924:	200002fb 	.word	0x200002fb

08005928 <__sinit_lock_release>:
 8005928:	4801      	ldr	r0, [pc, #4]	; (8005930 <__sinit_lock_release+0x8>)
 800592a:	f000 b8a2 	b.w	8005a72 <__retarget_lock_release_recursive>
 800592e:	bf00      	nop
 8005930:	200002fb 	.word	0x200002fb

08005934 <__sinit>:
 8005934:	b510      	push	{r4, lr}
 8005936:	4604      	mov	r4, r0
 8005938:	f7ff fff0 	bl	800591c <__sinit_lock_acquire>
 800593c:	69a3      	ldr	r3, [r4, #24]
 800593e:	b11b      	cbz	r3, 8005948 <__sinit+0x14>
 8005940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005944:	f7ff bff0 	b.w	8005928 <__sinit_lock_release>
 8005948:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800594c:	6523      	str	r3, [r4, #80]	; 0x50
 800594e:	4b13      	ldr	r3, [pc, #76]	; (800599c <__sinit+0x68>)
 8005950:	4a13      	ldr	r2, [pc, #76]	; (80059a0 <__sinit+0x6c>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	62a2      	str	r2, [r4, #40]	; 0x28
 8005956:	42a3      	cmp	r3, r4
 8005958:	bf08      	it	eq
 800595a:	2301      	moveq	r3, #1
 800595c:	4620      	mov	r0, r4
 800595e:	bf08      	it	eq
 8005960:	61a3      	streq	r3, [r4, #24]
 8005962:	f000 f81f 	bl	80059a4 <__sfp>
 8005966:	6060      	str	r0, [r4, #4]
 8005968:	4620      	mov	r0, r4
 800596a:	f000 f81b 	bl	80059a4 <__sfp>
 800596e:	60a0      	str	r0, [r4, #8]
 8005970:	4620      	mov	r0, r4
 8005972:	f000 f817 	bl	80059a4 <__sfp>
 8005976:	2200      	movs	r2, #0
 8005978:	2104      	movs	r1, #4
 800597a:	60e0      	str	r0, [r4, #12]
 800597c:	6860      	ldr	r0, [r4, #4]
 800597e:	f7ff ff81 	bl	8005884 <std>
 8005982:	2201      	movs	r2, #1
 8005984:	2109      	movs	r1, #9
 8005986:	68a0      	ldr	r0, [r4, #8]
 8005988:	f7ff ff7c 	bl	8005884 <std>
 800598c:	2202      	movs	r2, #2
 800598e:	2112      	movs	r1, #18
 8005990:	68e0      	ldr	r0, [r4, #12]
 8005992:	f7ff ff77 	bl	8005884 <std>
 8005996:	2301      	movs	r3, #1
 8005998:	61a3      	str	r3, [r4, #24]
 800599a:	e7d1      	b.n	8005940 <__sinit+0xc>
 800599c:	08005e84 	.word	0x08005e84
 80059a0:	080058cd 	.word	0x080058cd

080059a4 <__sfp>:
 80059a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059a6:	4607      	mov	r7, r0
 80059a8:	f7ff ffac 	bl	8005904 <__sfp_lock_acquire>
 80059ac:	4b1e      	ldr	r3, [pc, #120]	; (8005a28 <__sfp+0x84>)
 80059ae:	681e      	ldr	r6, [r3, #0]
 80059b0:	69b3      	ldr	r3, [r6, #24]
 80059b2:	b913      	cbnz	r3, 80059ba <__sfp+0x16>
 80059b4:	4630      	mov	r0, r6
 80059b6:	f7ff ffbd 	bl	8005934 <__sinit>
 80059ba:	3648      	adds	r6, #72	; 0x48
 80059bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80059c0:	3b01      	subs	r3, #1
 80059c2:	d503      	bpl.n	80059cc <__sfp+0x28>
 80059c4:	6833      	ldr	r3, [r6, #0]
 80059c6:	b30b      	cbz	r3, 8005a0c <__sfp+0x68>
 80059c8:	6836      	ldr	r6, [r6, #0]
 80059ca:	e7f7      	b.n	80059bc <__sfp+0x18>
 80059cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80059d0:	b9d5      	cbnz	r5, 8005a08 <__sfp+0x64>
 80059d2:	4b16      	ldr	r3, [pc, #88]	; (8005a2c <__sfp+0x88>)
 80059d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80059d8:	60e3      	str	r3, [r4, #12]
 80059da:	6665      	str	r5, [r4, #100]	; 0x64
 80059dc:	f000 f847 	bl	8005a6e <__retarget_lock_init_recursive>
 80059e0:	f7ff ff96 	bl	8005910 <__sfp_lock_release>
 80059e4:	2208      	movs	r2, #8
 80059e6:	4629      	mov	r1, r5
 80059e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80059ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80059f0:	6025      	str	r5, [r4, #0]
 80059f2:	61a5      	str	r5, [r4, #24]
 80059f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80059f8:	f7fe ff5c 	bl	80048b4 <memset>
 80059fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005a00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005a04:	4620      	mov	r0, r4
 8005a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a08:	3468      	adds	r4, #104	; 0x68
 8005a0a:	e7d9      	b.n	80059c0 <__sfp+0x1c>
 8005a0c:	2104      	movs	r1, #4
 8005a0e:	4638      	mov	r0, r7
 8005a10:	f7ff ff62 	bl	80058d8 <__sfmoreglue>
 8005a14:	4604      	mov	r4, r0
 8005a16:	6030      	str	r0, [r6, #0]
 8005a18:	2800      	cmp	r0, #0
 8005a1a:	d1d5      	bne.n	80059c8 <__sfp+0x24>
 8005a1c:	f7ff ff78 	bl	8005910 <__sfp_lock_release>
 8005a20:	230c      	movs	r3, #12
 8005a22:	603b      	str	r3, [r7, #0]
 8005a24:	e7ee      	b.n	8005a04 <__sfp+0x60>
 8005a26:	bf00      	nop
 8005a28:	08005e84 	.word	0x08005e84
 8005a2c:	ffff0001 	.word	0xffff0001

08005a30 <_fwalk_reent>:
 8005a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a34:	4606      	mov	r6, r0
 8005a36:	4688      	mov	r8, r1
 8005a38:	2700      	movs	r7, #0
 8005a3a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005a3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a42:	f1b9 0901 	subs.w	r9, r9, #1
 8005a46:	d505      	bpl.n	8005a54 <_fwalk_reent+0x24>
 8005a48:	6824      	ldr	r4, [r4, #0]
 8005a4a:	2c00      	cmp	r4, #0
 8005a4c:	d1f7      	bne.n	8005a3e <_fwalk_reent+0xe>
 8005a4e:	4638      	mov	r0, r7
 8005a50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a54:	89ab      	ldrh	r3, [r5, #12]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d907      	bls.n	8005a6a <_fwalk_reent+0x3a>
 8005a5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	d003      	beq.n	8005a6a <_fwalk_reent+0x3a>
 8005a62:	4629      	mov	r1, r5
 8005a64:	4630      	mov	r0, r6
 8005a66:	47c0      	blx	r8
 8005a68:	4307      	orrs	r7, r0
 8005a6a:	3568      	adds	r5, #104	; 0x68
 8005a6c:	e7e9      	b.n	8005a42 <_fwalk_reent+0x12>

08005a6e <__retarget_lock_init_recursive>:
 8005a6e:	4770      	bx	lr

08005a70 <__retarget_lock_acquire_recursive>:
 8005a70:	4770      	bx	lr

08005a72 <__retarget_lock_release_recursive>:
 8005a72:	4770      	bx	lr

08005a74 <__swhatbuf_r>:
 8005a74:	b570      	push	{r4, r5, r6, lr}
 8005a76:	460e      	mov	r6, r1
 8005a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a7c:	4614      	mov	r4, r2
 8005a7e:	2900      	cmp	r1, #0
 8005a80:	461d      	mov	r5, r3
 8005a82:	b096      	sub	sp, #88	; 0x58
 8005a84:	da07      	bge.n	8005a96 <__swhatbuf_r+0x22>
 8005a86:	2300      	movs	r3, #0
 8005a88:	602b      	str	r3, [r5, #0]
 8005a8a:	89b3      	ldrh	r3, [r6, #12]
 8005a8c:	061a      	lsls	r2, r3, #24
 8005a8e:	d410      	bmi.n	8005ab2 <__swhatbuf_r+0x3e>
 8005a90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a94:	e00e      	b.n	8005ab4 <__swhatbuf_r+0x40>
 8005a96:	466a      	mov	r2, sp
 8005a98:	f000 f962 	bl	8005d60 <_fstat_r>
 8005a9c:	2800      	cmp	r0, #0
 8005a9e:	dbf2      	blt.n	8005a86 <__swhatbuf_r+0x12>
 8005aa0:	9a01      	ldr	r2, [sp, #4]
 8005aa2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005aa6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005aaa:	425a      	negs	r2, r3
 8005aac:	415a      	adcs	r2, r3
 8005aae:	602a      	str	r2, [r5, #0]
 8005ab0:	e7ee      	b.n	8005a90 <__swhatbuf_r+0x1c>
 8005ab2:	2340      	movs	r3, #64	; 0x40
 8005ab4:	2000      	movs	r0, #0
 8005ab6:	6023      	str	r3, [r4, #0]
 8005ab8:	b016      	add	sp, #88	; 0x58
 8005aba:	bd70      	pop	{r4, r5, r6, pc}

08005abc <__smakebuf_r>:
 8005abc:	898b      	ldrh	r3, [r1, #12]
 8005abe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ac0:	079d      	lsls	r5, r3, #30
 8005ac2:	4606      	mov	r6, r0
 8005ac4:	460c      	mov	r4, r1
 8005ac6:	d507      	bpl.n	8005ad8 <__smakebuf_r+0x1c>
 8005ac8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005acc:	6023      	str	r3, [r4, #0]
 8005ace:	6123      	str	r3, [r4, #16]
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	6163      	str	r3, [r4, #20]
 8005ad4:	b002      	add	sp, #8
 8005ad6:	bd70      	pop	{r4, r5, r6, pc}
 8005ad8:	466a      	mov	r2, sp
 8005ada:	ab01      	add	r3, sp, #4
 8005adc:	f7ff ffca 	bl	8005a74 <__swhatbuf_r>
 8005ae0:	9900      	ldr	r1, [sp, #0]
 8005ae2:	4605      	mov	r5, r0
 8005ae4:	4630      	mov	r0, r6
 8005ae6:	f7ff f88f 	bl	8004c08 <_malloc_r>
 8005aea:	b948      	cbnz	r0, 8005b00 <__smakebuf_r+0x44>
 8005aec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005af0:	059a      	lsls	r2, r3, #22
 8005af2:	d4ef      	bmi.n	8005ad4 <__smakebuf_r+0x18>
 8005af4:	f023 0303 	bic.w	r3, r3, #3
 8005af8:	f043 0302 	orr.w	r3, r3, #2
 8005afc:	81a3      	strh	r3, [r4, #12]
 8005afe:	e7e3      	b.n	8005ac8 <__smakebuf_r+0xc>
 8005b00:	4b0d      	ldr	r3, [pc, #52]	; (8005b38 <__smakebuf_r+0x7c>)
 8005b02:	62b3      	str	r3, [r6, #40]	; 0x28
 8005b04:	89a3      	ldrh	r3, [r4, #12]
 8005b06:	6020      	str	r0, [r4, #0]
 8005b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b0c:	81a3      	strh	r3, [r4, #12]
 8005b0e:	9b00      	ldr	r3, [sp, #0]
 8005b10:	6120      	str	r0, [r4, #16]
 8005b12:	6163      	str	r3, [r4, #20]
 8005b14:	9b01      	ldr	r3, [sp, #4]
 8005b16:	b15b      	cbz	r3, 8005b30 <__smakebuf_r+0x74>
 8005b18:	4630      	mov	r0, r6
 8005b1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b1e:	f000 f931 	bl	8005d84 <_isatty_r>
 8005b22:	b128      	cbz	r0, 8005b30 <__smakebuf_r+0x74>
 8005b24:	89a3      	ldrh	r3, [r4, #12]
 8005b26:	f023 0303 	bic.w	r3, r3, #3
 8005b2a:	f043 0301 	orr.w	r3, r3, #1
 8005b2e:	81a3      	strh	r3, [r4, #12]
 8005b30:	89a0      	ldrh	r0, [r4, #12]
 8005b32:	4305      	orrs	r5, r0
 8005b34:	81a5      	strh	r5, [r4, #12]
 8005b36:	e7cd      	b.n	8005ad4 <__smakebuf_r+0x18>
 8005b38:	080058cd 	.word	0x080058cd

08005b3c <memchr>:
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	b510      	push	{r4, lr}
 8005b40:	b2c9      	uxtb	r1, r1
 8005b42:	4402      	add	r2, r0
 8005b44:	4293      	cmp	r3, r2
 8005b46:	4618      	mov	r0, r3
 8005b48:	d101      	bne.n	8005b4e <memchr+0x12>
 8005b4a:	2000      	movs	r0, #0
 8005b4c:	e003      	b.n	8005b56 <memchr+0x1a>
 8005b4e:	7804      	ldrb	r4, [r0, #0]
 8005b50:	3301      	adds	r3, #1
 8005b52:	428c      	cmp	r4, r1
 8005b54:	d1f6      	bne.n	8005b44 <memchr+0x8>
 8005b56:	bd10      	pop	{r4, pc}

08005b58 <memcpy>:
 8005b58:	440a      	add	r2, r1
 8005b5a:	4291      	cmp	r1, r2
 8005b5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b60:	d100      	bne.n	8005b64 <memcpy+0xc>
 8005b62:	4770      	bx	lr
 8005b64:	b510      	push	{r4, lr}
 8005b66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b6a:	4291      	cmp	r1, r2
 8005b6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b70:	d1f9      	bne.n	8005b66 <memcpy+0xe>
 8005b72:	bd10      	pop	{r4, pc}

08005b74 <memmove>:
 8005b74:	4288      	cmp	r0, r1
 8005b76:	b510      	push	{r4, lr}
 8005b78:	eb01 0402 	add.w	r4, r1, r2
 8005b7c:	d902      	bls.n	8005b84 <memmove+0x10>
 8005b7e:	4284      	cmp	r4, r0
 8005b80:	4623      	mov	r3, r4
 8005b82:	d807      	bhi.n	8005b94 <memmove+0x20>
 8005b84:	1e43      	subs	r3, r0, #1
 8005b86:	42a1      	cmp	r1, r4
 8005b88:	d008      	beq.n	8005b9c <memmove+0x28>
 8005b8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b92:	e7f8      	b.n	8005b86 <memmove+0x12>
 8005b94:	4601      	mov	r1, r0
 8005b96:	4402      	add	r2, r0
 8005b98:	428a      	cmp	r2, r1
 8005b9a:	d100      	bne.n	8005b9e <memmove+0x2a>
 8005b9c:	bd10      	pop	{r4, pc}
 8005b9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ba2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ba6:	e7f7      	b.n	8005b98 <memmove+0x24>

08005ba8 <__malloc_lock>:
 8005ba8:	4801      	ldr	r0, [pc, #4]	; (8005bb0 <__malloc_lock+0x8>)
 8005baa:	f7ff bf61 	b.w	8005a70 <__retarget_lock_acquire_recursive>
 8005bae:	bf00      	nop
 8005bb0:	200002fc 	.word	0x200002fc

08005bb4 <__malloc_unlock>:
 8005bb4:	4801      	ldr	r0, [pc, #4]	; (8005bbc <__malloc_unlock+0x8>)
 8005bb6:	f7ff bf5c 	b.w	8005a72 <__retarget_lock_release_recursive>
 8005bba:	bf00      	nop
 8005bbc:	200002fc 	.word	0x200002fc

08005bc0 <_realloc_r>:
 8005bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc2:	4607      	mov	r7, r0
 8005bc4:	4614      	mov	r4, r2
 8005bc6:	460e      	mov	r6, r1
 8005bc8:	b921      	cbnz	r1, 8005bd4 <_realloc_r+0x14>
 8005bca:	4611      	mov	r1, r2
 8005bcc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005bd0:	f7ff b81a 	b.w	8004c08 <_malloc_r>
 8005bd4:	b922      	cbnz	r2, 8005be0 <_realloc_r+0x20>
 8005bd6:	f7fe ffcb 	bl	8004b70 <_free_r>
 8005bda:	4625      	mov	r5, r4
 8005bdc:	4628      	mov	r0, r5
 8005bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005be0:	f000 f8f2 	bl	8005dc8 <_malloc_usable_size_r>
 8005be4:	42a0      	cmp	r0, r4
 8005be6:	d20f      	bcs.n	8005c08 <_realloc_r+0x48>
 8005be8:	4621      	mov	r1, r4
 8005bea:	4638      	mov	r0, r7
 8005bec:	f7ff f80c 	bl	8004c08 <_malloc_r>
 8005bf0:	4605      	mov	r5, r0
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	d0f2      	beq.n	8005bdc <_realloc_r+0x1c>
 8005bf6:	4631      	mov	r1, r6
 8005bf8:	4622      	mov	r2, r4
 8005bfa:	f7ff ffad 	bl	8005b58 <memcpy>
 8005bfe:	4631      	mov	r1, r6
 8005c00:	4638      	mov	r0, r7
 8005c02:	f7fe ffb5 	bl	8004b70 <_free_r>
 8005c06:	e7e9      	b.n	8005bdc <_realloc_r+0x1c>
 8005c08:	4635      	mov	r5, r6
 8005c0a:	e7e7      	b.n	8005bdc <_realloc_r+0x1c>

08005c0c <_raise_r>:
 8005c0c:	291f      	cmp	r1, #31
 8005c0e:	b538      	push	{r3, r4, r5, lr}
 8005c10:	4604      	mov	r4, r0
 8005c12:	460d      	mov	r5, r1
 8005c14:	d904      	bls.n	8005c20 <_raise_r+0x14>
 8005c16:	2316      	movs	r3, #22
 8005c18:	6003      	str	r3, [r0, #0]
 8005c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c1e:	bd38      	pop	{r3, r4, r5, pc}
 8005c20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005c22:	b112      	cbz	r2, 8005c2a <_raise_r+0x1e>
 8005c24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005c28:	b94b      	cbnz	r3, 8005c3e <_raise_r+0x32>
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	f000 f830 	bl	8005c90 <_getpid_r>
 8005c30:	462a      	mov	r2, r5
 8005c32:	4601      	mov	r1, r0
 8005c34:	4620      	mov	r0, r4
 8005c36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c3a:	f000 b817 	b.w	8005c6c <_kill_r>
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d00a      	beq.n	8005c58 <_raise_r+0x4c>
 8005c42:	1c59      	adds	r1, r3, #1
 8005c44:	d103      	bne.n	8005c4e <_raise_r+0x42>
 8005c46:	2316      	movs	r3, #22
 8005c48:	6003      	str	r3, [r0, #0]
 8005c4a:	2001      	movs	r0, #1
 8005c4c:	e7e7      	b.n	8005c1e <_raise_r+0x12>
 8005c4e:	2400      	movs	r4, #0
 8005c50:	4628      	mov	r0, r5
 8005c52:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005c56:	4798      	blx	r3
 8005c58:	2000      	movs	r0, #0
 8005c5a:	e7e0      	b.n	8005c1e <_raise_r+0x12>

08005c5c <raise>:
 8005c5c:	4b02      	ldr	r3, [pc, #8]	; (8005c68 <raise+0xc>)
 8005c5e:	4601      	mov	r1, r0
 8005c60:	6818      	ldr	r0, [r3, #0]
 8005c62:	f7ff bfd3 	b.w	8005c0c <_raise_r>
 8005c66:	bf00      	nop
 8005c68:	20000088 	.word	0x20000088

08005c6c <_kill_r>:
 8005c6c:	b538      	push	{r3, r4, r5, lr}
 8005c6e:	2300      	movs	r3, #0
 8005c70:	4d06      	ldr	r5, [pc, #24]	; (8005c8c <_kill_r+0x20>)
 8005c72:	4604      	mov	r4, r0
 8005c74:	4608      	mov	r0, r1
 8005c76:	4611      	mov	r1, r2
 8005c78:	602b      	str	r3, [r5, #0]
 8005c7a:	f7fb fc74 	bl	8001566 <_kill>
 8005c7e:	1c43      	adds	r3, r0, #1
 8005c80:	d102      	bne.n	8005c88 <_kill_r+0x1c>
 8005c82:	682b      	ldr	r3, [r5, #0]
 8005c84:	b103      	cbz	r3, 8005c88 <_kill_r+0x1c>
 8005c86:	6023      	str	r3, [r4, #0]
 8005c88:	bd38      	pop	{r3, r4, r5, pc}
 8005c8a:	bf00      	nop
 8005c8c:	20000304 	.word	0x20000304

08005c90 <_getpid_r>:
 8005c90:	f7fb bc62 	b.w	8001558 <_getpid>

08005c94 <__sread>:
 8005c94:	b510      	push	{r4, lr}
 8005c96:	460c      	mov	r4, r1
 8005c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c9c:	f000 f89c 	bl	8005dd8 <_read_r>
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	bfab      	itete	ge
 8005ca4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005ca6:	89a3      	ldrhlt	r3, [r4, #12]
 8005ca8:	181b      	addge	r3, r3, r0
 8005caa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005cae:	bfac      	ite	ge
 8005cb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005cb2:	81a3      	strhlt	r3, [r4, #12]
 8005cb4:	bd10      	pop	{r4, pc}

08005cb6 <__swrite>:
 8005cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cba:	461f      	mov	r7, r3
 8005cbc:	898b      	ldrh	r3, [r1, #12]
 8005cbe:	4605      	mov	r5, r0
 8005cc0:	05db      	lsls	r3, r3, #23
 8005cc2:	460c      	mov	r4, r1
 8005cc4:	4616      	mov	r6, r2
 8005cc6:	d505      	bpl.n	8005cd4 <__swrite+0x1e>
 8005cc8:	2302      	movs	r3, #2
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cd0:	f000 f868 	bl	8005da4 <_lseek_r>
 8005cd4:	89a3      	ldrh	r3, [r4, #12]
 8005cd6:	4632      	mov	r2, r6
 8005cd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cdc:	81a3      	strh	r3, [r4, #12]
 8005cde:	4628      	mov	r0, r5
 8005ce0:	463b      	mov	r3, r7
 8005ce2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cea:	f000 b817 	b.w	8005d1c <_write_r>

08005cee <__sseek>:
 8005cee:	b510      	push	{r4, lr}
 8005cf0:	460c      	mov	r4, r1
 8005cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cf6:	f000 f855 	bl	8005da4 <_lseek_r>
 8005cfa:	1c43      	adds	r3, r0, #1
 8005cfc:	89a3      	ldrh	r3, [r4, #12]
 8005cfe:	bf15      	itete	ne
 8005d00:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d0a:	81a3      	strheq	r3, [r4, #12]
 8005d0c:	bf18      	it	ne
 8005d0e:	81a3      	strhne	r3, [r4, #12]
 8005d10:	bd10      	pop	{r4, pc}

08005d12 <__sclose>:
 8005d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d16:	f000 b813 	b.w	8005d40 <_close_r>
	...

08005d1c <_write_r>:
 8005d1c:	b538      	push	{r3, r4, r5, lr}
 8005d1e:	4604      	mov	r4, r0
 8005d20:	4608      	mov	r0, r1
 8005d22:	4611      	mov	r1, r2
 8005d24:	2200      	movs	r2, #0
 8005d26:	4d05      	ldr	r5, [pc, #20]	; (8005d3c <_write_r+0x20>)
 8005d28:	602a      	str	r2, [r5, #0]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	f7fb fc52 	bl	80015d4 <_write>
 8005d30:	1c43      	adds	r3, r0, #1
 8005d32:	d102      	bne.n	8005d3a <_write_r+0x1e>
 8005d34:	682b      	ldr	r3, [r5, #0]
 8005d36:	b103      	cbz	r3, 8005d3a <_write_r+0x1e>
 8005d38:	6023      	str	r3, [r4, #0]
 8005d3a:	bd38      	pop	{r3, r4, r5, pc}
 8005d3c:	20000304 	.word	0x20000304

08005d40 <_close_r>:
 8005d40:	b538      	push	{r3, r4, r5, lr}
 8005d42:	2300      	movs	r3, #0
 8005d44:	4d05      	ldr	r5, [pc, #20]	; (8005d5c <_close_r+0x1c>)
 8005d46:	4604      	mov	r4, r0
 8005d48:	4608      	mov	r0, r1
 8005d4a:	602b      	str	r3, [r5, #0]
 8005d4c:	f7fb fc5e 	bl	800160c <_close>
 8005d50:	1c43      	adds	r3, r0, #1
 8005d52:	d102      	bne.n	8005d5a <_close_r+0x1a>
 8005d54:	682b      	ldr	r3, [r5, #0]
 8005d56:	b103      	cbz	r3, 8005d5a <_close_r+0x1a>
 8005d58:	6023      	str	r3, [r4, #0]
 8005d5a:	bd38      	pop	{r3, r4, r5, pc}
 8005d5c:	20000304 	.word	0x20000304

08005d60 <_fstat_r>:
 8005d60:	b538      	push	{r3, r4, r5, lr}
 8005d62:	2300      	movs	r3, #0
 8005d64:	4d06      	ldr	r5, [pc, #24]	; (8005d80 <_fstat_r+0x20>)
 8005d66:	4604      	mov	r4, r0
 8005d68:	4608      	mov	r0, r1
 8005d6a:	4611      	mov	r1, r2
 8005d6c:	602b      	str	r3, [r5, #0]
 8005d6e:	f7fb fc58 	bl	8001622 <_fstat>
 8005d72:	1c43      	adds	r3, r0, #1
 8005d74:	d102      	bne.n	8005d7c <_fstat_r+0x1c>
 8005d76:	682b      	ldr	r3, [r5, #0]
 8005d78:	b103      	cbz	r3, 8005d7c <_fstat_r+0x1c>
 8005d7a:	6023      	str	r3, [r4, #0]
 8005d7c:	bd38      	pop	{r3, r4, r5, pc}
 8005d7e:	bf00      	nop
 8005d80:	20000304 	.word	0x20000304

08005d84 <_isatty_r>:
 8005d84:	b538      	push	{r3, r4, r5, lr}
 8005d86:	2300      	movs	r3, #0
 8005d88:	4d05      	ldr	r5, [pc, #20]	; (8005da0 <_isatty_r+0x1c>)
 8005d8a:	4604      	mov	r4, r0
 8005d8c:	4608      	mov	r0, r1
 8005d8e:	602b      	str	r3, [r5, #0]
 8005d90:	f7fb fc56 	bl	8001640 <_isatty>
 8005d94:	1c43      	adds	r3, r0, #1
 8005d96:	d102      	bne.n	8005d9e <_isatty_r+0x1a>
 8005d98:	682b      	ldr	r3, [r5, #0]
 8005d9a:	b103      	cbz	r3, 8005d9e <_isatty_r+0x1a>
 8005d9c:	6023      	str	r3, [r4, #0]
 8005d9e:	bd38      	pop	{r3, r4, r5, pc}
 8005da0:	20000304 	.word	0x20000304

08005da4 <_lseek_r>:
 8005da4:	b538      	push	{r3, r4, r5, lr}
 8005da6:	4604      	mov	r4, r0
 8005da8:	4608      	mov	r0, r1
 8005daa:	4611      	mov	r1, r2
 8005dac:	2200      	movs	r2, #0
 8005dae:	4d05      	ldr	r5, [pc, #20]	; (8005dc4 <_lseek_r+0x20>)
 8005db0:	602a      	str	r2, [r5, #0]
 8005db2:	461a      	mov	r2, r3
 8005db4:	f7fb fc4e 	bl	8001654 <_lseek>
 8005db8:	1c43      	adds	r3, r0, #1
 8005dba:	d102      	bne.n	8005dc2 <_lseek_r+0x1e>
 8005dbc:	682b      	ldr	r3, [r5, #0]
 8005dbe:	b103      	cbz	r3, 8005dc2 <_lseek_r+0x1e>
 8005dc0:	6023      	str	r3, [r4, #0]
 8005dc2:	bd38      	pop	{r3, r4, r5, pc}
 8005dc4:	20000304 	.word	0x20000304

08005dc8 <_malloc_usable_size_r>:
 8005dc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dcc:	1f18      	subs	r0, r3, #4
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	bfbc      	itt	lt
 8005dd2:	580b      	ldrlt	r3, [r1, r0]
 8005dd4:	18c0      	addlt	r0, r0, r3
 8005dd6:	4770      	bx	lr

08005dd8 <_read_r>:
 8005dd8:	b538      	push	{r3, r4, r5, lr}
 8005dda:	4604      	mov	r4, r0
 8005ddc:	4608      	mov	r0, r1
 8005dde:	4611      	mov	r1, r2
 8005de0:	2200      	movs	r2, #0
 8005de2:	4d05      	ldr	r5, [pc, #20]	; (8005df8 <_read_r+0x20>)
 8005de4:	602a      	str	r2, [r5, #0]
 8005de6:	461a      	mov	r2, r3
 8005de8:	f7fb fbd7 	bl	800159a <_read>
 8005dec:	1c43      	adds	r3, r0, #1
 8005dee:	d102      	bne.n	8005df6 <_read_r+0x1e>
 8005df0:	682b      	ldr	r3, [r5, #0]
 8005df2:	b103      	cbz	r3, 8005df6 <_read_r+0x1e>
 8005df4:	6023      	str	r3, [r4, #0]
 8005df6:	bd38      	pop	{r3, r4, r5, pc}
 8005df8:	20000304 	.word	0x20000304

08005dfc <_init>:
 8005dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dfe:	bf00      	nop
 8005e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e02:	bc08      	pop	{r3}
 8005e04:	469e      	mov	lr, r3
 8005e06:	4770      	bx	lr

08005e08 <_fini>:
 8005e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0a:	bf00      	nop
 8005e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e0e:	bc08      	pop	{r3}
 8005e10:	469e      	mov	lr, r3
 8005e12:	4770      	bx	lr
